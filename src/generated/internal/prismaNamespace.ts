
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
export const prismaVersion: PrismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

/**
 * Utility Types
 */

export type Bytes = runtime.Bytes
export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  brands: 'brands',
  categories: 'categories',
  channels: 'channels',
  coupon_sales: 'coupon_sales',
  coupons: 'coupons',
  customers: 'customers',
  delivery_addresses: 'delivery_addresses',
  delivery_sales: 'delivery_sales',
  item_item_product_sales: 'item_item_product_sales',
  item_product_sales: 'item_product_sales',
  items: 'items',
  option_groups: 'option_groups',
  payment_types: 'payment_types',
  payments: 'payments',
  product_sales: 'product_sales',
  products: 'products',
  sales: 'sales',
  stores: 'stores',
  sub_brands: 'sub_brands'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "brands" | "categories" | "channels" | "coupon_sales" | "coupons" | "customers" | "delivery_addresses" | "delivery_sales" | "item_item_product_sales" | "item_product_sales" | "items" | "option_groups" | "payment_types" | "payments" | "product_sales" | "products" | "sales" | "stores" | "sub_brands"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    brands: {
      payload: Prisma.$brandsPayload<ExtArgs>
      fields: Prisma.brandsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.brandsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.brandsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        findFirst: {
          args: Prisma.brandsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.brandsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        findMany: {
          args: Prisma.brandsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>[]
        }
        create: {
          args: Prisma.brandsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        createMany: {
          args: Prisma.brandsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.brandsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>[]
        }
        delete: {
          args: Prisma.brandsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        update: {
          args: Prisma.brandsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        deleteMany: {
          args: Prisma.brandsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.brandsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.brandsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>[]
        }
        upsert: {
          args: Prisma.brandsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        aggregate: {
          args: Prisma.BrandsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBrands>
        }
        groupBy: {
          args: Prisma.brandsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BrandsGroupByOutputType>[]
        }
        count: {
          args: Prisma.brandsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BrandsCountAggregateOutputType> | number
        }
      }
    }
    categories: {
      payload: Prisma.$categoriesPayload<ExtArgs>
      fields: Prisma.categoriesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.categoriesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.categoriesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload>
        }
        findFirst: {
          args: Prisma.categoriesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.categoriesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload>
        }
        findMany: {
          args: Prisma.categoriesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload>[]
        }
        create: {
          args: Prisma.categoriesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload>
        }
        createMany: {
          args: Prisma.categoriesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.categoriesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload>[]
        }
        delete: {
          args: Prisma.categoriesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload>
        }
        update: {
          args: Prisma.categoriesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload>
        }
        deleteMany: {
          args: Prisma.categoriesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.categoriesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.categoriesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload>[]
        }
        upsert: {
          args: Prisma.categoriesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$categoriesPayload>
        }
        aggregate: {
          args: Prisma.CategoriesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCategories>
        }
        groupBy: {
          args: Prisma.categoriesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoriesGroupByOutputType>[]
        }
        count: {
          args: Prisma.categoriesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoriesCountAggregateOutputType> | number
        }
      }
    }
    channels: {
      payload: Prisma.$channelsPayload<ExtArgs>
      fields: Prisma.channelsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.channelsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.channelsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload>
        }
        findFirst: {
          args: Prisma.channelsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.channelsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload>
        }
        findMany: {
          args: Prisma.channelsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload>[]
        }
        create: {
          args: Prisma.channelsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload>
        }
        createMany: {
          args: Prisma.channelsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.channelsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload>[]
        }
        delete: {
          args: Prisma.channelsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload>
        }
        update: {
          args: Prisma.channelsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload>
        }
        deleteMany: {
          args: Prisma.channelsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.channelsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.channelsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload>[]
        }
        upsert: {
          args: Prisma.channelsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$channelsPayload>
        }
        aggregate: {
          args: Prisma.ChannelsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChannels>
        }
        groupBy: {
          args: Prisma.channelsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChannelsGroupByOutputType>[]
        }
        count: {
          args: Prisma.channelsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChannelsCountAggregateOutputType> | number
        }
      }
    }
    coupon_sales: {
      payload: Prisma.$coupon_salesPayload<ExtArgs>
      fields: Prisma.coupon_salesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.coupon_salesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.coupon_salesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload>
        }
        findFirst: {
          args: Prisma.coupon_salesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.coupon_salesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload>
        }
        findMany: {
          args: Prisma.coupon_salesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload>[]
        }
        create: {
          args: Prisma.coupon_salesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload>
        }
        createMany: {
          args: Prisma.coupon_salesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.coupon_salesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload>[]
        }
        delete: {
          args: Prisma.coupon_salesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload>
        }
        update: {
          args: Prisma.coupon_salesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload>
        }
        deleteMany: {
          args: Prisma.coupon_salesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.coupon_salesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.coupon_salesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload>[]
        }
        upsert: {
          args: Prisma.coupon_salesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$coupon_salesPayload>
        }
        aggregate: {
          args: Prisma.Coupon_salesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCoupon_sales>
        }
        groupBy: {
          args: Prisma.coupon_salesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Coupon_salesGroupByOutputType>[]
        }
        count: {
          args: Prisma.coupon_salesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Coupon_salesCountAggregateOutputType> | number
        }
      }
    }
    coupons: {
      payload: Prisma.$couponsPayload<ExtArgs>
      fields: Prisma.couponsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.couponsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.couponsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload>
        }
        findFirst: {
          args: Prisma.couponsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.couponsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload>
        }
        findMany: {
          args: Prisma.couponsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload>[]
        }
        create: {
          args: Prisma.couponsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload>
        }
        createMany: {
          args: Prisma.couponsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.couponsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload>[]
        }
        delete: {
          args: Prisma.couponsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload>
        }
        update: {
          args: Prisma.couponsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload>
        }
        deleteMany: {
          args: Prisma.couponsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.couponsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.couponsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload>[]
        }
        upsert: {
          args: Prisma.couponsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$couponsPayload>
        }
        aggregate: {
          args: Prisma.CouponsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCoupons>
        }
        groupBy: {
          args: Prisma.couponsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CouponsGroupByOutputType>[]
        }
        count: {
          args: Prisma.couponsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CouponsCountAggregateOutputType> | number
        }
      }
    }
    customers: {
      payload: Prisma.$customersPayload<ExtArgs>
      fields: Prisma.customersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.customersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.customersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload>
        }
        findFirst: {
          args: Prisma.customersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.customersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload>
        }
        findMany: {
          args: Prisma.customersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload>[]
        }
        create: {
          args: Prisma.customersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload>
        }
        createMany: {
          args: Prisma.customersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.customersCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload>[]
        }
        delete: {
          args: Prisma.customersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload>
        }
        update: {
          args: Prisma.customersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload>
        }
        deleteMany: {
          args: Prisma.customersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.customersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.customersUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload>[]
        }
        upsert: {
          args: Prisma.customersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$customersPayload>
        }
        aggregate: {
          args: Prisma.CustomersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCustomers>
        }
        groupBy: {
          args: Prisma.customersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CustomersGroupByOutputType>[]
        }
        count: {
          args: Prisma.customersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CustomersCountAggregateOutputType> | number
        }
      }
    }
    delivery_addresses: {
      payload: Prisma.$delivery_addressesPayload<ExtArgs>
      fields: Prisma.delivery_addressesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.delivery_addressesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.delivery_addressesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload>
        }
        findFirst: {
          args: Prisma.delivery_addressesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.delivery_addressesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload>
        }
        findMany: {
          args: Prisma.delivery_addressesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload>[]
        }
        create: {
          args: Prisma.delivery_addressesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload>
        }
        createMany: {
          args: Prisma.delivery_addressesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.delivery_addressesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload>[]
        }
        delete: {
          args: Prisma.delivery_addressesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload>
        }
        update: {
          args: Prisma.delivery_addressesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload>
        }
        deleteMany: {
          args: Prisma.delivery_addressesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.delivery_addressesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.delivery_addressesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload>[]
        }
        upsert: {
          args: Prisma.delivery_addressesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_addressesPayload>
        }
        aggregate: {
          args: Prisma.Delivery_addressesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDelivery_addresses>
        }
        groupBy: {
          args: Prisma.delivery_addressesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Delivery_addressesGroupByOutputType>[]
        }
        count: {
          args: Prisma.delivery_addressesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Delivery_addressesCountAggregateOutputType> | number
        }
      }
    }
    delivery_sales: {
      payload: Prisma.$delivery_salesPayload<ExtArgs>
      fields: Prisma.delivery_salesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.delivery_salesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.delivery_salesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload>
        }
        findFirst: {
          args: Prisma.delivery_salesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.delivery_salesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload>
        }
        findMany: {
          args: Prisma.delivery_salesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload>[]
        }
        create: {
          args: Prisma.delivery_salesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload>
        }
        createMany: {
          args: Prisma.delivery_salesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.delivery_salesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload>[]
        }
        delete: {
          args: Prisma.delivery_salesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload>
        }
        update: {
          args: Prisma.delivery_salesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload>
        }
        deleteMany: {
          args: Prisma.delivery_salesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.delivery_salesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.delivery_salesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload>[]
        }
        upsert: {
          args: Prisma.delivery_salesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$delivery_salesPayload>
        }
        aggregate: {
          args: Prisma.Delivery_salesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDelivery_sales>
        }
        groupBy: {
          args: Prisma.delivery_salesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Delivery_salesGroupByOutputType>[]
        }
        count: {
          args: Prisma.delivery_salesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Delivery_salesCountAggregateOutputType> | number
        }
      }
    }
    item_item_product_sales: {
      payload: Prisma.$item_item_product_salesPayload<ExtArgs>
      fields: Prisma.item_item_product_salesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.item_item_product_salesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.item_item_product_salesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload>
        }
        findFirst: {
          args: Prisma.item_item_product_salesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.item_item_product_salesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload>
        }
        findMany: {
          args: Prisma.item_item_product_salesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload>[]
        }
        create: {
          args: Prisma.item_item_product_salesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload>
        }
        createMany: {
          args: Prisma.item_item_product_salesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.item_item_product_salesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload>[]
        }
        delete: {
          args: Prisma.item_item_product_salesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload>
        }
        update: {
          args: Prisma.item_item_product_salesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload>
        }
        deleteMany: {
          args: Prisma.item_item_product_salesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.item_item_product_salesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.item_item_product_salesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload>[]
        }
        upsert: {
          args: Prisma.item_item_product_salesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_item_product_salesPayload>
        }
        aggregate: {
          args: Prisma.Item_item_product_salesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateItem_item_product_sales>
        }
        groupBy: {
          args: Prisma.item_item_product_salesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Item_item_product_salesGroupByOutputType>[]
        }
        count: {
          args: Prisma.item_item_product_salesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Item_item_product_salesCountAggregateOutputType> | number
        }
      }
    }
    item_product_sales: {
      payload: Prisma.$item_product_salesPayload<ExtArgs>
      fields: Prisma.item_product_salesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.item_product_salesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.item_product_salesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload>
        }
        findFirst: {
          args: Prisma.item_product_salesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.item_product_salesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload>
        }
        findMany: {
          args: Prisma.item_product_salesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload>[]
        }
        create: {
          args: Prisma.item_product_salesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload>
        }
        createMany: {
          args: Prisma.item_product_salesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.item_product_salesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload>[]
        }
        delete: {
          args: Prisma.item_product_salesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload>
        }
        update: {
          args: Prisma.item_product_salesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload>
        }
        deleteMany: {
          args: Prisma.item_product_salesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.item_product_salesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.item_product_salesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload>[]
        }
        upsert: {
          args: Prisma.item_product_salesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$item_product_salesPayload>
        }
        aggregate: {
          args: Prisma.Item_product_salesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateItem_product_sales>
        }
        groupBy: {
          args: Prisma.item_product_salesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Item_product_salesGroupByOutputType>[]
        }
        count: {
          args: Prisma.item_product_salesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Item_product_salesCountAggregateOutputType> | number
        }
      }
    }
    items: {
      payload: Prisma.$itemsPayload<ExtArgs>
      fields: Prisma.itemsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.itemsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.itemsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload>
        }
        findFirst: {
          args: Prisma.itemsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.itemsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload>
        }
        findMany: {
          args: Prisma.itemsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload>[]
        }
        create: {
          args: Prisma.itemsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload>
        }
        createMany: {
          args: Prisma.itemsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.itemsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload>[]
        }
        delete: {
          args: Prisma.itemsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload>
        }
        update: {
          args: Prisma.itemsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload>
        }
        deleteMany: {
          args: Prisma.itemsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.itemsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.itemsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload>[]
        }
        upsert: {
          args: Prisma.itemsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$itemsPayload>
        }
        aggregate: {
          args: Prisma.ItemsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateItems>
        }
        groupBy: {
          args: Prisma.itemsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ItemsGroupByOutputType>[]
        }
        count: {
          args: Prisma.itemsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ItemsCountAggregateOutputType> | number
        }
      }
    }
    option_groups: {
      payload: Prisma.$option_groupsPayload<ExtArgs>
      fields: Prisma.option_groupsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.option_groupsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.option_groupsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload>
        }
        findFirst: {
          args: Prisma.option_groupsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.option_groupsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload>
        }
        findMany: {
          args: Prisma.option_groupsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload>[]
        }
        create: {
          args: Prisma.option_groupsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload>
        }
        createMany: {
          args: Prisma.option_groupsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.option_groupsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload>[]
        }
        delete: {
          args: Prisma.option_groupsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload>
        }
        update: {
          args: Prisma.option_groupsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload>
        }
        deleteMany: {
          args: Prisma.option_groupsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.option_groupsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.option_groupsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload>[]
        }
        upsert: {
          args: Prisma.option_groupsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$option_groupsPayload>
        }
        aggregate: {
          args: Prisma.Option_groupsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOption_groups>
        }
        groupBy: {
          args: Prisma.option_groupsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Option_groupsGroupByOutputType>[]
        }
        count: {
          args: Prisma.option_groupsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Option_groupsCountAggregateOutputType> | number
        }
      }
    }
    payment_types: {
      payload: Prisma.$payment_typesPayload<ExtArgs>
      fields: Prisma.payment_typesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.payment_typesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.payment_typesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload>
        }
        findFirst: {
          args: Prisma.payment_typesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.payment_typesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload>
        }
        findMany: {
          args: Prisma.payment_typesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload>[]
        }
        create: {
          args: Prisma.payment_typesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload>
        }
        createMany: {
          args: Prisma.payment_typesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.payment_typesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload>[]
        }
        delete: {
          args: Prisma.payment_typesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload>
        }
        update: {
          args: Prisma.payment_typesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload>
        }
        deleteMany: {
          args: Prisma.payment_typesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.payment_typesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.payment_typesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload>[]
        }
        upsert: {
          args: Prisma.payment_typesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$payment_typesPayload>
        }
        aggregate: {
          args: Prisma.Payment_typesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePayment_types>
        }
        groupBy: {
          args: Prisma.payment_typesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Payment_typesGroupByOutputType>[]
        }
        count: {
          args: Prisma.payment_typesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Payment_typesCountAggregateOutputType> | number
        }
      }
    }
    payments: {
      payload: Prisma.$paymentsPayload<ExtArgs>
      fields: Prisma.paymentsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.paymentsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.paymentsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload>
        }
        findFirst: {
          args: Prisma.paymentsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.paymentsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload>
        }
        findMany: {
          args: Prisma.paymentsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload>[]
        }
        create: {
          args: Prisma.paymentsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload>
        }
        createMany: {
          args: Prisma.paymentsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.paymentsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload>[]
        }
        delete: {
          args: Prisma.paymentsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload>
        }
        update: {
          args: Prisma.paymentsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload>
        }
        deleteMany: {
          args: Prisma.paymentsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.paymentsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.paymentsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload>[]
        }
        upsert: {
          args: Prisma.paymentsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$paymentsPayload>
        }
        aggregate: {
          args: Prisma.PaymentsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePayments>
        }
        groupBy: {
          args: Prisma.paymentsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentsGroupByOutputType>[]
        }
        count: {
          args: Prisma.paymentsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentsCountAggregateOutputType> | number
        }
      }
    }
    product_sales: {
      payload: Prisma.$product_salesPayload<ExtArgs>
      fields: Prisma.product_salesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.product_salesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.product_salesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload>
        }
        findFirst: {
          args: Prisma.product_salesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.product_salesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload>
        }
        findMany: {
          args: Prisma.product_salesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload>[]
        }
        create: {
          args: Prisma.product_salesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload>
        }
        createMany: {
          args: Prisma.product_salesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.product_salesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload>[]
        }
        delete: {
          args: Prisma.product_salesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload>
        }
        update: {
          args: Prisma.product_salesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload>
        }
        deleteMany: {
          args: Prisma.product_salesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.product_salesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.product_salesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload>[]
        }
        upsert: {
          args: Prisma.product_salesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$product_salesPayload>
        }
        aggregate: {
          args: Prisma.Product_salesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProduct_sales>
        }
        groupBy: {
          args: Prisma.product_salesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Product_salesGroupByOutputType>[]
        }
        count: {
          args: Prisma.product_salesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Product_salesCountAggregateOutputType> | number
        }
      }
    }
    products: {
      payload: Prisma.$productsPayload<ExtArgs>
      fields: Prisma.productsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.productsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.productsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload>
        }
        findFirst: {
          args: Prisma.productsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.productsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload>
        }
        findMany: {
          args: Prisma.productsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload>[]
        }
        create: {
          args: Prisma.productsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload>
        }
        createMany: {
          args: Prisma.productsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.productsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload>[]
        }
        delete: {
          args: Prisma.productsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload>
        }
        update: {
          args: Prisma.productsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload>
        }
        deleteMany: {
          args: Prisma.productsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.productsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.productsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload>[]
        }
        upsert: {
          args: Prisma.productsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$productsPayload>
        }
        aggregate: {
          args: Prisma.ProductsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProducts>
        }
        groupBy: {
          args: Prisma.productsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductsGroupByOutputType>[]
        }
        count: {
          args: Prisma.productsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductsCountAggregateOutputType> | number
        }
      }
    }
    sales: {
      payload: Prisma.$salesPayload<ExtArgs>
      fields: Prisma.salesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.salesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.salesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload>
        }
        findFirst: {
          args: Prisma.salesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.salesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload>
        }
        findMany: {
          args: Prisma.salesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload>[]
        }
        create: {
          args: Prisma.salesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload>
        }
        createMany: {
          args: Prisma.salesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.salesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload>[]
        }
        delete: {
          args: Prisma.salesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload>
        }
        update: {
          args: Prisma.salesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload>
        }
        deleteMany: {
          args: Prisma.salesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.salesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.salesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload>[]
        }
        upsert: {
          args: Prisma.salesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salesPayload>
        }
        aggregate: {
          args: Prisma.SalesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSales>
        }
        groupBy: {
          args: Prisma.salesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SalesGroupByOutputType>[]
        }
        count: {
          args: Prisma.salesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SalesCountAggregateOutputType> | number
        }
      }
    }
    stores: {
      payload: Prisma.$storesPayload<ExtArgs>
      fields: Prisma.storesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.storesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.storesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload>
        }
        findFirst: {
          args: Prisma.storesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.storesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload>
        }
        findMany: {
          args: Prisma.storesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload>[]
        }
        create: {
          args: Prisma.storesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload>
        }
        createMany: {
          args: Prisma.storesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.storesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload>[]
        }
        delete: {
          args: Prisma.storesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload>
        }
        update: {
          args: Prisma.storesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload>
        }
        deleteMany: {
          args: Prisma.storesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.storesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.storesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload>[]
        }
        upsert: {
          args: Prisma.storesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$storesPayload>
        }
        aggregate: {
          args: Prisma.StoresAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStores>
        }
        groupBy: {
          args: Prisma.storesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StoresGroupByOutputType>[]
        }
        count: {
          args: Prisma.storesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StoresCountAggregateOutputType> | number
        }
      }
    }
    sub_brands: {
      payload: Prisma.$sub_brandsPayload<ExtArgs>
      fields: Prisma.sub_brandsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.sub_brandsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.sub_brandsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload>
        }
        findFirst: {
          args: Prisma.sub_brandsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.sub_brandsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload>
        }
        findMany: {
          args: Prisma.sub_brandsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload>[]
        }
        create: {
          args: Prisma.sub_brandsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload>
        }
        createMany: {
          args: Prisma.sub_brandsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.sub_brandsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload>[]
        }
        delete: {
          args: Prisma.sub_brandsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload>
        }
        update: {
          args: Prisma.sub_brandsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload>
        }
        deleteMany: {
          args: Prisma.sub_brandsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.sub_brandsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.sub_brandsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload>[]
        }
        upsert: {
          args: Prisma.sub_brandsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sub_brandsPayload>
        }
        aggregate: {
          args: Prisma.Sub_brandsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSub_brands>
        }
        groupBy: {
          args: Prisma.sub_brandsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Sub_brandsGroupByOutputType>[]
        }
        count: {
          args: Prisma.sub_brandsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Sub_brandsCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const BrandsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at'
} as const

export type BrandsScalarFieldEnum = (typeof BrandsScalarFieldEnum)[keyof typeof BrandsScalarFieldEnum]


export const CategoriesScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  sub_brand_id: 'sub_brand_id',
  name: 'name',
  type: 'type',
  pos_uuid: 'pos_uuid',
  deleted_at: 'deleted_at'
} as const

export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


export const ChannelsScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  name: 'name',
  description: 'description',
  type: 'type',
  created_at: 'created_at'
} as const

export type ChannelsScalarFieldEnum = (typeof ChannelsScalarFieldEnum)[keyof typeof ChannelsScalarFieldEnum]


export const Coupon_salesScalarFieldEnum = {
  id: 'id',
  sale_id: 'sale_id',
  coupon_id: 'coupon_id',
  value: 'value',
  target: 'target',
  sponsorship: 'sponsorship'
} as const

export type Coupon_salesScalarFieldEnum = (typeof Coupon_salesScalarFieldEnum)[keyof typeof Coupon_salesScalarFieldEnum]


export const CouponsScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  code: 'code',
  discount_type: 'discount_type',
  discount_value: 'discount_value',
  is_active: 'is_active',
  valid_from: 'valid_from',
  valid_until: 'valid_until'
} as const

export type CouponsScalarFieldEnum = (typeof CouponsScalarFieldEnum)[keyof typeof CouponsScalarFieldEnum]


export const CustomersScalarFieldEnum = {
  id: 'id',
  customer_name: 'customer_name',
  email: 'email',
  phone_number: 'phone_number',
  cpf: 'cpf',
  birth_date: 'birth_date',
  gender: 'gender',
  store_id: 'store_id',
  sub_brand_id: 'sub_brand_id',
  registration_origin: 'registration_origin',
  agree_terms: 'agree_terms',
  receive_promotions_email: 'receive_promotions_email',
  receive_promotions_sms: 'receive_promotions_sms',
  created_at: 'created_at'
} as const

export type CustomersScalarFieldEnum = (typeof CustomersScalarFieldEnum)[keyof typeof CustomersScalarFieldEnum]


export const Delivery_addressesScalarFieldEnum = {
  id: 'id',
  sale_id: 'sale_id',
  delivery_sale_id: 'delivery_sale_id',
  street: 'street',
  number: 'number',
  complement: 'complement',
  formatted_address: 'formatted_address',
  neighborhood: 'neighborhood',
  city: 'city',
  state: 'state',
  country: 'country',
  postal_code: 'postal_code',
  reference: 'reference',
  latitude: 'latitude',
  longitude: 'longitude'
} as const

export type Delivery_addressesScalarFieldEnum = (typeof Delivery_addressesScalarFieldEnum)[keyof typeof Delivery_addressesScalarFieldEnum]


export const Delivery_salesScalarFieldEnum = {
  id: 'id',
  sale_id: 'sale_id',
  courier_id: 'courier_id',
  courier_name: 'courier_name',
  courier_phone: 'courier_phone',
  courier_type: 'courier_type',
  delivered_by: 'delivered_by',
  delivery_type: 'delivery_type',
  status: 'status',
  delivery_fee: 'delivery_fee',
  courier_fee: 'courier_fee',
  timing: 'timing',
  mode: 'mode'
} as const

export type Delivery_salesScalarFieldEnum = (typeof Delivery_salesScalarFieldEnum)[keyof typeof Delivery_salesScalarFieldEnum]


export const Item_item_product_salesScalarFieldEnum = {
  id: 'id',
  item_product_sale_id: 'item_product_sale_id',
  item_id: 'item_id',
  option_group_id: 'option_group_id',
  quantity: 'quantity',
  additional_price: 'additional_price',
  price: 'price',
  amount: 'amount'
} as const

export type Item_item_product_salesScalarFieldEnum = (typeof Item_item_product_salesScalarFieldEnum)[keyof typeof Item_item_product_salesScalarFieldEnum]


export const Item_product_salesScalarFieldEnum = {
  id: 'id',
  product_sale_id: 'product_sale_id',
  item_id: 'item_id',
  option_group_id: 'option_group_id',
  quantity: 'quantity',
  additional_price: 'additional_price',
  price: 'price',
  amount: 'amount',
  observations: 'observations'
} as const

export type Item_product_salesScalarFieldEnum = (typeof Item_product_salesScalarFieldEnum)[keyof typeof Item_product_salesScalarFieldEnum]


export const ItemsScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  sub_brand_id: 'sub_brand_id',
  category_id: 'category_id',
  name: 'name',
  pos_uuid: 'pos_uuid',
  deleted_at: 'deleted_at'
} as const

export type ItemsScalarFieldEnum = (typeof ItemsScalarFieldEnum)[keyof typeof ItemsScalarFieldEnum]


export const Option_groupsScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  sub_brand_id: 'sub_brand_id',
  category_id: 'category_id',
  name: 'name',
  pos_uuid: 'pos_uuid',
  deleted_at: 'deleted_at'
} as const

export type Option_groupsScalarFieldEnum = (typeof Option_groupsScalarFieldEnum)[keyof typeof Option_groupsScalarFieldEnum]


export const Payment_typesScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  description: 'description'
} as const

export type Payment_typesScalarFieldEnum = (typeof Payment_typesScalarFieldEnum)[keyof typeof Payment_typesScalarFieldEnum]


export const PaymentsScalarFieldEnum = {
  id: 'id',
  sale_id: 'sale_id',
  payment_type_id: 'payment_type_id',
  value: 'value',
  is_online: 'is_online',
  description: 'description',
  currency: 'currency'
} as const

export type PaymentsScalarFieldEnum = (typeof PaymentsScalarFieldEnum)[keyof typeof PaymentsScalarFieldEnum]


export const Product_salesScalarFieldEnum = {
  id: 'id',
  sale_id: 'sale_id',
  product_id: 'product_id',
  quantity: 'quantity',
  base_price: 'base_price',
  total_price: 'total_price',
  observations: 'observations'
} as const

export type Product_salesScalarFieldEnum = (typeof Product_salesScalarFieldEnum)[keyof typeof Product_salesScalarFieldEnum]


export const ProductsScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  sub_brand_id: 'sub_brand_id',
  category_id: 'category_id',
  name: 'name',
  pos_uuid: 'pos_uuid',
  deleted_at: 'deleted_at'
} as const

export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


export const SalesScalarFieldEnum = {
  id: 'id',
  store_id: 'store_id',
  sub_brand_id: 'sub_brand_id',
  customer_id: 'customer_id',
  channel_id: 'channel_id',
  cod_sale1: 'cod_sale1',
  cod_sale2: 'cod_sale2',
  created_at: 'created_at',
  customer_name: 'customer_name',
  sale_status_desc: 'sale_status_desc',
  total_amount_items: 'total_amount_items',
  total_discount: 'total_discount',
  total_increase: 'total_increase',
  delivery_fee: 'delivery_fee',
  service_tax_fee: 'service_tax_fee',
  total_amount: 'total_amount',
  value_paid: 'value_paid',
  production_seconds: 'production_seconds',
  delivery_seconds: 'delivery_seconds',
  people_quantity: 'people_quantity',
  discount_reason: 'discount_reason',
  increase_reason: 'increase_reason',
  origin: 'origin'
} as const

export type SalesScalarFieldEnum = (typeof SalesScalarFieldEnum)[keyof typeof SalesScalarFieldEnum]


export const StoresScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  sub_brand_id: 'sub_brand_id',
  name: 'name',
  city: 'city',
  state: 'state',
  district: 'district',
  address_street: 'address_street',
  address_number: 'address_number',
  zipcode: 'zipcode',
  latitude: 'latitude',
  longitude: 'longitude',
  is_active: 'is_active',
  is_own: 'is_own',
  is_holding: 'is_holding',
  creation_date: 'creation_date',
  created_at: 'created_at'
} as const

export type StoresScalarFieldEnum = (typeof StoresScalarFieldEnum)[keyof typeof StoresScalarFieldEnum]


export const Sub_brandsScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  name: 'name',
  created_at: 'created_at'
} as const

export type Sub_brandsScalarFieldEnum = (typeof Sub_brandsScalarFieldEnum)[keyof typeof Sub_brandsScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references
 */


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'Decimal'
 */
export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


/**
 * Reference to a field of type 'Decimal[]'
 */
export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  brands?: Prisma.brandsOmit
  categories?: Prisma.categoriesOmit
  channels?: Prisma.channelsOmit
  coupon_sales?: Prisma.coupon_salesOmit
  coupons?: Prisma.couponsOmit
  customers?: Prisma.customersOmit
  delivery_addresses?: Prisma.delivery_addressesOmit
  delivery_sales?: Prisma.delivery_salesOmit
  item_item_product_sales?: Prisma.item_item_product_salesOmit
  item_product_sales?: Prisma.item_product_salesOmit
  items?: Prisma.itemsOmit
  option_groups?: Prisma.option_groupsOmit
  payment_types?: Prisma.payment_typesOmit
  payments?: Prisma.paymentsOmit
  product_sales?: Prisma.product_salesOmit
  products?: Prisma.productsOmit
  sales?: Prisma.salesOmit
  stores?: Prisma.storesOmit
  sub_brands?: Prisma.sub_brandsOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

