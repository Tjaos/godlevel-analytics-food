
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `channels` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model channels
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type channelsModel = runtime.Types.Result.DefaultSelection<Prisma.$channelsPayload>

export type AggregateChannels = {
  _count: ChannelsCountAggregateOutputType | null
  _avg: ChannelsAvgAggregateOutputType | null
  _sum: ChannelsSumAggregateOutputType | null
  _min: ChannelsMinAggregateOutputType | null
  _max: ChannelsMaxAggregateOutputType | null
}

export type ChannelsAvgAggregateOutputType = {
  id: number | null
  brand_id: number | null
}

export type ChannelsSumAggregateOutputType = {
  id: number | null
  brand_id: number | null
}

export type ChannelsMinAggregateOutputType = {
  id: number | null
  brand_id: number | null
  name: string | null
  description: string | null
  type: string | null
  created_at: Date | null
}

export type ChannelsMaxAggregateOutputType = {
  id: number | null
  brand_id: number | null
  name: string | null
  description: string | null
  type: string | null
  created_at: Date | null
}

export type ChannelsCountAggregateOutputType = {
  id: number
  brand_id: number
  name: number
  description: number
  type: number
  created_at: number
  _all: number
}


export type ChannelsAvgAggregateInputType = {
  id?: true
  brand_id?: true
}

export type ChannelsSumAggregateInputType = {
  id?: true
  brand_id?: true
}

export type ChannelsMinAggregateInputType = {
  id?: true
  brand_id?: true
  name?: true
  description?: true
  type?: true
  created_at?: true
}

export type ChannelsMaxAggregateInputType = {
  id?: true
  brand_id?: true
  name?: true
  description?: true
  type?: true
  created_at?: true
}

export type ChannelsCountAggregateInputType = {
  id?: true
  brand_id?: true
  name?: true
  description?: true
  type?: true
  created_at?: true
  _all?: true
}

export type ChannelsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which channels to aggregate.
   */
  where?: Prisma.channelsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of channels to fetch.
   */
  orderBy?: Prisma.channelsOrderByWithRelationInput | Prisma.channelsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.channelsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` channels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` channels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned channels
  **/
  _count?: true | ChannelsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChannelsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChannelsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChannelsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChannelsMaxAggregateInputType
}

export type GetChannelsAggregateType<T extends ChannelsAggregateArgs> = {
      [P in keyof T & keyof AggregateChannels]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChannels[P]>
    : Prisma.GetScalarType<T[P], AggregateChannels[P]>
}




export type channelsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.channelsWhereInput
  orderBy?: Prisma.channelsOrderByWithAggregationInput | Prisma.channelsOrderByWithAggregationInput[]
  by: Prisma.ChannelsScalarFieldEnum[] | Prisma.ChannelsScalarFieldEnum
  having?: Prisma.channelsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChannelsCountAggregateInputType | true
  _avg?: ChannelsAvgAggregateInputType
  _sum?: ChannelsSumAggregateInputType
  _min?: ChannelsMinAggregateInputType
  _max?: ChannelsMaxAggregateInputType
}

export type ChannelsGroupByOutputType = {
  id: number
  brand_id: number | null
  name: string
  description: string | null
  type: string | null
  created_at: Date | null
  _count: ChannelsCountAggregateOutputType | null
  _avg: ChannelsAvgAggregateOutputType | null
  _sum: ChannelsSumAggregateOutputType | null
  _min: ChannelsMinAggregateOutputType | null
  _max: ChannelsMaxAggregateOutputType | null
}

type GetChannelsGroupByPayload<T extends channelsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChannelsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChannelsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChannelsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChannelsGroupByOutputType[P]>
      }
    >
  >



export type channelsWhereInput = {
  AND?: Prisma.channelsWhereInput | Prisma.channelsWhereInput[]
  OR?: Prisma.channelsWhereInput[]
  NOT?: Prisma.channelsWhereInput | Prisma.channelsWhereInput[]
  id?: Prisma.IntFilter<"channels"> | number
  brand_id?: Prisma.IntNullableFilter<"channels"> | number | null
  name?: Prisma.StringFilter<"channels"> | string
  description?: Prisma.StringNullableFilter<"channels"> | string | null
  type?: Prisma.StringNullableFilter<"channels"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"channels"> | Date | string | null
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
  sales?: Prisma.SalesListRelationFilter
}

export type channelsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  brands?: Prisma.brandsOrderByWithRelationInput
  sales?: Prisma.salesOrderByRelationAggregateInput
}

export type channelsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.channelsWhereInput | Prisma.channelsWhereInput[]
  OR?: Prisma.channelsWhereInput[]
  NOT?: Prisma.channelsWhereInput | Prisma.channelsWhereInput[]
  brand_id?: Prisma.IntNullableFilter<"channels"> | number | null
  name?: Prisma.StringFilter<"channels"> | string
  description?: Prisma.StringNullableFilter<"channels"> | string | null
  type?: Prisma.StringNullableFilter<"channels"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"channels"> | Date | string | null
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
  sales?: Prisma.SalesListRelationFilter
}, "id">

export type channelsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.channelsCountOrderByAggregateInput
  _avg?: Prisma.channelsAvgOrderByAggregateInput
  _max?: Prisma.channelsMaxOrderByAggregateInput
  _min?: Prisma.channelsMinOrderByAggregateInput
  _sum?: Prisma.channelsSumOrderByAggregateInput
}

export type channelsScalarWhereWithAggregatesInput = {
  AND?: Prisma.channelsScalarWhereWithAggregatesInput | Prisma.channelsScalarWhereWithAggregatesInput[]
  OR?: Prisma.channelsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.channelsScalarWhereWithAggregatesInput | Prisma.channelsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"channels"> | number
  brand_id?: Prisma.IntNullableWithAggregatesFilter<"channels"> | number | null
  name?: Prisma.StringWithAggregatesFilter<"channels"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"channels"> | string | null
  type?: Prisma.StringNullableWithAggregatesFilter<"channels"> | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"channels"> | Date | string | null
}

export type channelsCreateInput = {
  name: string
  description?: string | null
  type?: string | null
  created_at?: Date | string | null
  brands?: Prisma.brandsCreateNestedOneWithoutChannelsInput
  sales?: Prisma.salesCreateNestedManyWithoutChannelsInput
}

export type channelsUncheckedCreateInput = {
  id?: number
  brand_id?: number | null
  name: string
  description?: string | null
  type?: string | null
  created_at?: Date | string | null
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutChannelsInput
}

export type channelsUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  brands?: Prisma.brandsUpdateOneWithoutChannelsNestedInput
  sales?: Prisma.salesUpdateManyWithoutChannelsNestedInput
}

export type channelsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.salesUncheckedUpdateManyWithoutChannelsNestedInput
}

export type channelsCreateManyInput = {
  id?: number
  brand_id?: number | null
  name: string
  description?: string | null
  type?: string | null
  created_at?: Date | string | null
}

export type channelsUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type channelsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ChannelsListRelationFilter = {
  every?: Prisma.channelsWhereInput
  some?: Prisma.channelsWhereInput
  none?: Prisma.channelsWhereInput
}

export type channelsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type channelsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  type?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type channelsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
}

export type channelsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  type?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type channelsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  type?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type channelsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
}

export type ChannelsScalarRelationFilter = {
  is?: Prisma.channelsWhereInput
  isNot?: Prisma.channelsWhereInput
}

export type channelsCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.channelsCreateWithoutBrandsInput, Prisma.channelsUncheckedCreateWithoutBrandsInput> | Prisma.channelsCreateWithoutBrandsInput[] | Prisma.channelsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.channelsCreateOrConnectWithoutBrandsInput | Prisma.channelsCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.channelsCreateManyBrandsInputEnvelope
  connect?: Prisma.channelsWhereUniqueInput | Prisma.channelsWhereUniqueInput[]
}

export type channelsUncheckedCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.channelsCreateWithoutBrandsInput, Prisma.channelsUncheckedCreateWithoutBrandsInput> | Prisma.channelsCreateWithoutBrandsInput[] | Prisma.channelsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.channelsCreateOrConnectWithoutBrandsInput | Prisma.channelsCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.channelsCreateManyBrandsInputEnvelope
  connect?: Prisma.channelsWhereUniqueInput | Prisma.channelsWhereUniqueInput[]
}

export type channelsUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.channelsCreateWithoutBrandsInput, Prisma.channelsUncheckedCreateWithoutBrandsInput> | Prisma.channelsCreateWithoutBrandsInput[] | Prisma.channelsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.channelsCreateOrConnectWithoutBrandsInput | Prisma.channelsCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.channelsUpsertWithWhereUniqueWithoutBrandsInput | Prisma.channelsUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.channelsCreateManyBrandsInputEnvelope
  set?: Prisma.channelsWhereUniqueInput | Prisma.channelsWhereUniqueInput[]
  disconnect?: Prisma.channelsWhereUniqueInput | Prisma.channelsWhereUniqueInput[]
  delete?: Prisma.channelsWhereUniqueInput | Prisma.channelsWhereUniqueInput[]
  connect?: Prisma.channelsWhereUniqueInput | Prisma.channelsWhereUniqueInput[]
  update?: Prisma.channelsUpdateWithWhereUniqueWithoutBrandsInput | Prisma.channelsUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.channelsUpdateManyWithWhereWithoutBrandsInput | Prisma.channelsUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.channelsScalarWhereInput | Prisma.channelsScalarWhereInput[]
}

export type channelsUncheckedUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.channelsCreateWithoutBrandsInput, Prisma.channelsUncheckedCreateWithoutBrandsInput> | Prisma.channelsCreateWithoutBrandsInput[] | Prisma.channelsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.channelsCreateOrConnectWithoutBrandsInput | Prisma.channelsCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.channelsUpsertWithWhereUniqueWithoutBrandsInput | Prisma.channelsUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.channelsCreateManyBrandsInputEnvelope
  set?: Prisma.channelsWhereUniqueInput | Prisma.channelsWhereUniqueInput[]
  disconnect?: Prisma.channelsWhereUniqueInput | Prisma.channelsWhereUniqueInput[]
  delete?: Prisma.channelsWhereUniqueInput | Prisma.channelsWhereUniqueInput[]
  connect?: Prisma.channelsWhereUniqueInput | Prisma.channelsWhereUniqueInput[]
  update?: Prisma.channelsUpdateWithWhereUniqueWithoutBrandsInput | Prisma.channelsUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.channelsUpdateManyWithWhereWithoutBrandsInput | Prisma.channelsUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.channelsScalarWhereInput | Prisma.channelsScalarWhereInput[]
}

export type channelsCreateNestedOneWithoutSalesInput = {
  create?: Prisma.XOR<Prisma.channelsCreateWithoutSalesInput, Prisma.channelsUncheckedCreateWithoutSalesInput>
  connectOrCreate?: Prisma.channelsCreateOrConnectWithoutSalesInput
  connect?: Prisma.channelsWhereUniqueInput
}

export type channelsUpdateOneRequiredWithoutSalesNestedInput = {
  create?: Prisma.XOR<Prisma.channelsCreateWithoutSalesInput, Prisma.channelsUncheckedCreateWithoutSalesInput>
  connectOrCreate?: Prisma.channelsCreateOrConnectWithoutSalesInput
  upsert?: Prisma.channelsUpsertWithoutSalesInput
  connect?: Prisma.channelsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.channelsUpdateToOneWithWhereWithoutSalesInput, Prisma.channelsUpdateWithoutSalesInput>, Prisma.channelsUncheckedUpdateWithoutSalesInput>
}

export type channelsCreateWithoutBrandsInput = {
  name: string
  description?: string | null
  type?: string | null
  created_at?: Date | string | null
  sales?: Prisma.salesCreateNestedManyWithoutChannelsInput
}

export type channelsUncheckedCreateWithoutBrandsInput = {
  id?: number
  name: string
  description?: string | null
  type?: string | null
  created_at?: Date | string | null
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutChannelsInput
}

export type channelsCreateOrConnectWithoutBrandsInput = {
  where: Prisma.channelsWhereUniqueInput
  create: Prisma.XOR<Prisma.channelsCreateWithoutBrandsInput, Prisma.channelsUncheckedCreateWithoutBrandsInput>
}

export type channelsCreateManyBrandsInputEnvelope = {
  data: Prisma.channelsCreateManyBrandsInput | Prisma.channelsCreateManyBrandsInput[]
  skipDuplicates?: boolean
}

export type channelsUpsertWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.channelsWhereUniqueInput
  update: Prisma.XOR<Prisma.channelsUpdateWithoutBrandsInput, Prisma.channelsUncheckedUpdateWithoutBrandsInput>
  create: Prisma.XOR<Prisma.channelsCreateWithoutBrandsInput, Prisma.channelsUncheckedCreateWithoutBrandsInput>
}

export type channelsUpdateWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.channelsWhereUniqueInput
  data: Prisma.XOR<Prisma.channelsUpdateWithoutBrandsInput, Prisma.channelsUncheckedUpdateWithoutBrandsInput>
}

export type channelsUpdateManyWithWhereWithoutBrandsInput = {
  where: Prisma.channelsScalarWhereInput
  data: Prisma.XOR<Prisma.channelsUpdateManyMutationInput, Prisma.channelsUncheckedUpdateManyWithoutBrandsInput>
}

export type channelsScalarWhereInput = {
  AND?: Prisma.channelsScalarWhereInput | Prisma.channelsScalarWhereInput[]
  OR?: Prisma.channelsScalarWhereInput[]
  NOT?: Prisma.channelsScalarWhereInput | Prisma.channelsScalarWhereInput[]
  id?: Prisma.IntFilter<"channels"> | number
  brand_id?: Prisma.IntNullableFilter<"channels"> | number | null
  name?: Prisma.StringFilter<"channels"> | string
  description?: Prisma.StringNullableFilter<"channels"> | string | null
  type?: Prisma.StringNullableFilter<"channels"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"channels"> | Date | string | null
}

export type channelsCreateWithoutSalesInput = {
  name: string
  description?: string | null
  type?: string | null
  created_at?: Date | string | null
  brands?: Prisma.brandsCreateNestedOneWithoutChannelsInput
}

export type channelsUncheckedCreateWithoutSalesInput = {
  id?: number
  brand_id?: number | null
  name: string
  description?: string | null
  type?: string | null
  created_at?: Date | string | null
}

export type channelsCreateOrConnectWithoutSalesInput = {
  where: Prisma.channelsWhereUniqueInput
  create: Prisma.XOR<Prisma.channelsCreateWithoutSalesInput, Prisma.channelsUncheckedCreateWithoutSalesInput>
}

export type channelsUpsertWithoutSalesInput = {
  update: Prisma.XOR<Prisma.channelsUpdateWithoutSalesInput, Prisma.channelsUncheckedUpdateWithoutSalesInput>
  create: Prisma.XOR<Prisma.channelsCreateWithoutSalesInput, Prisma.channelsUncheckedCreateWithoutSalesInput>
  where?: Prisma.channelsWhereInput
}

export type channelsUpdateToOneWithWhereWithoutSalesInput = {
  where?: Prisma.channelsWhereInput
  data: Prisma.XOR<Prisma.channelsUpdateWithoutSalesInput, Prisma.channelsUncheckedUpdateWithoutSalesInput>
}

export type channelsUpdateWithoutSalesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  brands?: Prisma.brandsUpdateOneWithoutChannelsNestedInput
}

export type channelsUncheckedUpdateWithoutSalesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type channelsCreateManyBrandsInput = {
  id?: number
  name: string
  description?: string | null
  type?: string | null
  created_at?: Date | string | null
}

export type channelsUpdateWithoutBrandsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.salesUpdateManyWithoutChannelsNestedInput
}

export type channelsUncheckedUpdateWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.salesUncheckedUpdateManyWithoutChannelsNestedInput
}

export type channelsUncheckedUpdateManyWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type ChannelsCountOutputType
 */

export type ChannelsCountOutputType = {
  sales: number
}

export type ChannelsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sales?: boolean | ChannelsCountOutputTypeCountSalesArgs
}

/**
 * ChannelsCountOutputType without action
 */
export type ChannelsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChannelsCountOutputType
   */
  select?: Prisma.ChannelsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChannelsCountOutputType without action
 */
export type ChannelsCountOutputTypeCountSalesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.salesWhereInput
}


export type channelsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  name?: boolean
  description?: boolean
  type?: boolean
  created_at?: boolean
  brands?: boolean | Prisma.channels$brandsArgs<ExtArgs>
  sales?: boolean | Prisma.channels$salesArgs<ExtArgs>
  _count?: boolean | Prisma.ChannelsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["channels"]>

export type channelsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  name?: boolean
  description?: boolean
  type?: boolean
  created_at?: boolean
  brands?: boolean | Prisma.channels$brandsArgs<ExtArgs>
}, ExtArgs["result"]["channels"]>

export type channelsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  name?: boolean
  description?: boolean
  type?: boolean
  created_at?: boolean
  brands?: boolean | Prisma.channels$brandsArgs<ExtArgs>
}, ExtArgs["result"]["channels"]>

export type channelsSelectScalar = {
  id?: boolean
  brand_id?: boolean
  name?: boolean
  description?: boolean
  type?: boolean
  created_at?: boolean
}

export type channelsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "brand_id" | "name" | "description" | "type" | "created_at", ExtArgs["result"]["channels"]>
export type channelsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.channels$brandsArgs<ExtArgs>
  sales?: boolean | Prisma.channels$salesArgs<ExtArgs>
  _count?: boolean | Prisma.ChannelsCountOutputTypeDefaultArgs<ExtArgs>
}
export type channelsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.channels$brandsArgs<ExtArgs>
}
export type channelsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.channels$brandsArgs<ExtArgs>
}

export type $channelsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "channels"
  objects: {
    brands: Prisma.$brandsPayload<ExtArgs> | null
    sales: Prisma.$salesPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    brand_id: number | null
    name: string
    description: string | null
    type: string | null
    created_at: Date | null
  }, ExtArgs["result"]["channels"]>
  composites: {}
}

export type channelsGetPayload<S extends boolean | null | undefined | channelsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$channelsPayload, S>

export type channelsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<channelsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChannelsCountAggregateInputType | true
  }

export interface channelsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['channels'], meta: { name: 'channels' } }
  /**
   * Find zero or one Channels that matches the filter.
   * @param {channelsFindUniqueArgs} args - Arguments to find a Channels
   * @example
   * // Get one Channels
   * const channels = await prisma.channels.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends channelsFindUniqueArgs>(args: Prisma.SelectSubset<T, channelsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__channelsClient<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Channels that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {channelsFindUniqueOrThrowArgs} args - Arguments to find a Channels
   * @example
   * // Get one Channels
   * const channels = await prisma.channels.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends channelsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, channelsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__channelsClient<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Channels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {channelsFindFirstArgs} args - Arguments to find a Channels
   * @example
   * // Get one Channels
   * const channels = await prisma.channels.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends channelsFindFirstArgs>(args?: Prisma.SelectSubset<T, channelsFindFirstArgs<ExtArgs>>): Prisma.Prisma__channelsClient<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Channels that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {channelsFindFirstOrThrowArgs} args - Arguments to find a Channels
   * @example
   * // Get one Channels
   * const channels = await prisma.channels.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends channelsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, channelsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__channelsClient<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Channels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {channelsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Channels
   * const channels = await prisma.channels.findMany()
   * 
   * // Get first 10 Channels
   * const channels = await prisma.channels.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const channelsWithIdOnly = await prisma.channels.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends channelsFindManyArgs>(args?: Prisma.SelectSubset<T, channelsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Channels.
   * @param {channelsCreateArgs} args - Arguments to create a Channels.
   * @example
   * // Create one Channels
   * const Channels = await prisma.channels.create({
   *   data: {
   *     // ... data to create a Channels
   *   }
   * })
   * 
   */
  create<T extends channelsCreateArgs>(args: Prisma.SelectSubset<T, channelsCreateArgs<ExtArgs>>): Prisma.Prisma__channelsClient<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Channels.
   * @param {channelsCreateManyArgs} args - Arguments to create many Channels.
   * @example
   * // Create many Channels
   * const channels = await prisma.channels.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends channelsCreateManyArgs>(args?: Prisma.SelectSubset<T, channelsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Channels and returns the data saved in the database.
   * @param {channelsCreateManyAndReturnArgs} args - Arguments to create many Channels.
   * @example
   * // Create many Channels
   * const channels = await prisma.channels.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Channels and only return the `id`
   * const channelsWithIdOnly = await prisma.channels.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends channelsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, channelsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Channels.
   * @param {channelsDeleteArgs} args - Arguments to delete one Channels.
   * @example
   * // Delete one Channels
   * const Channels = await prisma.channels.delete({
   *   where: {
   *     // ... filter to delete one Channels
   *   }
   * })
   * 
   */
  delete<T extends channelsDeleteArgs>(args: Prisma.SelectSubset<T, channelsDeleteArgs<ExtArgs>>): Prisma.Prisma__channelsClient<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Channels.
   * @param {channelsUpdateArgs} args - Arguments to update one Channels.
   * @example
   * // Update one Channels
   * const channels = await prisma.channels.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends channelsUpdateArgs>(args: Prisma.SelectSubset<T, channelsUpdateArgs<ExtArgs>>): Prisma.Prisma__channelsClient<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Channels.
   * @param {channelsDeleteManyArgs} args - Arguments to filter Channels to delete.
   * @example
   * // Delete a few Channels
   * const { count } = await prisma.channels.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends channelsDeleteManyArgs>(args?: Prisma.SelectSubset<T, channelsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Channels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {channelsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Channels
   * const channels = await prisma.channels.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends channelsUpdateManyArgs>(args: Prisma.SelectSubset<T, channelsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Channels and returns the data updated in the database.
   * @param {channelsUpdateManyAndReturnArgs} args - Arguments to update many Channels.
   * @example
   * // Update many Channels
   * const channels = await prisma.channels.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Channels and only return the `id`
   * const channelsWithIdOnly = await prisma.channels.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends channelsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, channelsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Channels.
   * @param {channelsUpsertArgs} args - Arguments to update or create a Channels.
   * @example
   * // Update or create a Channels
   * const channels = await prisma.channels.upsert({
   *   create: {
   *     // ... data to create a Channels
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Channels we want to update
   *   }
   * })
   */
  upsert<T extends channelsUpsertArgs>(args: Prisma.SelectSubset<T, channelsUpsertArgs<ExtArgs>>): Prisma.Prisma__channelsClient<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Channels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {channelsCountArgs} args - Arguments to filter Channels to count.
   * @example
   * // Count the number of Channels
   * const count = await prisma.channels.count({
   *   where: {
   *     // ... the filter for the Channels we want to count
   *   }
   * })
  **/
  count<T extends channelsCountArgs>(
    args?: Prisma.Subset<T, channelsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChannelsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Channels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChannelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChannelsAggregateArgs>(args: Prisma.Subset<T, ChannelsAggregateArgs>): Prisma.PrismaPromise<GetChannelsAggregateType<T>>

  /**
   * Group by Channels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {channelsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends channelsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: channelsGroupByArgs['orderBy'] }
      : { orderBy?: channelsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, channelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the channels model
 */
readonly fields: channelsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for channels.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__channelsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  brands<T extends Prisma.channels$brandsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.channels$brandsArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  sales<T extends Prisma.channels$salesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.channels$salesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$salesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the channels model
 */
export interface channelsFieldRefs {
  readonly id: Prisma.FieldRef<"channels", 'Int'>
  readonly brand_id: Prisma.FieldRef<"channels", 'Int'>
  readonly name: Prisma.FieldRef<"channels", 'String'>
  readonly description: Prisma.FieldRef<"channels", 'String'>
  readonly type: Prisma.FieldRef<"channels", 'String'>
  readonly created_at: Prisma.FieldRef<"channels", 'DateTime'>
}
    

// Custom InputTypes
/**
 * channels findUnique
 */
export type channelsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
  /**
   * Filter, which channels to fetch.
   */
  where: Prisma.channelsWhereUniqueInput
}

/**
 * channels findUniqueOrThrow
 */
export type channelsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
  /**
   * Filter, which channels to fetch.
   */
  where: Prisma.channelsWhereUniqueInput
}

/**
 * channels findFirst
 */
export type channelsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
  /**
   * Filter, which channels to fetch.
   */
  where?: Prisma.channelsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of channels to fetch.
   */
  orderBy?: Prisma.channelsOrderByWithRelationInput | Prisma.channelsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for channels.
   */
  cursor?: Prisma.channelsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` channels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` channels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of channels.
   */
  distinct?: Prisma.ChannelsScalarFieldEnum | Prisma.ChannelsScalarFieldEnum[]
}

/**
 * channels findFirstOrThrow
 */
export type channelsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
  /**
   * Filter, which channels to fetch.
   */
  where?: Prisma.channelsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of channels to fetch.
   */
  orderBy?: Prisma.channelsOrderByWithRelationInput | Prisma.channelsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for channels.
   */
  cursor?: Prisma.channelsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` channels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` channels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of channels.
   */
  distinct?: Prisma.ChannelsScalarFieldEnum | Prisma.ChannelsScalarFieldEnum[]
}

/**
 * channels findMany
 */
export type channelsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
  /**
   * Filter, which channels to fetch.
   */
  where?: Prisma.channelsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of channels to fetch.
   */
  orderBy?: Prisma.channelsOrderByWithRelationInput | Prisma.channelsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing channels.
   */
  cursor?: Prisma.channelsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` channels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` channels.
   */
  skip?: number
  distinct?: Prisma.ChannelsScalarFieldEnum | Prisma.ChannelsScalarFieldEnum[]
}

/**
 * channels create
 */
export type channelsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
  /**
   * The data needed to create a channels.
   */
  data: Prisma.XOR<Prisma.channelsCreateInput, Prisma.channelsUncheckedCreateInput>
}

/**
 * channels createMany
 */
export type channelsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many channels.
   */
  data: Prisma.channelsCreateManyInput | Prisma.channelsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * channels createManyAndReturn
 */
export type channelsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * The data used to create many channels.
   */
  data: Prisma.channelsCreateManyInput | Prisma.channelsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * channels update
 */
export type channelsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
  /**
   * The data needed to update a channels.
   */
  data: Prisma.XOR<Prisma.channelsUpdateInput, Prisma.channelsUncheckedUpdateInput>
  /**
   * Choose, which channels to update.
   */
  where: Prisma.channelsWhereUniqueInput
}

/**
 * channels updateMany
 */
export type channelsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update channels.
   */
  data: Prisma.XOR<Prisma.channelsUpdateManyMutationInput, Prisma.channelsUncheckedUpdateManyInput>
  /**
   * Filter which channels to update
   */
  where?: Prisma.channelsWhereInput
  /**
   * Limit how many channels to update.
   */
  limit?: number
}

/**
 * channels updateManyAndReturn
 */
export type channelsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * The data used to update channels.
   */
  data: Prisma.XOR<Prisma.channelsUpdateManyMutationInput, Prisma.channelsUncheckedUpdateManyInput>
  /**
   * Filter which channels to update
   */
  where?: Prisma.channelsWhereInput
  /**
   * Limit how many channels to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * channels upsert
 */
export type channelsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
  /**
   * The filter to search for the channels to update in case it exists.
   */
  where: Prisma.channelsWhereUniqueInput
  /**
   * In case the channels found by the `where` argument doesn't exist, create a new channels with this data.
   */
  create: Prisma.XOR<Prisma.channelsCreateInput, Prisma.channelsUncheckedCreateInput>
  /**
   * In case the channels was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.channelsUpdateInput, Prisma.channelsUncheckedUpdateInput>
}

/**
 * channels delete
 */
export type channelsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
  /**
   * Filter which channels to delete.
   */
  where: Prisma.channelsWhereUniqueInput
}

/**
 * channels deleteMany
 */
export type channelsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which channels to delete
   */
  where?: Prisma.channelsWhereInput
  /**
   * Limit how many channels to delete.
   */
  limit?: number
}

/**
 * channels.brands
 */
export type channels$brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  where?: Prisma.brandsWhereInput
}

/**
 * channels.sales
 */
export type channels$salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sales
   */
  select?: Prisma.salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sales
   */
  omit?: Prisma.salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salesInclude<ExtArgs> | null
  where?: Prisma.salesWhereInput
  orderBy?: Prisma.salesOrderByWithRelationInput | Prisma.salesOrderByWithRelationInput[]
  cursor?: Prisma.salesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SalesScalarFieldEnum | Prisma.SalesScalarFieldEnum[]
}

/**
 * channels without action
 */
export type channelsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
}
