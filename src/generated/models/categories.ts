
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `categories` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model categories
 * 
 */
export type categoriesModel = runtime.Types.Result.DefaultSelection<Prisma.$categoriesPayload>

export type AggregateCategories = {
  _count: CategoriesCountAggregateOutputType | null
  _avg: CategoriesAvgAggregateOutputType | null
  _sum: CategoriesSumAggregateOutputType | null
  _min: CategoriesMinAggregateOutputType | null
  _max: CategoriesMaxAggregateOutputType | null
}

export type CategoriesAvgAggregateOutputType = {
  id: number | null
  brand_id: number | null
  sub_brand_id: number | null
}

export type CategoriesSumAggregateOutputType = {
  id: number | null
  brand_id: number | null
  sub_brand_id: number | null
}

export type CategoriesMinAggregateOutputType = {
  id: number | null
  brand_id: number | null
  sub_brand_id: number | null
  name: string | null
  type: string | null
  pos_uuid: string | null
  deleted_at: Date | null
}

export type CategoriesMaxAggregateOutputType = {
  id: number | null
  brand_id: number | null
  sub_brand_id: number | null
  name: string | null
  type: string | null
  pos_uuid: string | null
  deleted_at: Date | null
}

export type CategoriesCountAggregateOutputType = {
  id: number
  brand_id: number
  sub_brand_id: number
  name: number
  type: number
  pos_uuid: number
  deleted_at: number
  _all: number
}


export type CategoriesAvgAggregateInputType = {
  id?: true
  brand_id?: true
  sub_brand_id?: true
}

export type CategoriesSumAggregateInputType = {
  id?: true
  brand_id?: true
  sub_brand_id?: true
}

export type CategoriesMinAggregateInputType = {
  id?: true
  brand_id?: true
  sub_brand_id?: true
  name?: true
  type?: true
  pos_uuid?: true
  deleted_at?: true
}

export type CategoriesMaxAggregateInputType = {
  id?: true
  brand_id?: true
  sub_brand_id?: true
  name?: true
  type?: true
  pos_uuid?: true
  deleted_at?: true
}

export type CategoriesCountAggregateInputType = {
  id?: true
  brand_id?: true
  sub_brand_id?: true
  name?: true
  type?: true
  pos_uuid?: true
  deleted_at?: true
  _all?: true
}

export type CategoriesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which categories to aggregate.
   */
  where?: Prisma.categoriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of categories to fetch.
   */
  orderBy?: Prisma.categoriesOrderByWithRelationInput | Prisma.categoriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.categoriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` categories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` categories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned categories
  **/
  _count?: true | CategoriesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CategoriesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CategoriesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CategoriesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CategoriesMaxAggregateInputType
}

export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
      [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCategories[P]>
    : Prisma.GetScalarType<T[P], AggregateCategories[P]>
}




export type categoriesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.categoriesWhereInput
  orderBy?: Prisma.categoriesOrderByWithAggregationInput | Prisma.categoriesOrderByWithAggregationInput[]
  by: Prisma.CategoriesScalarFieldEnum[] | Prisma.CategoriesScalarFieldEnum
  having?: Prisma.categoriesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CategoriesCountAggregateInputType | true
  _avg?: CategoriesAvgAggregateInputType
  _sum?: CategoriesSumAggregateInputType
  _min?: CategoriesMinAggregateInputType
  _max?: CategoriesMaxAggregateInputType
}

export type CategoriesGroupByOutputType = {
  id: number
  brand_id: number | null
  sub_brand_id: number | null
  name: string
  type: string | null
  pos_uuid: string | null
  deleted_at: Date | null
  _count: CategoriesCountAggregateOutputType | null
  _avg: CategoriesAvgAggregateOutputType | null
  _sum: CategoriesSumAggregateOutputType | null
  _min: CategoriesMinAggregateOutputType | null
  _max: CategoriesMaxAggregateOutputType | null
}

type GetCategoriesGroupByPayload<T extends categoriesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CategoriesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CategoriesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CategoriesGroupByOutputType[P]>
      }
    >
  >



export type categoriesWhereInput = {
  AND?: Prisma.categoriesWhereInput | Prisma.categoriesWhereInput[]
  OR?: Prisma.categoriesWhereInput[]
  NOT?: Prisma.categoriesWhereInput | Prisma.categoriesWhereInput[]
  id?: Prisma.IntFilter<"categories"> | number
  brand_id?: Prisma.IntNullableFilter<"categories"> | number | null
  sub_brand_id?: Prisma.IntNullableFilter<"categories"> | number | null
  name?: Prisma.StringFilter<"categories"> | string
  type?: Prisma.StringNullableFilter<"categories"> | string | null
  pos_uuid?: Prisma.StringNullableFilter<"categories"> | string | null
  deleted_at?: Prisma.DateTimeNullableFilter<"categories"> | Date | string | null
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
  sub_brands?: Prisma.XOR<Prisma.Sub_brandsNullableScalarRelationFilter, Prisma.sub_brandsWhereInput> | null
  items?: Prisma.ItemsListRelationFilter
  option_groups?: Prisma.Option_groupsListRelationFilter
  products?: Prisma.ProductsListRelationFilter
}

export type categoriesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrderInput | Prisma.SortOrder
  pos_uuid?: Prisma.SortOrderInput | Prisma.SortOrder
  deleted_at?: Prisma.SortOrderInput | Prisma.SortOrder
  brands?: Prisma.brandsOrderByWithRelationInput
  sub_brands?: Prisma.sub_brandsOrderByWithRelationInput
  items?: Prisma.itemsOrderByRelationAggregateInput
  option_groups?: Prisma.option_groupsOrderByRelationAggregateInput
  products?: Prisma.productsOrderByRelationAggregateInput
}

export type categoriesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.categoriesWhereInput | Prisma.categoriesWhereInput[]
  OR?: Prisma.categoriesWhereInput[]
  NOT?: Prisma.categoriesWhereInput | Prisma.categoriesWhereInput[]
  brand_id?: Prisma.IntNullableFilter<"categories"> | number | null
  sub_brand_id?: Prisma.IntNullableFilter<"categories"> | number | null
  name?: Prisma.StringFilter<"categories"> | string
  type?: Prisma.StringNullableFilter<"categories"> | string | null
  pos_uuid?: Prisma.StringNullableFilter<"categories"> | string | null
  deleted_at?: Prisma.DateTimeNullableFilter<"categories"> | Date | string | null
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
  sub_brands?: Prisma.XOR<Prisma.Sub_brandsNullableScalarRelationFilter, Prisma.sub_brandsWhereInput> | null
  items?: Prisma.ItemsListRelationFilter
  option_groups?: Prisma.Option_groupsListRelationFilter
  products?: Prisma.ProductsListRelationFilter
}, "id">

export type categoriesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrderInput | Prisma.SortOrder
  pos_uuid?: Prisma.SortOrderInput | Prisma.SortOrder
  deleted_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.categoriesCountOrderByAggregateInput
  _avg?: Prisma.categoriesAvgOrderByAggregateInput
  _max?: Prisma.categoriesMaxOrderByAggregateInput
  _min?: Prisma.categoriesMinOrderByAggregateInput
  _sum?: Prisma.categoriesSumOrderByAggregateInput
}

export type categoriesScalarWhereWithAggregatesInput = {
  AND?: Prisma.categoriesScalarWhereWithAggregatesInput | Prisma.categoriesScalarWhereWithAggregatesInput[]
  OR?: Prisma.categoriesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.categoriesScalarWhereWithAggregatesInput | Prisma.categoriesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"categories"> | number
  brand_id?: Prisma.IntNullableWithAggregatesFilter<"categories"> | number | null
  sub_brand_id?: Prisma.IntNullableWithAggregatesFilter<"categories"> | number | null
  name?: Prisma.StringWithAggregatesFilter<"categories"> | string
  type?: Prisma.StringNullableWithAggregatesFilter<"categories"> | string | null
  pos_uuid?: Prisma.StringNullableWithAggregatesFilter<"categories"> | string | null
  deleted_at?: Prisma.DateTimeNullableWithAggregatesFilter<"categories"> | Date | string | null
}

export type categoriesCreateInput = {
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  brands?: Prisma.brandsCreateNestedOneWithoutCategoriesInput
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutCategoriesInput
  items?: Prisma.itemsCreateNestedManyWithoutCategoriesInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutCategoriesInput
  products?: Prisma.productsCreateNestedManyWithoutCategoriesInput
}

export type categoriesUncheckedCreateInput = {
  id?: number
  brand_id?: number | null
  sub_brand_id?: number | null
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutCategoriesInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutCategoriesInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutCategoriesInput
}

export type categoriesUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  brands?: Prisma.brandsUpdateOneWithoutCategoriesNestedInput
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutCategoriesNestedInput
  items?: Prisma.itemsUpdateManyWithoutCategoriesNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutCategoriesNestedInput
  products?: Prisma.productsUpdateManyWithoutCategoriesNestedInput
}

export type categoriesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  items?: Prisma.itemsUncheckedUpdateManyWithoutCategoriesNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutCategoriesNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutCategoriesNestedInput
}

export type categoriesCreateManyInput = {
  id?: number
  brand_id?: number | null
  sub_brand_id?: number | null
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
}

export type categoriesUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type categoriesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type CategoriesListRelationFilter = {
  every?: Prisma.categoriesWhereInput
  some?: Prisma.categoriesWhereInput
  none?: Prisma.categoriesWhereInput
}

export type categoriesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type categoriesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  pos_uuid?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type categoriesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
}

export type categoriesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  pos_uuid?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type categoriesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  pos_uuid?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type categoriesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
}

export type CategoriesNullableScalarRelationFilter = {
  is?: Prisma.categoriesWhereInput | null
  isNot?: Prisma.categoriesWhereInput | null
}

export type categoriesCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutBrandsInput, Prisma.categoriesUncheckedCreateWithoutBrandsInput> | Prisma.categoriesCreateWithoutBrandsInput[] | Prisma.categoriesUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutBrandsInput | Prisma.categoriesCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.categoriesCreateManyBrandsInputEnvelope
  connect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
}

export type categoriesUncheckedCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutBrandsInput, Prisma.categoriesUncheckedCreateWithoutBrandsInput> | Prisma.categoriesCreateWithoutBrandsInput[] | Prisma.categoriesUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutBrandsInput | Prisma.categoriesCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.categoriesCreateManyBrandsInputEnvelope
  connect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
}

export type categoriesUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutBrandsInput, Prisma.categoriesUncheckedCreateWithoutBrandsInput> | Prisma.categoriesCreateWithoutBrandsInput[] | Prisma.categoriesUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutBrandsInput | Prisma.categoriesCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.categoriesUpsertWithWhereUniqueWithoutBrandsInput | Prisma.categoriesUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.categoriesCreateManyBrandsInputEnvelope
  set?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  disconnect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  delete?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  connect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  update?: Prisma.categoriesUpdateWithWhereUniqueWithoutBrandsInput | Prisma.categoriesUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.categoriesUpdateManyWithWhereWithoutBrandsInput | Prisma.categoriesUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.categoriesScalarWhereInput | Prisma.categoriesScalarWhereInput[]
}

export type categoriesUncheckedUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutBrandsInput, Prisma.categoriesUncheckedCreateWithoutBrandsInput> | Prisma.categoriesCreateWithoutBrandsInput[] | Prisma.categoriesUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutBrandsInput | Prisma.categoriesCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.categoriesUpsertWithWhereUniqueWithoutBrandsInput | Prisma.categoriesUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.categoriesCreateManyBrandsInputEnvelope
  set?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  disconnect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  delete?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  connect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  update?: Prisma.categoriesUpdateWithWhereUniqueWithoutBrandsInput | Prisma.categoriesUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.categoriesUpdateManyWithWhereWithoutBrandsInput | Prisma.categoriesUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.categoriesScalarWhereInput | Prisma.categoriesScalarWhereInput[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type categoriesCreateNestedOneWithoutItemsInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutItemsInput, Prisma.categoriesUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutItemsInput
  connect?: Prisma.categoriesWhereUniqueInput
}

export type categoriesUpdateOneWithoutItemsNestedInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutItemsInput, Prisma.categoriesUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutItemsInput
  upsert?: Prisma.categoriesUpsertWithoutItemsInput
  disconnect?: Prisma.categoriesWhereInput | boolean
  delete?: Prisma.categoriesWhereInput | boolean
  connect?: Prisma.categoriesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.categoriesUpdateToOneWithWhereWithoutItemsInput, Prisma.categoriesUpdateWithoutItemsInput>, Prisma.categoriesUncheckedUpdateWithoutItemsInput>
}

export type categoriesCreateNestedOneWithoutOption_groupsInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutOption_groupsInput, Prisma.categoriesUncheckedCreateWithoutOption_groupsInput>
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutOption_groupsInput
  connect?: Prisma.categoriesWhereUniqueInput
}

export type categoriesUpdateOneWithoutOption_groupsNestedInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutOption_groupsInput, Prisma.categoriesUncheckedCreateWithoutOption_groupsInput>
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutOption_groupsInput
  upsert?: Prisma.categoriesUpsertWithoutOption_groupsInput
  disconnect?: Prisma.categoriesWhereInput | boolean
  delete?: Prisma.categoriesWhereInput | boolean
  connect?: Prisma.categoriesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.categoriesUpdateToOneWithWhereWithoutOption_groupsInput, Prisma.categoriesUpdateWithoutOption_groupsInput>, Prisma.categoriesUncheckedUpdateWithoutOption_groupsInput>
}

export type categoriesCreateNestedOneWithoutProductsInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutProductsInput, Prisma.categoriesUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutProductsInput
  connect?: Prisma.categoriesWhereUniqueInput
}

export type categoriesUpdateOneWithoutProductsNestedInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutProductsInput, Prisma.categoriesUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutProductsInput
  upsert?: Prisma.categoriesUpsertWithoutProductsInput
  disconnect?: Prisma.categoriesWhereInput | boolean
  delete?: Prisma.categoriesWhereInput | boolean
  connect?: Prisma.categoriesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.categoriesUpdateToOneWithWhereWithoutProductsInput, Prisma.categoriesUpdateWithoutProductsInput>, Prisma.categoriesUncheckedUpdateWithoutProductsInput>
}

export type categoriesCreateNestedManyWithoutSub_brandsInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutSub_brandsInput, Prisma.categoriesUncheckedCreateWithoutSub_brandsInput> | Prisma.categoriesCreateWithoutSub_brandsInput[] | Prisma.categoriesUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutSub_brandsInput | Prisma.categoriesCreateOrConnectWithoutSub_brandsInput[]
  createMany?: Prisma.categoriesCreateManySub_brandsInputEnvelope
  connect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
}

export type categoriesUncheckedCreateNestedManyWithoutSub_brandsInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutSub_brandsInput, Prisma.categoriesUncheckedCreateWithoutSub_brandsInput> | Prisma.categoriesCreateWithoutSub_brandsInput[] | Prisma.categoriesUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutSub_brandsInput | Prisma.categoriesCreateOrConnectWithoutSub_brandsInput[]
  createMany?: Prisma.categoriesCreateManySub_brandsInputEnvelope
  connect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
}

export type categoriesUpdateManyWithoutSub_brandsNestedInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutSub_brandsInput, Prisma.categoriesUncheckedCreateWithoutSub_brandsInput> | Prisma.categoriesCreateWithoutSub_brandsInput[] | Prisma.categoriesUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutSub_brandsInput | Prisma.categoriesCreateOrConnectWithoutSub_brandsInput[]
  upsert?: Prisma.categoriesUpsertWithWhereUniqueWithoutSub_brandsInput | Prisma.categoriesUpsertWithWhereUniqueWithoutSub_brandsInput[]
  createMany?: Prisma.categoriesCreateManySub_brandsInputEnvelope
  set?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  disconnect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  delete?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  connect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  update?: Prisma.categoriesUpdateWithWhereUniqueWithoutSub_brandsInput | Prisma.categoriesUpdateWithWhereUniqueWithoutSub_brandsInput[]
  updateMany?: Prisma.categoriesUpdateManyWithWhereWithoutSub_brandsInput | Prisma.categoriesUpdateManyWithWhereWithoutSub_brandsInput[]
  deleteMany?: Prisma.categoriesScalarWhereInput | Prisma.categoriesScalarWhereInput[]
}

export type categoriesUncheckedUpdateManyWithoutSub_brandsNestedInput = {
  create?: Prisma.XOR<Prisma.categoriesCreateWithoutSub_brandsInput, Prisma.categoriesUncheckedCreateWithoutSub_brandsInput> | Prisma.categoriesCreateWithoutSub_brandsInput[] | Prisma.categoriesUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.categoriesCreateOrConnectWithoutSub_brandsInput | Prisma.categoriesCreateOrConnectWithoutSub_brandsInput[]
  upsert?: Prisma.categoriesUpsertWithWhereUniqueWithoutSub_brandsInput | Prisma.categoriesUpsertWithWhereUniqueWithoutSub_brandsInput[]
  createMany?: Prisma.categoriesCreateManySub_brandsInputEnvelope
  set?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  disconnect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  delete?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  connect?: Prisma.categoriesWhereUniqueInput | Prisma.categoriesWhereUniqueInput[]
  update?: Prisma.categoriesUpdateWithWhereUniqueWithoutSub_brandsInput | Prisma.categoriesUpdateWithWhereUniqueWithoutSub_brandsInput[]
  updateMany?: Prisma.categoriesUpdateManyWithWhereWithoutSub_brandsInput | Prisma.categoriesUpdateManyWithWhereWithoutSub_brandsInput[]
  deleteMany?: Prisma.categoriesScalarWhereInput | Prisma.categoriesScalarWhereInput[]
}

export type categoriesCreateWithoutBrandsInput = {
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutCategoriesInput
  items?: Prisma.itemsCreateNestedManyWithoutCategoriesInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutCategoriesInput
  products?: Prisma.productsCreateNestedManyWithoutCategoriesInput
}

export type categoriesUncheckedCreateWithoutBrandsInput = {
  id?: number
  sub_brand_id?: number | null
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutCategoriesInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutCategoriesInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutCategoriesInput
}

export type categoriesCreateOrConnectWithoutBrandsInput = {
  where: Prisma.categoriesWhereUniqueInput
  create: Prisma.XOR<Prisma.categoriesCreateWithoutBrandsInput, Prisma.categoriesUncheckedCreateWithoutBrandsInput>
}

export type categoriesCreateManyBrandsInputEnvelope = {
  data: Prisma.categoriesCreateManyBrandsInput | Prisma.categoriesCreateManyBrandsInput[]
  skipDuplicates?: boolean
}

export type categoriesUpsertWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.categoriesWhereUniqueInput
  update: Prisma.XOR<Prisma.categoriesUpdateWithoutBrandsInput, Prisma.categoriesUncheckedUpdateWithoutBrandsInput>
  create: Prisma.XOR<Prisma.categoriesCreateWithoutBrandsInput, Prisma.categoriesUncheckedCreateWithoutBrandsInput>
}

export type categoriesUpdateWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.categoriesWhereUniqueInput
  data: Prisma.XOR<Prisma.categoriesUpdateWithoutBrandsInput, Prisma.categoriesUncheckedUpdateWithoutBrandsInput>
}

export type categoriesUpdateManyWithWhereWithoutBrandsInput = {
  where: Prisma.categoriesScalarWhereInput
  data: Prisma.XOR<Prisma.categoriesUpdateManyMutationInput, Prisma.categoriesUncheckedUpdateManyWithoutBrandsInput>
}

export type categoriesScalarWhereInput = {
  AND?: Prisma.categoriesScalarWhereInput | Prisma.categoriesScalarWhereInput[]
  OR?: Prisma.categoriesScalarWhereInput[]
  NOT?: Prisma.categoriesScalarWhereInput | Prisma.categoriesScalarWhereInput[]
  id?: Prisma.IntFilter<"categories"> | number
  brand_id?: Prisma.IntNullableFilter<"categories"> | number | null
  sub_brand_id?: Prisma.IntNullableFilter<"categories"> | number | null
  name?: Prisma.StringFilter<"categories"> | string
  type?: Prisma.StringNullableFilter<"categories"> | string | null
  pos_uuid?: Prisma.StringNullableFilter<"categories"> | string | null
  deleted_at?: Prisma.DateTimeNullableFilter<"categories"> | Date | string | null
}

export type categoriesCreateWithoutItemsInput = {
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  brands?: Prisma.brandsCreateNestedOneWithoutCategoriesInput
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutCategoriesInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutCategoriesInput
  products?: Prisma.productsCreateNestedManyWithoutCategoriesInput
}

export type categoriesUncheckedCreateWithoutItemsInput = {
  id?: number
  brand_id?: number | null
  sub_brand_id?: number | null
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutCategoriesInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutCategoriesInput
}

export type categoriesCreateOrConnectWithoutItemsInput = {
  where: Prisma.categoriesWhereUniqueInput
  create: Prisma.XOR<Prisma.categoriesCreateWithoutItemsInput, Prisma.categoriesUncheckedCreateWithoutItemsInput>
}

export type categoriesUpsertWithoutItemsInput = {
  update: Prisma.XOR<Prisma.categoriesUpdateWithoutItemsInput, Prisma.categoriesUncheckedUpdateWithoutItemsInput>
  create: Prisma.XOR<Prisma.categoriesCreateWithoutItemsInput, Prisma.categoriesUncheckedCreateWithoutItemsInput>
  where?: Prisma.categoriesWhereInput
}

export type categoriesUpdateToOneWithWhereWithoutItemsInput = {
  where?: Prisma.categoriesWhereInput
  data: Prisma.XOR<Prisma.categoriesUpdateWithoutItemsInput, Prisma.categoriesUncheckedUpdateWithoutItemsInput>
}

export type categoriesUpdateWithoutItemsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  brands?: Prisma.brandsUpdateOneWithoutCategoriesNestedInput
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutCategoriesNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutCategoriesNestedInput
  products?: Prisma.productsUpdateManyWithoutCategoriesNestedInput
}

export type categoriesUncheckedUpdateWithoutItemsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutCategoriesNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutCategoriesNestedInput
}

export type categoriesCreateWithoutOption_groupsInput = {
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  brands?: Prisma.brandsCreateNestedOneWithoutCategoriesInput
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutCategoriesInput
  items?: Prisma.itemsCreateNestedManyWithoutCategoriesInput
  products?: Prisma.productsCreateNestedManyWithoutCategoriesInput
}

export type categoriesUncheckedCreateWithoutOption_groupsInput = {
  id?: number
  brand_id?: number | null
  sub_brand_id?: number | null
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutCategoriesInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutCategoriesInput
}

export type categoriesCreateOrConnectWithoutOption_groupsInput = {
  where: Prisma.categoriesWhereUniqueInput
  create: Prisma.XOR<Prisma.categoriesCreateWithoutOption_groupsInput, Prisma.categoriesUncheckedCreateWithoutOption_groupsInput>
}

export type categoriesUpsertWithoutOption_groupsInput = {
  update: Prisma.XOR<Prisma.categoriesUpdateWithoutOption_groupsInput, Prisma.categoriesUncheckedUpdateWithoutOption_groupsInput>
  create: Prisma.XOR<Prisma.categoriesCreateWithoutOption_groupsInput, Prisma.categoriesUncheckedCreateWithoutOption_groupsInput>
  where?: Prisma.categoriesWhereInput
}

export type categoriesUpdateToOneWithWhereWithoutOption_groupsInput = {
  where?: Prisma.categoriesWhereInput
  data: Prisma.XOR<Prisma.categoriesUpdateWithoutOption_groupsInput, Prisma.categoriesUncheckedUpdateWithoutOption_groupsInput>
}

export type categoriesUpdateWithoutOption_groupsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  brands?: Prisma.brandsUpdateOneWithoutCategoriesNestedInput
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutCategoriesNestedInput
  items?: Prisma.itemsUpdateManyWithoutCategoriesNestedInput
  products?: Prisma.productsUpdateManyWithoutCategoriesNestedInput
}

export type categoriesUncheckedUpdateWithoutOption_groupsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  items?: Prisma.itemsUncheckedUpdateManyWithoutCategoriesNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutCategoriesNestedInput
}

export type categoriesCreateWithoutProductsInput = {
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  brands?: Prisma.brandsCreateNestedOneWithoutCategoriesInput
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutCategoriesInput
  items?: Prisma.itemsCreateNestedManyWithoutCategoriesInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutCategoriesInput
}

export type categoriesUncheckedCreateWithoutProductsInput = {
  id?: number
  brand_id?: number | null
  sub_brand_id?: number | null
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutCategoriesInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutCategoriesInput
}

export type categoriesCreateOrConnectWithoutProductsInput = {
  where: Prisma.categoriesWhereUniqueInput
  create: Prisma.XOR<Prisma.categoriesCreateWithoutProductsInput, Prisma.categoriesUncheckedCreateWithoutProductsInput>
}

export type categoriesUpsertWithoutProductsInput = {
  update: Prisma.XOR<Prisma.categoriesUpdateWithoutProductsInput, Prisma.categoriesUncheckedUpdateWithoutProductsInput>
  create: Prisma.XOR<Prisma.categoriesCreateWithoutProductsInput, Prisma.categoriesUncheckedCreateWithoutProductsInput>
  where?: Prisma.categoriesWhereInput
}

export type categoriesUpdateToOneWithWhereWithoutProductsInput = {
  where?: Prisma.categoriesWhereInput
  data: Prisma.XOR<Prisma.categoriesUpdateWithoutProductsInput, Prisma.categoriesUncheckedUpdateWithoutProductsInput>
}

export type categoriesUpdateWithoutProductsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  brands?: Prisma.brandsUpdateOneWithoutCategoriesNestedInput
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutCategoriesNestedInput
  items?: Prisma.itemsUpdateManyWithoutCategoriesNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutCategoriesNestedInput
}

export type categoriesUncheckedUpdateWithoutProductsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  items?: Prisma.itemsUncheckedUpdateManyWithoutCategoriesNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutCategoriesNestedInput
}

export type categoriesCreateWithoutSub_brandsInput = {
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  brands?: Prisma.brandsCreateNestedOneWithoutCategoriesInput
  items?: Prisma.itemsCreateNestedManyWithoutCategoriesInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutCategoriesInput
  products?: Prisma.productsCreateNestedManyWithoutCategoriesInput
}

export type categoriesUncheckedCreateWithoutSub_brandsInput = {
  id?: number
  brand_id?: number | null
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutCategoriesInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutCategoriesInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutCategoriesInput
}

export type categoriesCreateOrConnectWithoutSub_brandsInput = {
  where: Prisma.categoriesWhereUniqueInput
  create: Prisma.XOR<Prisma.categoriesCreateWithoutSub_brandsInput, Prisma.categoriesUncheckedCreateWithoutSub_brandsInput>
}

export type categoriesCreateManySub_brandsInputEnvelope = {
  data: Prisma.categoriesCreateManySub_brandsInput | Prisma.categoriesCreateManySub_brandsInput[]
  skipDuplicates?: boolean
}

export type categoriesUpsertWithWhereUniqueWithoutSub_brandsInput = {
  where: Prisma.categoriesWhereUniqueInput
  update: Prisma.XOR<Prisma.categoriesUpdateWithoutSub_brandsInput, Prisma.categoriesUncheckedUpdateWithoutSub_brandsInput>
  create: Prisma.XOR<Prisma.categoriesCreateWithoutSub_brandsInput, Prisma.categoriesUncheckedCreateWithoutSub_brandsInput>
}

export type categoriesUpdateWithWhereUniqueWithoutSub_brandsInput = {
  where: Prisma.categoriesWhereUniqueInput
  data: Prisma.XOR<Prisma.categoriesUpdateWithoutSub_brandsInput, Prisma.categoriesUncheckedUpdateWithoutSub_brandsInput>
}

export type categoriesUpdateManyWithWhereWithoutSub_brandsInput = {
  where: Prisma.categoriesScalarWhereInput
  data: Prisma.XOR<Prisma.categoriesUpdateManyMutationInput, Prisma.categoriesUncheckedUpdateManyWithoutSub_brandsInput>
}

export type categoriesCreateManyBrandsInput = {
  id?: number
  sub_brand_id?: number | null
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
}

export type categoriesUpdateWithoutBrandsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutCategoriesNestedInput
  items?: Prisma.itemsUpdateManyWithoutCategoriesNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutCategoriesNestedInput
  products?: Prisma.productsUpdateManyWithoutCategoriesNestedInput
}

export type categoriesUncheckedUpdateWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  items?: Prisma.itemsUncheckedUpdateManyWithoutCategoriesNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutCategoriesNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutCategoriesNestedInput
}

export type categoriesUncheckedUpdateManyWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type categoriesCreateManySub_brandsInput = {
  id?: number
  brand_id?: number | null
  name: string
  type?: string | null
  pos_uuid?: string | null
  deleted_at?: Date | string | null
}

export type categoriesUpdateWithoutSub_brandsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  brands?: Prisma.brandsUpdateOneWithoutCategoriesNestedInput
  items?: Prisma.itemsUpdateManyWithoutCategoriesNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutCategoriesNestedInput
  products?: Prisma.productsUpdateManyWithoutCategoriesNestedInput
}

export type categoriesUncheckedUpdateWithoutSub_brandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  items?: Prisma.itemsUncheckedUpdateManyWithoutCategoriesNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutCategoriesNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutCategoriesNestedInput
}

export type categoriesUncheckedUpdateManyWithoutSub_brandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type CategoriesCountOutputType
 */

export type CategoriesCountOutputType = {
  items: number
  option_groups: number
  products: number
}

export type CategoriesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | CategoriesCountOutputTypeCountItemsArgs
  option_groups?: boolean | CategoriesCountOutputTypeCountOption_groupsArgs
  products?: boolean | CategoriesCountOutputTypeCountProductsArgs
}

/**
 * CategoriesCountOutputType without action
 */
export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CategoriesCountOutputType
   */
  select?: Prisma.CategoriesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CategoriesCountOutputType without action
 */
export type CategoriesCountOutputTypeCountItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.itemsWhereInput
}

/**
 * CategoriesCountOutputType without action
 */
export type CategoriesCountOutputTypeCountOption_groupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.option_groupsWhereInput
}

/**
 * CategoriesCountOutputType without action
 */
export type CategoriesCountOutputTypeCountProductsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.productsWhereInput
}


export type categoriesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  sub_brand_id?: boolean
  name?: boolean
  type?: boolean
  pos_uuid?: boolean
  deleted_at?: boolean
  brands?: boolean | Prisma.categories$brandsArgs<ExtArgs>
  sub_brands?: boolean | Prisma.categories$sub_brandsArgs<ExtArgs>
  items?: boolean | Prisma.categories$itemsArgs<ExtArgs>
  option_groups?: boolean | Prisma.categories$option_groupsArgs<ExtArgs>
  products?: boolean | Prisma.categories$productsArgs<ExtArgs>
  _count?: boolean | Prisma.CategoriesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["categories"]>

export type categoriesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  sub_brand_id?: boolean
  name?: boolean
  type?: boolean
  pos_uuid?: boolean
  deleted_at?: boolean
  brands?: boolean | Prisma.categories$brandsArgs<ExtArgs>
  sub_brands?: boolean | Prisma.categories$sub_brandsArgs<ExtArgs>
}, ExtArgs["result"]["categories"]>

export type categoriesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  sub_brand_id?: boolean
  name?: boolean
  type?: boolean
  pos_uuid?: boolean
  deleted_at?: boolean
  brands?: boolean | Prisma.categories$brandsArgs<ExtArgs>
  sub_brands?: boolean | Prisma.categories$sub_brandsArgs<ExtArgs>
}, ExtArgs["result"]["categories"]>

export type categoriesSelectScalar = {
  id?: boolean
  brand_id?: boolean
  sub_brand_id?: boolean
  name?: boolean
  type?: boolean
  pos_uuid?: boolean
  deleted_at?: boolean
}

export type categoriesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "brand_id" | "sub_brand_id" | "name" | "type" | "pos_uuid" | "deleted_at", ExtArgs["result"]["categories"]>
export type categoriesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.categories$brandsArgs<ExtArgs>
  sub_brands?: boolean | Prisma.categories$sub_brandsArgs<ExtArgs>
  items?: boolean | Prisma.categories$itemsArgs<ExtArgs>
  option_groups?: boolean | Prisma.categories$option_groupsArgs<ExtArgs>
  products?: boolean | Prisma.categories$productsArgs<ExtArgs>
  _count?: boolean | Prisma.CategoriesCountOutputTypeDefaultArgs<ExtArgs>
}
export type categoriesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.categories$brandsArgs<ExtArgs>
  sub_brands?: boolean | Prisma.categories$sub_brandsArgs<ExtArgs>
}
export type categoriesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.categories$brandsArgs<ExtArgs>
  sub_brands?: boolean | Prisma.categories$sub_brandsArgs<ExtArgs>
}

export type $categoriesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "categories"
  objects: {
    brands: Prisma.$brandsPayload<ExtArgs> | null
    sub_brands: Prisma.$sub_brandsPayload<ExtArgs> | null
    items: Prisma.$itemsPayload<ExtArgs>[]
    option_groups: Prisma.$option_groupsPayload<ExtArgs>[]
    products: Prisma.$productsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    brand_id: number | null
    sub_brand_id: number | null
    name: string
    type: string | null
    pos_uuid: string | null
    deleted_at: Date | null
  }, ExtArgs["result"]["categories"]>
  composites: {}
}

export type categoriesGetPayload<S extends boolean | null | undefined | categoriesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$categoriesPayload, S>

export type categoriesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<categoriesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CategoriesCountAggregateInputType | true
  }

export interface categoriesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categories'], meta: { name: 'categories' } }
  /**
   * Find zero or one Categories that matches the filter.
   * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
   * @example
   * // Get one Categories
   * const categories = await prisma.categories.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends categoriesFindUniqueArgs>(args: Prisma.SelectSubset<T, categoriesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__categoriesClient<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Categories that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {categoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
   * @example
   * // Get one Categories
   * const categories = await prisma.categories.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends categoriesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, categoriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__categoriesClient<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Categories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
   * @example
   * // Get one Categories
   * const categories = await prisma.categories.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends categoriesFindFirstArgs>(args?: Prisma.SelectSubset<T, categoriesFindFirstArgs<ExtArgs>>): Prisma.Prisma__categoriesClient<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Categories that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
   * @example
   * // Get one Categories
   * const categories = await prisma.categories.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends categoriesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, categoriesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__categoriesClient<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Categories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoriesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Categories
   * const categories = await prisma.categories.findMany()
   * 
   * // Get first 10 Categories
   * const categories = await prisma.categories.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends categoriesFindManyArgs>(args?: Prisma.SelectSubset<T, categoriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Categories.
   * @param {categoriesCreateArgs} args - Arguments to create a Categories.
   * @example
   * // Create one Categories
   * const Categories = await prisma.categories.create({
   *   data: {
   *     // ... data to create a Categories
   *   }
   * })
   * 
   */
  create<T extends categoriesCreateArgs>(args: Prisma.SelectSubset<T, categoriesCreateArgs<ExtArgs>>): Prisma.Prisma__categoriesClient<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Categories.
   * @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
   * @example
   * // Create many Categories
   * const categories = await prisma.categories.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends categoriesCreateManyArgs>(args?: Prisma.SelectSubset<T, categoriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Categories and returns the data saved in the database.
   * @param {categoriesCreateManyAndReturnArgs} args - Arguments to create many Categories.
   * @example
   * // Create many Categories
   * const categories = await prisma.categories.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Categories and only return the `id`
   * const categoriesWithIdOnly = await prisma.categories.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends categoriesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, categoriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Categories.
   * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
   * @example
   * // Delete one Categories
   * const Categories = await prisma.categories.delete({
   *   where: {
   *     // ... filter to delete one Categories
   *   }
   * })
   * 
   */
  delete<T extends categoriesDeleteArgs>(args: Prisma.SelectSubset<T, categoriesDeleteArgs<ExtArgs>>): Prisma.Prisma__categoriesClient<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Categories.
   * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
   * @example
   * // Update one Categories
   * const categories = await prisma.categories.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends categoriesUpdateArgs>(args: Prisma.SelectSubset<T, categoriesUpdateArgs<ExtArgs>>): Prisma.Prisma__categoriesClient<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Categories.
   * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
   * @example
   * // Delete a few Categories
   * const { count } = await prisma.categories.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends categoriesDeleteManyArgs>(args?: Prisma.SelectSubset<T, categoriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Categories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Categories
   * const categories = await prisma.categories.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends categoriesUpdateManyArgs>(args: Prisma.SelectSubset<T, categoriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Categories and returns the data updated in the database.
   * @param {categoriesUpdateManyAndReturnArgs} args - Arguments to update many Categories.
   * @example
   * // Update many Categories
   * const categories = await prisma.categories.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Categories and only return the `id`
   * const categoriesWithIdOnly = await prisma.categories.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends categoriesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, categoriesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Categories.
   * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
   * @example
   * // Update or create a Categories
   * const categories = await prisma.categories.upsert({
   *   create: {
   *     // ... data to create a Categories
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Categories we want to update
   *   }
   * })
   */
  upsert<T extends categoriesUpsertArgs>(args: Prisma.SelectSubset<T, categoriesUpsertArgs<ExtArgs>>): Prisma.Prisma__categoriesClient<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Categories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
   * @example
   * // Count the number of Categories
   * const count = await prisma.categories.count({
   *   where: {
   *     // ... the filter for the Categories we want to count
   *   }
   * })
  **/
  count<T extends categoriesCountArgs>(
    args?: Prisma.Subset<T, categoriesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CategoriesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Categories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CategoriesAggregateArgs>(args: Prisma.Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

  /**
   * Group by Categories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {categoriesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends categoriesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: categoriesGroupByArgs['orderBy'] }
      : { orderBy?: categoriesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the categories model
 */
readonly fields: categoriesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for categories.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__categoriesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  brands<T extends Prisma.categories$brandsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.categories$brandsArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  sub_brands<T extends Prisma.categories$sub_brandsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.categories$sub_brandsArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  items<T extends Prisma.categories$itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.categories$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  option_groups<T extends Prisma.categories$option_groupsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.categories$option_groupsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$option_groupsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  products<T extends Prisma.categories$productsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.categories$productsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the categories model
 */
export interface categoriesFieldRefs {
  readonly id: Prisma.FieldRef<"categories", 'Int'>
  readonly brand_id: Prisma.FieldRef<"categories", 'Int'>
  readonly sub_brand_id: Prisma.FieldRef<"categories", 'Int'>
  readonly name: Prisma.FieldRef<"categories", 'String'>
  readonly type: Prisma.FieldRef<"categories", 'String'>
  readonly pos_uuid: Prisma.FieldRef<"categories", 'String'>
  readonly deleted_at: Prisma.FieldRef<"categories", 'DateTime'>
}
    

// Custom InputTypes
/**
 * categories findUnique
 */
export type categoriesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  /**
   * Filter, which categories to fetch.
   */
  where: Prisma.categoriesWhereUniqueInput
}

/**
 * categories findUniqueOrThrow
 */
export type categoriesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  /**
   * Filter, which categories to fetch.
   */
  where: Prisma.categoriesWhereUniqueInput
}

/**
 * categories findFirst
 */
export type categoriesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  /**
   * Filter, which categories to fetch.
   */
  where?: Prisma.categoriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of categories to fetch.
   */
  orderBy?: Prisma.categoriesOrderByWithRelationInput | Prisma.categoriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for categories.
   */
  cursor?: Prisma.categoriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` categories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` categories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of categories.
   */
  distinct?: Prisma.CategoriesScalarFieldEnum | Prisma.CategoriesScalarFieldEnum[]
}

/**
 * categories findFirstOrThrow
 */
export type categoriesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  /**
   * Filter, which categories to fetch.
   */
  where?: Prisma.categoriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of categories to fetch.
   */
  orderBy?: Prisma.categoriesOrderByWithRelationInput | Prisma.categoriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for categories.
   */
  cursor?: Prisma.categoriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` categories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` categories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of categories.
   */
  distinct?: Prisma.CategoriesScalarFieldEnum | Prisma.CategoriesScalarFieldEnum[]
}

/**
 * categories findMany
 */
export type categoriesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  /**
   * Filter, which categories to fetch.
   */
  where?: Prisma.categoriesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of categories to fetch.
   */
  orderBy?: Prisma.categoriesOrderByWithRelationInput | Prisma.categoriesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing categories.
   */
  cursor?: Prisma.categoriesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` categories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` categories.
   */
  skip?: number
  distinct?: Prisma.CategoriesScalarFieldEnum | Prisma.CategoriesScalarFieldEnum[]
}

/**
 * categories create
 */
export type categoriesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  /**
   * The data needed to create a categories.
   */
  data: Prisma.XOR<Prisma.categoriesCreateInput, Prisma.categoriesUncheckedCreateInput>
}

/**
 * categories createMany
 */
export type categoriesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many categories.
   */
  data: Prisma.categoriesCreateManyInput | Prisma.categoriesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * categories createManyAndReturn
 */
export type categoriesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * The data used to create many categories.
   */
  data: Prisma.categoriesCreateManyInput | Prisma.categoriesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * categories update
 */
export type categoriesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  /**
   * The data needed to update a categories.
   */
  data: Prisma.XOR<Prisma.categoriesUpdateInput, Prisma.categoriesUncheckedUpdateInput>
  /**
   * Choose, which categories to update.
   */
  where: Prisma.categoriesWhereUniqueInput
}

/**
 * categories updateMany
 */
export type categoriesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update categories.
   */
  data: Prisma.XOR<Prisma.categoriesUpdateManyMutationInput, Prisma.categoriesUncheckedUpdateManyInput>
  /**
   * Filter which categories to update
   */
  where?: Prisma.categoriesWhereInput
  /**
   * Limit how many categories to update.
   */
  limit?: number
}

/**
 * categories updateManyAndReturn
 */
export type categoriesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * The data used to update categories.
   */
  data: Prisma.XOR<Prisma.categoriesUpdateManyMutationInput, Prisma.categoriesUncheckedUpdateManyInput>
  /**
   * Filter which categories to update
   */
  where?: Prisma.categoriesWhereInput
  /**
   * Limit how many categories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * categories upsert
 */
export type categoriesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  /**
   * The filter to search for the categories to update in case it exists.
   */
  where: Prisma.categoriesWhereUniqueInput
  /**
   * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
   */
  create: Prisma.XOR<Prisma.categoriesCreateInput, Prisma.categoriesUncheckedCreateInput>
  /**
   * In case the categories was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.categoriesUpdateInput, Prisma.categoriesUncheckedUpdateInput>
}

/**
 * categories delete
 */
export type categoriesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  /**
   * Filter which categories to delete.
   */
  where: Prisma.categoriesWhereUniqueInput
}

/**
 * categories deleteMany
 */
export type categoriesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which categories to delete
   */
  where?: Prisma.categoriesWhereInput
  /**
   * Limit how many categories to delete.
   */
  limit?: number
}

/**
 * categories.brands
 */
export type categories$brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  where?: Prisma.brandsWhereInput
}

/**
 * categories.sub_brands
 */
export type categories$sub_brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  where?: Prisma.sub_brandsWhereInput
}

/**
 * categories.items
 */
export type categories$itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the items
   */
  select?: Prisma.itemsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the items
   */
  omit?: Prisma.itemsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.itemsInclude<ExtArgs> | null
  where?: Prisma.itemsWhereInput
  orderBy?: Prisma.itemsOrderByWithRelationInput | Prisma.itemsOrderByWithRelationInput[]
  cursor?: Prisma.itemsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ItemsScalarFieldEnum | Prisma.ItemsScalarFieldEnum[]
}

/**
 * categories.option_groups
 */
export type categories$option_groupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the option_groups
   */
  select?: Prisma.option_groupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the option_groups
   */
  omit?: Prisma.option_groupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.option_groupsInclude<ExtArgs> | null
  where?: Prisma.option_groupsWhereInput
  orderBy?: Prisma.option_groupsOrderByWithRelationInput | Prisma.option_groupsOrderByWithRelationInput[]
  cursor?: Prisma.option_groupsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Option_groupsScalarFieldEnum | Prisma.Option_groupsScalarFieldEnum[]
}

/**
 * categories.products
 */
export type categories$productsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  where?: Prisma.productsWhereInput
  orderBy?: Prisma.productsOrderByWithRelationInput | Prisma.productsOrderByWithRelationInput[]
  cursor?: Prisma.productsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductsScalarFieldEnum | Prisma.ProductsScalarFieldEnum[]
}

/**
 * categories without action
 */
export type categoriesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
}
