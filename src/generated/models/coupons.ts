
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `coupons` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model coupons
 * 
 */
export type couponsModel = runtime.Types.Result.DefaultSelection<Prisma.$couponsPayload>

export type AggregateCoupons = {
  _count: CouponsCountAggregateOutputType | null
  _avg: CouponsAvgAggregateOutputType | null
  _sum: CouponsSumAggregateOutputType | null
  _min: CouponsMinAggregateOutputType | null
  _max: CouponsMaxAggregateOutputType | null
}

export type CouponsAvgAggregateOutputType = {
  id: number | null
  brand_id: number | null
  discount_value: runtime.Decimal | null
}

export type CouponsSumAggregateOutputType = {
  id: number | null
  brand_id: number | null
  discount_value: runtime.Decimal | null
}

export type CouponsMinAggregateOutputType = {
  id: number | null
  brand_id: number | null
  code: string | null
  discount_type: string | null
  discount_value: runtime.Decimal | null
  is_active: boolean | null
  valid_from: Date | null
  valid_until: Date | null
}

export type CouponsMaxAggregateOutputType = {
  id: number | null
  brand_id: number | null
  code: string | null
  discount_type: string | null
  discount_value: runtime.Decimal | null
  is_active: boolean | null
  valid_from: Date | null
  valid_until: Date | null
}

export type CouponsCountAggregateOutputType = {
  id: number
  brand_id: number
  code: number
  discount_type: number
  discount_value: number
  is_active: number
  valid_from: number
  valid_until: number
  _all: number
}


export type CouponsAvgAggregateInputType = {
  id?: true
  brand_id?: true
  discount_value?: true
}

export type CouponsSumAggregateInputType = {
  id?: true
  brand_id?: true
  discount_value?: true
}

export type CouponsMinAggregateInputType = {
  id?: true
  brand_id?: true
  code?: true
  discount_type?: true
  discount_value?: true
  is_active?: true
  valid_from?: true
  valid_until?: true
}

export type CouponsMaxAggregateInputType = {
  id?: true
  brand_id?: true
  code?: true
  discount_type?: true
  discount_value?: true
  is_active?: true
  valid_from?: true
  valid_until?: true
}

export type CouponsCountAggregateInputType = {
  id?: true
  brand_id?: true
  code?: true
  discount_type?: true
  discount_value?: true
  is_active?: true
  valid_from?: true
  valid_until?: true
  _all?: true
}

export type CouponsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which coupons to aggregate.
   */
  where?: Prisma.couponsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupons to fetch.
   */
  orderBy?: Prisma.couponsOrderByWithRelationInput | Prisma.couponsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.couponsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned coupons
  **/
  _count?: true | CouponsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CouponsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CouponsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CouponsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CouponsMaxAggregateInputType
}

export type GetCouponsAggregateType<T extends CouponsAggregateArgs> = {
      [P in keyof T & keyof AggregateCoupons]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCoupons[P]>
    : Prisma.GetScalarType<T[P], AggregateCoupons[P]>
}




export type couponsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.couponsWhereInput
  orderBy?: Prisma.couponsOrderByWithAggregationInput | Prisma.couponsOrderByWithAggregationInput[]
  by: Prisma.CouponsScalarFieldEnum[] | Prisma.CouponsScalarFieldEnum
  having?: Prisma.couponsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CouponsCountAggregateInputType | true
  _avg?: CouponsAvgAggregateInputType
  _sum?: CouponsSumAggregateInputType
  _min?: CouponsMinAggregateInputType
  _max?: CouponsMaxAggregateInputType
}

export type CouponsGroupByOutputType = {
  id: number
  brand_id: number | null
  code: string
  discount_type: string | null
  discount_value: runtime.Decimal | null
  is_active: boolean | null
  valid_from: Date | null
  valid_until: Date | null
  _count: CouponsCountAggregateOutputType | null
  _avg: CouponsAvgAggregateOutputType | null
  _sum: CouponsSumAggregateOutputType | null
  _min: CouponsMinAggregateOutputType | null
  _max: CouponsMaxAggregateOutputType | null
}

type GetCouponsGroupByPayload<T extends couponsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CouponsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CouponsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CouponsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CouponsGroupByOutputType[P]>
      }
    >
  >



export type couponsWhereInput = {
  AND?: Prisma.couponsWhereInput | Prisma.couponsWhereInput[]
  OR?: Prisma.couponsWhereInput[]
  NOT?: Prisma.couponsWhereInput | Prisma.couponsWhereInput[]
  id?: Prisma.IntFilter<"coupons"> | number
  brand_id?: Prisma.IntNullableFilter<"coupons"> | number | null
  code?: Prisma.StringFilter<"coupons"> | string
  discount_type?: Prisma.StringNullableFilter<"coupons"> | string | null
  discount_value?: Prisma.DecimalNullableFilter<"coupons"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.BoolNullableFilter<"coupons"> | boolean | null
  valid_from?: Prisma.DateTimeNullableFilter<"coupons"> | Date | string | null
  valid_until?: Prisma.DateTimeNullableFilter<"coupons"> | Date | string | null
  coupon_sales?: Prisma.Coupon_salesListRelationFilter
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
}

export type couponsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  code?: Prisma.SortOrder
  discount_type?: Prisma.SortOrderInput | Prisma.SortOrder
  discount_value?: Prisma.SortOrderInput | Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  valid_from?: Prisma.SortOrderInput | Prisma.SortOrder
  valid_until?: Prisma.SortOrderInput | Prisma.SortOrder
  coupon_sales?: Prisma.coupon_salesOrderByRelationAggregateInput
  brands?: Prisma.brandsOrderByWithRelationInput
}

export type couponsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.couponsWhereInput | Prisma.couponsWhereInput[]
  OR?: Prisma.couponsWhereInput[]
  NOT?: Prisma.couponsWhereInput | Prisma.couponsWhereInput[]
  brand_id?: Prisma.IntNullableFilter<"coupons"> | number | null
  code?: Prisma.StringFilter<"coupons"> | string
  discount_type?: Prisma.StringNullableFilter<"coupons"> | string | null
  discount_value?: Prisma.DecimalNullableFilter<"coupons"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.BoolNullableFilter<"coupons"> | boolean | null
  valid_from?: Prisma.DateTimeNullableFilter<"coupons"> | Date | string | null
  valid_until?: Prisma.DateTimeNullableFilter<"coupons"> | Date | string | null
  coupon_sales?: Prisma.Coupon_salesListRelationFilter
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
}, "id">

export type couponsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  code?: Prisma.SortOrder
  discount_type?: Prisma.SortOrderInput | Prisma.SortOrder
  discount_value?: Prisma.SortOrderInput | Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  valid_from?: Prisma.SortOrderInput | Prisma.SortOrder
  valid_until?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.couponsCountOrderByAggregateInput
  _avg?: Prisma.couponsAvgOrderByAggregateInput
  _max?: Prisma.couponsMaxOrderByAggregateInput
  _min?: Prisma.couponsMinOrderByAggregateInput
  _sum?: Prisma.couponsSumOrderByAggregateInput
}

export type couponsScalarWhereWithAggregatesInput = {
  AND?: Prisma.couponsScalarWhereWithAggregatesInput | Prisma.couponsScalarWhereWithAggregatesInput[]
  OR?: Prisma.couponsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.couponsScalarWhereWithAggregatesInput | Prisma.couponsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"coupons"> | number
  brand_id?: Prisma.IntNullableWithAggregatesFilter<"coupons"> | number | null
  code?: Prisma.StringWithAggregatesFilter<"coupons"> | string
  discount_type?: Prisma.StringNullableWithAggregatesFilter<"coupons"> | string | null
  discount_value?: Prisma.DecimalNullableWithAggregatesFilter<"coupons"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.BoolNullableWithAggregatesFilter<"coupons"> | boolean | null
  valid_from?: Prisma.DateTimeNullableWithAggregatesFilter<"coupons"> | Date | string | null
  valid_until?: Prisma.DateTimeNullableWithAggregatesFilter<"coupons"> | Date | string | null
}

export type couponsCreateInput = {
  code: string
  discount_type?: string | null
  discount_value?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: boolean | null
  valid_from?: Date | string | null
  valid_until?: Date | string | null
  coupon_sales?: Prisma.coupon_salesCreateNestedManyWithoutCouponsInput
  brands?: Prisma.brandsCreateNestedOneWithoutCouponsInput
}

export type couponsUncheckedCreateInput = {
  id?: number
  brand_id?: number | null
  code: string
  discount_type?: string | null
  discount_value?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: boolean | null
  valid_from?: Date | string | null
  valid_until?: Date | string | null
  coupon_sales?: Prisma.coupon_salesUncheckedCreateNestedManyWithoutCouponsInput
}

export type couponsUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  discount_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  discount_value?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  valid_from?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coupon_sales?: Prisma.coupon_salesUpdateManyWithoutCouponsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutCouponsNestedInput
}

export type couponsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  code?: Prisma.StringFieldUpdateOperationsInput | string
  discount_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  discount_value?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  valid_from?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coupon_sales?: Prisma.coupon_salesUncheckedUpdateManyWithoutCouponsNestedInput
}

export type couponsCreateManyInput = {
  id?: number
  brand_id?: number | null
  code: string
  discount_type?: string | null
  discount_value?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: boolean | null
  valid_from?: Date | string | null
  valid_until?: Date | string | null
}

export type couponsUpdateManyMutationInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  discount_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  discount_value?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  valid_from?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type couponsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  code?: Prisma.StringFieldUpdateOperationsInput | string
  discount_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  discount_value?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  valid_from?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type CouponsListRelationFilter = {
  every?: Prisma.couponsWhereInput
  some?: Prisma.couponsWhereInput
  none?: Prisma.couponsWhereInput
}

export type couponsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CouponsNullableScalarRelationFilter = {
  is?: Prisma.couponsWhereInput | null
  isNot?: Prisma.couponsWhereInput | null
}

export type couponsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  discount_type?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  valid_from?: Prisma.SortOrder
  valid_until?: Prisma.SortOrder
}

export type couponsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
}

export type couponsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  discount_type?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  valid_from?: Prisma.SortOrder
  valid_until?: Prisma.SortOrder
}

export type couponsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  discount_type?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  valid_from?: Prisma.SortOrder
  valid_until?: Prisma.SortOrder
}

export type couponsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  discount_value?: Prisma.SortOrder
}

export type couponsCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.couponsCreateWithoutBrandsInput, Prisma.couponsUncheckedCreateWithoutBrandsInput> | Prisma.couponsCreateWithoutBrandsInput[] | Prisma.couponsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.couponsCreateOrConnectWithoutBrandsInput | Prisma.couponsCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.couponsCreateManyBrandsInputEnvelope
  connect?: Prisma.couponsWhereUniqueInput | Prisma.couponsWhereUniqueInput[]
}

export type couponsUncheckedCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.couponsCreateWithoutBrandsInput, Prisma.couponsUncheckedCreateWithoutBrandsInput> | Prisma.couponsCreateWithoutBrandsInput[] | Prisma.couponsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.couponsCreateOrConnectWithoutBrandsInput | Prisma.couponsCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.couponsCreateManyBrandsInputEnvelope
  connect?: Prisma.couponsWhereUniqueInput | Prisma.couponsWhereUniqueInput[]
}

export type couponsUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.couponsCreateWithoutBrandsInput, Prisma.couponsUncheckedCreateWithoutBrandsInput> | Prisma.couponsCreateWithoutBrandsInput[] | Prisma.couponsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.couponsCreateOrConnectWithoutBrandsInput | Prisma.couponsCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.couponsUpsertWithWhereUniqueWithoutBrandsInput | Prisma.couponsUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.couponsCreateManyBrandsInputEnvelope
  set?: Prisma.couponsWhereUniqueInput | Prisma.couponsWhereUniqueInput[]
  disconnect?: Prisma.couponsWhereUniqueInput | Prisma.couponsWhereUniqueInput[]
  delete?: Prisma.couponsWhereUniqueInput | Prisma.couponsWhereUniqueInput[]
  connect?: Prisma.couponsWhereUniqueInput | Prisma.couponsWhereUniqueInput[]
  update?: Prisma.couponsUpdateWithWhereUniqueWithoutBrandsInput | Prisma.couponsUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.couponsUpdateManyWithWhereWithoutBrandsInput | Prisma.couponsUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.couponsScalarWhereInput | Prisma.couponsScalarWhereInput[]
}

export type couponsUncheckedUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.couponsCreateWithoutBrandsInput, Prisma.couponsUncheckedCreateWithoutBrandsInput> | Prisma.couponsCreateWithoutBrandsInput[] | Prisma.couponsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.couponsCreateOrConnectWithoutBrandsInput | Prisma.couponsCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.couponsUpsertWithWhereUniqueWithoutBrandsInput | Prisma.couponsUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.couponsCreateManyBrandsInputEnvelope
  set?: Prisma.couponsWhereUniqueInput | Prisma.couponsWhereUniqueInput[]
  disconnect?: Prisma.couponsWhereUniqueInput | Prisma.couponsWhereUniqueInput[]
  delete?: Prisma.couponsWhereUniqueInput | Prisma.couponsWhereUniqueInput[]
  connect?: Prisma.couponsWhereUniqueInput | Prisma.couponsWhereUniqueInput[]
  update?: Prisma.couponsUpdateWithWhereUniqueWithoutBrandsInput | Prisma.couponsUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.couponsUpdateManyWithWhereWithoutBrandsInput | Prisma.couponsUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.couponsScalarWhereInput | Prisma.couponsScalarWhereInput[]
}

export type couponsCreateNestedOneWithoutCoupon_salesInput = {
  create?: Prisma.XOR<Prisma.couponsCreateWithoutCoupon_salesInput, Prisma.couponsUncheckedCreateWithoutCoupon_salesInput>
  connectOrCreate?: Prisma.couponsCreateOrConnectWithoutCoupon_salesInput
  connect?: Prisma.couponsWhereUniqueInput
}

export type couponsUpdateOneWithoutCoupon_salesNestedInput = {
  create?: Prisma.XOR<Prisma.couponsCreateWithoutCoupon_salesInput, Prisma.couponsUncheckedCreateWithoutCoupon_salesInput>
  connectOrCreate?: Prisma.couponsCreateOrConnectWithoutCoupon_salesInput
  upsert?: Prisma.couponsUpsertWithoutCoupon_salesInput
  disconnect?: Prisma.couponsWhereInput | boolean
  delete?: Prisma.couponsWhereInput | boolean
  connect?: Prisma.couponsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.couponsUpdateToOneWithWhereWithoutCoupon_salesInput, Prisma.couponsUpdateWithoutCoupon_salesInput>, Prisma.couponsUncheckedUpdateWithoutCoupon_salesInput>
}

export type NullableDecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type couponsCreateWithoutBrandsInput = {
  code: string
  discount_type?: string | null
  discount_value?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: boolean | null
  valid_from?: Date | string | null
  valid_until?: Date | string | null
  coupon_sales?: Prisma.coupon_salesCreateNestedManyWithoutCouponsInput
}

export type couponsUncheckedCreateWithoutBrandsInput = {
  id?: number
  code: string
  discount_type?: string | null
  discount_value?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: boolean | null
  valid_from?: Date | string | null
  valid_until?: Date | string | null
  coupon_sales?: Prisma.coupon_salesUncheckedCreateNestedManyWithoutCouponsInput
}

export type couponsCreateOrConnectWithoutBrandsInput = {
  where: Prisma.couponsWhereUniqueInput
  create: Prisma.XOR<Prisma.couponsCreateWithoutBrandsInput, Prisma.couponsUncheckedCreateWithoutBrandsInput>
}

export type couponsCreateManyBrandsInputEnvelope = {
  data: Prisma.couponsCreateManyBrandsInput | Prisma.couponsCreateManyBrandsInput[]
  skipDuplicates?: boolean
}

export type couponsUpsertWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.couponsWhereUniqueInput
  update: Prisma.XOR<Prisma.couponsUpdateWithoutBrandsInput, Prisma.couponsUncheckedUpdateWithoutBrandsInput>
  create: Prisma.XOR<Prisma.couponsCreateWithoutBrandsInput, Prisma.couponsUncheckedCreateWithoutBrandsInput>
}

export type couponsUpdateWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.couponsWhereUniqueInput
  data: Prisma.XOR<Prisma.couponsUpdateWithoutBrandsInput, Prisma.couponsUncheckedUpdateWithoutBrandsInput>
}

export type couponsUpdateManyWithWhereWithoutBrandsInput = {
  where: Prisma.couponsScalarWhereInput
  data: Prisma.XOR<Prisma.couponsUpdateManyMutationInput, Prisma.couponsUncheckedUpdateManyWithoutBrandsInput>
}

export type couponsScalarWhereInput = {
  AND?: Prisma.couponsScalarWhereInput | Prisma.couponsScalarWhereInput[]
  OR?: Prisma.couponsScalarWhereInput[]
  NOT?: Prisma.couponsScalarWhereInput | Prisma.couponsScalarWhereInput[]
  id?: Prisma.IntFilter<"coupons"> | number
  brand_id?: Prisma.IntNullableFilter<"coupons"> | number | null
  code?: Prisma.StringFilter<"coupons"> | string
  discount_type?: Prisma.StringNullableFilter<"coupons"> | string | null
  discount_value?: Prisma.DecimalNullableFilter<"coupons"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.BoolNullableFilter<"coupons"> | boolean | null
  valid_from?: Prisma.DateTimeNullableFilter<"coupons"> | Date | string | null
  valid_until?: Prisma.DateTimeNullableFilter<"coupons"> | Date | string | null
}

export type couponsCreateWithoutCoupon_salesInput = {
  code: string
  discount_type?: string | null
  discount_value?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: boolean | null
  valid_from?: Date | string | null
  valid_until?: Date | string | null
  brands?: Prisma.brandsCreateNestedOneWithoutCouponsInput
}

export type couponsUncheckedCreateWithoutCoupon_salesInput = {
  id?: number
  brand_id?: number | null
  code: string
  discount_type?: string | null
  discount_value?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: boolean | null
  valid_from?: Date | string | null
  valid_until?: Date | string | null
}

export type couponsCreateOrConnectWithoutCoupon_salesInput = {
  where: Prisma.couponsWhereUniqueInput
  create: Prisma.XOR<Prisma.couponsCreateWithoutCoupon_salesInput, Prisma.couponsUncheckedCreateWithoutCoupon_salesInput>
}

export type couponsUpsertWithoutCoupon_salesInput = {
  update: Prisma.XOR<Prisma.couponsUpdateWithoutCoupon_salesInput, Prisma.couponsUncheckedUpdateWithoutCoupon_salesInput>
  create: Prisma.XOR<Prisma.couponsCreateWithoutCoupon_salesInput, Prisma.couponsUncheckedCreateWithoutCoupon_salesInput>
  where?: Prisma.couponsWhereInput
}

export type couponsUpdateToOneWithWhereWithoutCoupon_salesInput = {
  where?: Prisma.couponsWhereInput
  data: Prisma.XOR<Prisma.couponsUpdateWithoutCoupon_salesInput, Prisma.couponsUncheckedUpdateWithoutCoupon_salesInput>
}

export type couponsUpdateWithoutCoupon_salesInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  discount_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  discount_value?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  valid_from?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  brands?: Prisma.brandsUpdateOneWithoutCouponsNestedInput
}

export type couponsUncheckedUpdateWithoutCoupon_salesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  code?: Prisma.StringFieldUpdateOperationsInput | string
  discount_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  discount_value?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  valid_from?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type couponsCreateManyBrandsInput = {
  id?: number
  code: string
  discount_type?: string | null
  discount_value?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: boolean | null
  valid_from?: Date | string | null
  valid_until?: Date | string | null
}

export type couponsUpdateWithoutBrandsInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  discount_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  discount_value?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  valid_from?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coupon_sales?: Prisma.coupon_salesUpdateManyWithoutCouponsNestedInput
}

export type couponsUncheckedUpdateWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  discount_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  discount_value?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  valid_from?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  coupon_sales?: Prisma.coupon_salesUncheckedUpdateManyWithoutCouponsNestedInput
}

export type couponsUncheckedUpdateManyWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  discount_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  discount_value?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  valid_from?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  valid_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type CouponsCountOutputType
 */

export type CouponsCountOutputType = {
  coupon_sales: number
}

export type CouponsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  coupon_sales?: boolean | CouponsCountOutputTypeCountCoupon_salesArgs
}

/**
 * CouponsCountOutputType without action
 */
export type CouponsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CouponsCountOutputType
   */
  select?: Prisma.CouponsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CouponsCountOutputType without action
 */
export type CouponsCountOutputTypeCountCoupon_salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.coupon_salesWhereInput
}


export type couponsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  code?: boolean
  discount_type?: boolean
  discount_value?: boolean
  is_active?: boolean
  valid_from?: boolean
  valid_until?: boolean
  coupon_sales?: boolean | Prisma.coupons$coupon_salesArgs<ExtArgs>
  brands?: boolean | Prisma.coupons$brandsArgs<ExtArgs>
  _count?: boolean | Prisma.CouponsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["coupons"]>

export type couponsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  code?: boolean
  discount_type?: boolean
  discount_value?: boolean
  is_active?: boolean
  valid_from?: boolean
  valid_until?: boolean
  brands?: boolean | Prisma.coupons$brandsArgs<ExtArgs>
}, ExtArgs["result"]["coupons"]>

export type couponsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  code?: boolean
  discount_type?: boolean
  discount_value?: boolean
  is_active?: boolean
  valid_from?: boolean
  valid_until?: boolean
  brands?: boolean | Prisma.coupons$brandsArgs<ExtArgs>
}, ExtArgs["result"]["coupons"]>

export type couponsSelectScalar = {
  id?: boolean
  brand_id?: boolean
  code?: boolean
  discount_type?: boolean
  discount_value?: boolean
  is_active?: boolean
  valid_from?: boolean
  valid_until?: boolean
}

export type couponsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "brand_id" | "code" | "discount_type" | "discount_value" | "is_active" | "valid_from" | "valid_until", ExtArgs["result"]["coupons"]>
export type couponsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  coupon_sales?: boolean | Prisma.coupons$coupon_salesArgs<ExtArgs>
  brands?: boolean | Prisma.coupons$brandsArgs<ExtArgs>
  _count?: boolean | Prisma.CouponsCountOutputTypeDefaultArgs<ExtArgs>
}
export type couponsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.coupons$brandsArgs<ExtArgs>
}
export type couponsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.coupons$brandsArgs<ExtArgs>
}

export type $couponsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "coupons"
  objects: {
    coupon_sales: Prisma.$coupon_salesPayload<ExtArgs>[]
    brands: Prisma.$brandsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    brand_id: number | null
    code: string
    discount_type: string | null
    discount_value: runtime.Decimal | null
    is_active: boolean | null
    valid_from: Date | null
    valid_until: Date | null
  }, ExtArgs["result"]["coupons"]>
  composites: {}
}

export type couponsGetPayload<S extends boolean | null | undefined | couponsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$couponsPayload, S>

export type couponsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<couponsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CouponsCountAggregateInputType | true
  }

export interface couponsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['coupons'], meta: { name: 'coupons' } }
  /**
   * Find zero or one Coupons that matches the filter.
   * @param {couponsFindUniqueArgs} args - Arguments to find a Coupons
   * @example
   * // Get one Coupons
   * const coupons = await prisma.coupons.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends couponsFindUniqueArgs>(args: Prisma.SelectSubset<T, couponsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__couponsClient<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Coupons that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {couponsFindUniqueOrThrowArgs} args - Arguments to find a Coupons
   * @example
   * // Get one Coupons
   * const coupons = await prisma.coupons.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends couponsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, couponsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__couponsClient<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Coupons that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponsFindFirstArgs} args - Arguments to find a Coupons
   * @example
   * // Get one Coupons
   * const coupons = await prisma.coupons.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends couponsFindFirstArgs>(args?: Prisma.SelectSubset<T, couponsFindFirstArgs<ExtArgs>>): Prisma.Prisma__couponsClient<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Coupons that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponsFindFirstOrThrowArgs} args - Arguments to find a Coupons
   * @example
   * // Get one Coupons
   * const coupons = await prisma.coupons.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends couponsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, couponsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__couponsClient<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Coupons that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Coupons
   * const coupons = await prisma.coupons.findMany()
   * 
   * // Get first 10 Coupons
   * const coupons = await prisma.coupons.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const couponsWithIdOnly = await prisma.coupons.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends couponsFindManyArgs>(args?: Prisma.SelectSubset<T, couponsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Coupons.
   * @param {couponsCreateArgs} args - Arguments to create a Coupons.
   * @example
   * // Create one Coupons
   * const Coupons = await prisma.coupons.create({
   *   data: {
   *     // ... data to create a Coupons
   *   }
   * })
   * 
   */
  create<T extends couponsCreateArgs>(args: Prisma.SelectSubset<T, couponsCreateArgs<ExtArgs>>): Prisma.Prisma__couponsClient<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Coupons.
   * @param {couponsCreateManyArgs} args - Arguments to create many Coupons.
   * @example
   * // Create many Coupons
   * const coupons = await prisma.coupons.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends couponsCreateManyArgs>(args?: Prisma.SelectSubset<T, couponsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Coupons and returns the data saved in the database.
   * @param {couponsCreateManyAndReturnArgs} args - Arguments to create many Coupons.
   * @example
   * // Create many Coupons
   * const coupons = await prisma.coupons.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Coupons and only return the `id`
   * const couponsWithIdOnly = await prisma.coupons.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends couponsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, couponsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Coupons.
   * @param {couponsDeleteArgs} args - Arguments to delete one Coupons.
   * @example
   * // Delete one Coupons
   * const Coupons = await prisma.coupons.delete({
   *   where: {
   *     // ... filter to delete one Coupons
   *   }
   * })
   * 
   */
  delete<T extends couponsDeleteArgs>(args: Prisma.SelectSubset<T, couponsDeleteArgs<ExtArgs>>): Prisma.Prisma__couponsClient<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Coupons.
   * @param {couponsUpdateArgs} args - Arguments to update one Coupons.
   * @example
   * // Update one Coupons
   * const coupons = await prisma.coupons.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends couponsUpdateArgs>(args: Prisma.SelectSubset<T, couponsUpdateArgs<ExtArgs>>): Prisma.Prisma__couponsClient<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Coupons.
   * @param {couponsDeleteManyArgs} args - Arguments to filter Coupons to delete.
   * @example
   * // Delete a few Coupons
   * const { count } = await prisma.coupons.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends couponsDeleteManyArgs>(args?: Prisma.SelectSubset<T, couponsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Coupons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Coupons
   * const coupons = await prisma.coupons.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends couponsUpdateManyArgs>(args: Prisma.SelectSubset<T, couponsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Coupons and returns the data updated in the database.
   * @param {couponsUpdateManyAndReturnArgs} args - Arguments to update many Coupons.
   * @example
   * // Update many Coupons
   * const coupons = await prisma.coupons.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Coupons and only return the `id`
   * const couponsWithIdOnly = await prisma.coupons.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends couponsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, couponsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Coupons.
   * @param {couponsUpsertArgs} args - Arguments to update or create a Coupons.
   * @example
   * // Update or create a Coupons
   * const coupons = await prisma.coupons.upsert({
   *   create: {
   *     // ... data to create a Coupons
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Coupons we want to update
   *   }
   * })
   */
  upsert<T extends couponsUpsertArgs>(args: Prisma.SelectSubset<T, couponsUpsertArgs<ExtArgs>>): Prisma.Prisma__couponsClient<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Coupons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponsCountArgs} args - Arguments to filter Coupons to count.
   * @example
   * // Count the number of Coupons
   * const count = await prisma.coupons.count({
   *   where: {
   *     // ... the filter for the Coupons we want to count
   *   }
   * })
  **/
  count<T extends couponsCountArgs>(
    args?: Prisma.Subset<T, couponsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CouponsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Coupons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CouponsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CouponsAggregateArgs>(args: Prisma.Subset<T, CouponsAggregateArgs>): Prisma.PrismaPromise<GetCouponsAggregateType<T>>

  /**
   * Group by Coupons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {couponsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends couponsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: couponsGroupByArgs['orderBy'] }
      : { orderBy?: couponsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, couponsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCouponsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the coupons model
 */
readonly fields: couponsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for coupons.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__couponsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  coupon_sales<T extends Prisma.coupons$coupon_salesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.coupons$coupon_salesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  brands<T extends Prisma.coupons$brandsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.coupons$brandsArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the coupons model
 */
export interface couponsFieldRefs {
  readonly id: Prisma.FieldRef<"coupons", 'Int'>
  readonly brand_id: Prisma.FieldRef<"coupons", 'Int'>
  readonly code: Prisma.FieldRef<"coupons", 'String'>
  readonly discount_type: Prisma.FieldRef<"coupons", 'String'>
  readonly discount_value: Prisma.FieldRef<"coupons", 'Decimal'>
  readonly is_active: Prisma.FieldRef<"coupons", 'Boolean'>
  readonly valid_from: Prisma.FieldRef<"coupons", 'DateTime'>
  readonly valid_until: Prisma.FieldRef<"coupons", 'DateTime'>
}
    

// Custom InputTypes
/**
 * coupons findUnique
 */
export type couponsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  /**
   * Filter, which coupons to fetch.
   */
  where: Prisma.couponsWhereUniqueInput
}

/**
 * coupons findUniqueOrThrow
 */
export type couponsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  /**
   * Filter, which coupons to fetch.
   */
  where: Prisma.couponsWhereUniqueInput
}

/**
 * coupons findFirst
 */
export type couponsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  /**
   * Filter, which coupons to fetch.
   */
  where?: Prisma.couponsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupons to fetch.
   */
  orderBy?: Prisma.couponsOrderByWithRelationInput | Prisma.couponsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for coupons.
   */
  cursor?: Prisma.couponsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of coupons.
   */
  distinct?: Prisma.CouponsScalarFieldEnum | Prisma.CouponsScalarFieldEnum[]
}

/**
 * coupons findFirstOrThrow
 */
export type couponsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  /**
   * Filter, which coupons to fetch.
   */
  where?: Prisma.couponsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupons to fetch.
   */
  orderBy?: Prisma.couponsOrderByWithRelationInput | Prisma.couponsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for coupons.
   */
  cursor?: Prisma.couponsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of coupons.
   */
  distinct?: Prisma.CouponsScalarFieldEnum | Prisma.CouponsScalarFieldEnum[]
}

/**
 * coupons findMany
 */
export type couponsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  /**
   * Filter, which coupons to fetch.
   */
  where?: Prisma.couponsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupons to fetch.
   */
  orderBy?: Prisma.couponsOrderByWithRelationInput | Prisma.couponsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing coupons.
   */
  cursor?: Prisma.couponsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupons.
   */
  skip?: number
  distinct?: Prisma.CouponsScalarFieldEnum | Prisma.CouponsScalarFieldEnum[]
}

/**
 * coupons create
 */
export type couponsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  /**
   * The data needed to create a coupons.
   */
  data: Prisma.XOR<Prisma.couponsCreateInput, Prisma.couponsUncheckedCreateInput>
}

/**
 * coupons createMany
 */
export type couponsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many coupons.
   */
  data: Prisma.couponsCreateManyInput | Prisma.couponsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * coupons createManyAndReturn
 */
export type couponsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * The data used to create many coupons.
   */
  data: Prisma.couponsCreateManyInput | Prisma.couponsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * coupons update
 */
export type couponsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  /**
   * The data needed to update a coupons.
   */
  data: Prisma.XOR<Prisma.couponsUpdateInput, Prisma.couponsUncheckedUpdateInput>
  /**
   * Choose, which coupons to update.
   */
  where: Prisma.couponsWhereUniqueInput
}

/**
 * coupons updateMany
 */
export type couponsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update coupons.
   */
  data: Prisma.XOR<Prisma.couponsUpdateManyMutationInput, Prisma.couponsUncheckedUpdateManyInput>
  /**
   * Filter which coupons to update
   */
  where?: Prisma.couponsWhereInput
  /**
   * Limit how many coupons to update.
   */
  limit?: number
}

/**
 * coupons updateManyAndReturn
 */
export type couponsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * The data used to update coupons.
   */
  data: Prisma.XOR<Prisma.couponsUpdateManyMutationInput, Prisma.couponsUncheckedUpdateManyInput>
  /**
   * Filter which coupons to update
   */
  where?: Prisma.couponsWhereInput
  /**
   * Limit how many coupons to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * coupons upsert
 */
export type couponsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  /**
   * The filter to search for the coupons to update in case it exists.
   */
  where: Prisma.couponsWhereUniqueInput
  /**
   * In case the coupons found by the `where` argument doesn't exist, create a new coupons with this data.
   */
  create: Prisma.XOR<Prisma.couponsCreateInput, Prisma.couponsUncheckedCreateInput>
  /**
   * In case the coupons was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.couponsUpdateInput, Prisma.couponsUncheckedUpdateInput>
}

/**
 * coupons delete
 */
export type couponsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  /**
   * Filter which coupons to delete.
   */
  where: Prisma.couponsWhereUniqueInput
}

/**
 * coupons deleteMany
 */
export type couponsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which coupons to delete
   */
  where?: Prisma.couponsWhereInput
  /**
   * Limit how many coupons to delete.
   */
  limit?: number
}

/**
 * coupons.coupon_sales
 */
export type coupons$coupon_salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
  where?: Prisma.coupon_salesWhereInput
  orderBy?: Prisma.coupon_salesOrderByWithRelationInput | Prisma.coupon_salesOrderByWithRelationInput[]
  cursor?: Prisma.coupon_salesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Coupon_salesScalarFieldEnum | Prisma.Coupon_salesScalarFieldEnum[]
}

/**
 * coupons.brands
 */
export type coupons$brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  where?: Prisma.brandsWhereInput
}

/**
 * coupons without action
 */
export type couponsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
}
