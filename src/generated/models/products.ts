
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `products` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model products
 * 
 */
export type productsModel = runtime.Types.Result.DefaultSelection<Prisma.$productsPayload>

export type AggregateProducts = {
  _count: ProductsCountAggregateOutputType | null
  _avg: ProductsAvgAggregateOutputType | null
  _sum: ProductsSumAggregateOutputType | null
  _min: ProductsMinAggregateOutputType | null
  _max: ProductsMaxAggregateOutputType | null
}

export type ProductsAvgAggregateOutputType = {
  id: number | null
  brand_id: number | null
  sub_brand_id: number | null
  category_id: number | null
}

export type ProductsSumAggregateOutputType = {
  id: number | null
  brand_id: number | null
  sub_brand_id: number | null
  category_id: number | null
}

export type ProductsMinAggregateOutputType = {
  id: number | null
  brand_id: number | null
  sub_brand_id: number | null
  category_id: number | null
  name: string | null
  pos_uuid: string | null
  deleted_at: Date | null
}

export type ProductsMaxAggregateOutputType = {
  id: number | null
  brand_id: number | null
  sub_brand_id: number | null
  category_id: number | null
  name: string | null
  pos_uuid: string | null
  deleted_at: Date | null
}

export type ProductsCountAggregateOutputType = {
  id: number
  brand_id: number
  sub_brand_id: number
  category_id: number
  name: number
  pos_uuid: number
  deleted_at: number
  _all: number
}


export type ProductsAvgAggregateInputType = {
  id?: true
  brand_id?: true
  sub_brand_id?: true
  category_id?: true
}

export type ProductsSumAggregateInputType = {
  id?: true
  brand_id?: true
  sub_brand_id?: true
  category_id?: true
}

export type ProductsMinAggregateInputType = {
  id?: true
  brand_id?: true
  sub_brand_id?: true
  category_id?: true
  name?: true
  pos_uuid?: true
  deleted_at?: true
}

export type ProductsMaxAggregateInputType = {
  id?: true
  brand_id?: true
  sub_brand_id?: true
  category_id?: true
  name?: true
  pos_uuid?: true
  deleted_at?: true
}

export type ProductsCountAggregateInputType = {
  id?: true
  brand_id?: true
  sub_brand_id?: true
  category_id?: true
  name?: true
  pos_uuid?: true
  deleted_at?: true
  _all?: true
}

export type ProductsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which products to aggregate.
   */
  where?: Prisma.productsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of products to fetch.
   */
  orderBy?: Prisma.productsOrderByWithRelationInput | Prisma.productsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.productsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned products
  **/
  _count?: true | ProductsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductsMaxAggregateInputType
}

export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
      [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProducts[P]>
    : Prisma.GetScalarType<T[P], AggregateProducts[P]>
}




export type productsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.productsWhereInput
  orderBy?: Prisma.productsOrderByWithAggregationInput | Prisma.productsOrderByWithAggregationInput[]
  by: Prisma.ProductsScalarFieldEnum[] | Prisma.ProductsScalarFieldEnum
  having?: Prisma.productsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductsCountAggregateInputType | true
  _avg?: ProductsAvgAggregateInputType
  _sum?: ProductsSumAggregateInputType
  _min?: ProductsMinAggregateInputType
  _max?: ProductsMaxAggregateInputType
}

export type ProductsGroupByOutputType = {
  id: number
  brand_id: number | null
  sub_brand_id: number | null
  category_id: number | null
  name: string
  pos_uuid: string | null
  deleted_at: Date | null
  _count: ProductsCountAggregateOutputType | null
  _avg: ProductsAvgAggregateOutputType | null
  _sum: ProductsSumAggregateOutputType | null
  _min: ProductsMinAggregateOutputType | null
  _max: ProductsMaxAggregateOutputType | null
}

type GetProductsGroupByPayload<T extends productsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductsGroupByOutputType[P]>
      }
    >
  >



export type productsWhereInput = {
  AND?: Prisma.productsWhereInput | Prisma.productsWhereInput[]
  OR?: Prisma.productsWhereInput[]
  NOT?: Prisma.productsWhereInput | Prisma.productsWhereInput[]
  id?: Prisma.IntFilter<"products"> | number
  brand_id?: Prisma.IntNullableFilter<"products"> | number | null
  sub_brand_id?: Prisma.IntNullableFilter<"products"> | number | null
  category_id?: Prisma.IntNullableFilter<"products"> | number | null
  name?: Prisma.StringFilter<"products"> | string
  pos_uuid?: Prisma.StringNullableFilter<"products"> | string | null
  deleted_at?: Prisma.DateTimeNullableFilter<"products"> | Date | string | null
  product_sales?: Prisma.Product_salesListRelationFilter
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
  categories?: Prisma.XOR<Prisma.CategoriesNullableScalarRelationFilter, Prisma.categoriesWhereInput> | null
  sub_brands?: Prisma.XOR<Prisma.Sub_brandsNullableScalarRelationFilter, Prisma.sub_brandsWhereInput> | null
}

export type productsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  category_id?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  pos_uuid?: Prisma.SortOrderInput | Prisma.SortOrder
  deleted_at?: Prisma.SortOrderInput | Prisma.SortOrder
  product_sales?: Prisma.product_salesOrderByRelationAggregateInput
  brands?: Prisma.brandsOrderByWithRelationInput
  categories?: Prisma.categoriesOrderByWithRelationInput
  sub_brands?: Prisma.sub_brandsOrderByWithRelationInput
}

export type productsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.productsWhereInput | Prisma.productsWhereInput[]
  OR?: Prisma.productsWhereInput[]
  NOT?: Prisma.productsWhereInput | Prisma.productsWhereInput[]
  brand_id?: Prisma.IntNullableFilter<"products"> | number | null
  sub_brand_id?: Prisma.IntNullableFilter<"products"> | number | null
  category_id?: Prisma.IntNullableFilter<"products"> | number | null
  name?: Prisma.StringFilter<"products"> | string
  pos_uuid?: Prisma.StringNullableFilter<"products"> | string | null
  deleted_at?: Prisma.DateTimeNullableFilter<"products"> | Date | string | null
  product_sales?: Prisma.Product_salesListRelationFilter
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
  categories?: Prisma.XOR<Prisma.CategoriesNullableScalarRelationFilter, Prisma.categoriesWhereInput> | null
  sub_brands?: Prisma.XOR<Prisma.Sub_brandsNullableScalarRelationFilter, Prisma.sub_brandsWhereInput> | null
}, "id">

export type productsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  category_id?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  pos_uuid?: Prisma.SortOrderInput | Prisma.SortOrder
  deleted_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.productsCountOrderByAggregateInput
  _avg?: Prisma.productsAvgOrderByAggregateInput
  _max?: Prisma.productsMaxOrderByAggregateInput
  _min?: Prisma.productsMinOrderByAggregateInput
  _sum?: Prisma.productsSumOrderByAggregateInput
}

export type productsScalarWhereWithAggregatesInput = {
  AND?: Prisma.productsScalarWhereWithAggregatesInput | Prisma.productsScalarWhereWithAggregatesInput[]
  OR?: Prisma.productsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.productsScalarWhereWithAggregatesInput | Prisma.productsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"products"> | number
  brand_id?: Prisma.IntNullableWithAggregatesFilter<"products"> | number | null
  sub_brand_id?: Prisma.IntNullableWithAggregatesFilter<"products"> | number | null
  category_id?: Prisma.IntNullableWithAggregatesFilter<"products"> | number | null
  name?: Prisma.StringWithAggregatesFilter<"products"> | string
  pos_uuid?: Prisma.StringNullableWithAggregatesFilter<"products"> | string | null
  deleted_at?: Prisma.DateTimeNullableWithAggregatesFilter<"products"> | Date | string | null
}

export type productsCreateInput = {
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  product_sales?: Prisma.product_salesCreateNestedManyWithoutProductsInput
  brands?: Prisma.brandsCreateNestedOneWithoutProductsInput
  categories?: Prisma.categoriesCreateNestedOneWithoutProductsInput
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutProductsInput
}

export type productsUncheckedCreateInput = {
  id?: number
  brand_id?: number | null
  sub_brand_id?: number | null
  category_id?: number | null
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  product_sales?: Prisma.product_salesUncheckedCreateNestedManyWithoutProductsInput
}

export type productsUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_sales?: Prisma.product_salesUpdateManyWithoutProductsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutProductsNestedInput
  categories?: Prisma.categoriesUpdateOneWithoutProductsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutProductsNestedInput
}

export type productsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  category_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_sales?: Prisma.product_salesUncheckedUpdateManyWithoutProductsNestedInput
}

export type productsCreateManyInput = {
  id?: number
  brand_id?: number | null
  sub_brand_id?: number | null
  category_id?: number | null
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
}

export type productsUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type productsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  category_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ProductsListRelationFilter = {
  every?: Prisma.productsWhereInput
  some?: Prisma.productsWhereInput
  none?: Prisma.productsWhereInput
}

export type productsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductsScalarRelationFilter = {
  is?: Prisma.productsWhereInput
  isNot?: Prisma.productsWhereInput
}

export type productsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  pos_uuid?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type productsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
}

export type productsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  pos_uuid?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type productsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  pos_uuid?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type productsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  category_id?: Prisma.SortOrder
}

export type productsCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutBrandsInput, Prisma.productsUncheckedCreateWithoutBrandsInput> | Prisma.productsCreateWithoutBrandsInput[] | Prisma.productsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutBrandsInput | Prisma.productsCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.productsCreateManyBrandsInputEnvelope
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
}

export type productsUncheckedCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutBrandsInput, Prisma.productsUncheckedCreateWithoutBrandsInput> | Prisma.productsCreateWithoutBrandsInput[] | Prisma.productsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutBrandsInput | Prisma.productsCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.productsCreateManyBrandsInputEnvelope
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
}

export type productsUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutBrandsInput, Prisma.productsUncheckedCreateWithoutBrandsInput> | Prisma.productsCreateWithoutBrandsInput[] | Prisma.productsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutBrandsInput | Prisma.productsCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.productsUpsertWithWhereUniqueWithoutBrandsInput | Prisma.productsUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.productsCreateManyBrandsInputEnvelope
  set?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  disconnect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  delete?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  update?: Prisma.productsUpdateWithWhereUniqueWithoutBrandsInput | Prisma.productsUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.productsUpdateManyWithWhereWithoutBrandsInput | Prisma.productsUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.productsScalarWhereInput | Prisma.productsScalarWhereInput[]
}

export type productsUncheckedUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutBrandsInput, Prisma.productsUncheckedCreateWithoutBrandsInput> | Prisma.productsCreateWithoutBrandsInput[] | Prisma.productsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutBrandsInput | Prisma.productsCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.productsUpsertWithWhereUniqueWithoutBrandsInput | Prisma.productsUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.productsCreateManyBrandsInputEnvelope
  set?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  disconnect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  delete?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  update?: Prisma.productsUpdateWithWhereUniqueWithoutBrandsInput | Prisma.productsUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.productsUpdateManyWithWhereWithoutBrandsInput | Prisma.productsUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.productsScalarWhereInput | Prisma.productsScalarWhereInput[]
}

export type productsCreateNestedManyWithoutCategoriesInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutCategoriesInput, Prisma.productsUncheckedCreateWithoutCategoriesInput> | Prisma.productsCreateWithoutCategoriesInput[] | Prisma.productsUncheckedCreateWithoutCategoriesInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutCategoriesInput | Prisma.productsCreateOrConnectWithoutCategoriesInput[]
  createMany?: Prisma.productsCreateManyCategoriesInputEnvelope
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
}

export type productsUncheckedCreateNestedManyWithoutCategoriesInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutCategoriesInput, Prisma.productsUncheckedCreateWithoutCategoriesInput> | Prisma.productsCreateWithoutCategoriesInput[] | Prisma.productsUncheckedCreateWithoutCategoriesInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutCategoriesInput | Prisma.productsCreateOrConnectWithoutCategoriesInput[]
  createMany?: Prisma.productsCreateManyCategoriesInputEnvelope
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
}

export type productsUpdateManyWithoutCategoriesNestedInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutCategoriesInput, Prisma.productsUncheckedCreateWithoutCategoriesInput> | Prisma.productsCreateWithoutCategoriesInput[] | Prisma.productsUncheckedCreateWithoutCategoriesInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutCategoriesInput | Prisma.productsCreateOrConnectWithoutCategoriesInput[]
  upsert?: Prisma.productsUpsertWithWhereUniqueWithoutCategoriesInput | Prisma.productsUpsertWithWhereUniqueWithoutCategoriesInput[]
  createMany?: Prisma.productsCreateManyCategoriesInputEnvelope
  set?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  disconnect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  delete?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  update?: Prisma.productsUpdateWithWhereUniqueWithoutCategoriesInput | Prisma.productsUpdateWithWhereUniqueWithoutCategoriesInput[]
  updateMany?: Prisma.productsUpdateManyWithWhereWithoutCategoriesInput | Prisma.productsUpdateManyWithWhereWithoutCategoriesInput[]
  deleteMany?: Prisma.productsScalarWhereInput | Prisma.productsScalarWhereInput[]
}

export type productsUncheckedUpdateManyWithoutCategoriesNestedInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutCategoriesInput, Prisma.productsUncheckedCreateWithoutCategoriesInput> | Prisma.productsCreateWithoutCategoriesInput[] | Prisma.productsUncheckedCreateWithoutCategoriesInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutCategoriesInput | Prisma.productsCreateOrConnectWithoutCategoriesInput[]
  upsert?: Prisma.productsUpsertWithWhereUniqueWithoutCategoriesInput | Prisma.productsUpsertWithWhereUniqueWithoutCategoriesInput[]
  createMany?: Prisma.productsCreateManyCategoriesInputEnvelope
  set?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  disconnect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  delete?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  update?: Prisma.productsUpdateWithWhereUniqueWithoutCategoriesInput | Prisma.productsUpdateWithWhereUniqueWithoutCategoriesInput[]
  updateMany?: Prisma.productsUpdateManyWithWhereWithoutCategoriesInput | Prisma.productsUpdateManyWithWhereWithoutCategoriesInput[]
  deleteMany?: Prisma.productsScalarWhereInput | Prisma.productsScalarWhereInput[]
}

export type productsCreateNestedOneWithoutProduct_salesInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutProduct_salesInput, Prisma.productsUncheckedCreateWithoutProduct_salesInput>
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutProduct_salesInput
  connect?: Prisma.productsWhereUniqueInput
}

export type productsUpdateOneRequiredWithoutProduct_salesNestedInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutProduct_salesInput, Prisma.productsUncheckedCreateWithoutProduct_salesInput>
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutProduct_salesInput
  upsert?: Prisma.productsUpsertWithoutProduct_salesInput
  connect?: Prisma.productsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.productsUpdateToOneWithWhereWithoutProduct_salesInput, Prisma.productsUpdateWithoutProduct_salesInput>, Prisma.productsUncheckedUpdateWithoutProduct_salesInput>
}

export type productsCreateNestedManyWithoutSub_brandsInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutSub_brandsInput, Prisma.productsUncheckedCreateWithoutSub_brandsInput> | Prisma.productsCreateWithoutSub_brandsInput[] | Prisma.productsUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutSub_brandsInput | Prisma.productsCreateOrConnectWithoutSub_brandsInput[]
  createMany?: Prisma.productsCreateManySub_brandsInputEnvelope
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
}

export type productsUncheckedCreateNestedManyWithoutSub_brandsInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutSub_brandsInput, Prisma.productsUncheckedCreateWithoutSub_brandsInput> | Prisma.productsCreateWithoutSub_brandsInput[] | Prisma.productsUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutSub_brandsInput | Prisma.productsCreateOrConnectWithoutSub_brandsInput[]
  createMany?: Prisma.productsCreateManySub_brandsInputEnvelope
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
}

export type productsUpdateManyWithoutSub_brandsNestedInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutSub_brandsInput, Prisma.productsUncheckedCreateWithoutSub_brandsInput> | Prisma.productsCreateWithoutSub_brandsInput[] | Prisma.productsUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutSub_brandsInput | Prisma.productsCreateOrConnectWithoutSub_brandsInput[]
  upsert?: Prisma.productsUpsertWithWhereUniqueWithoutSub_brandsInput | Prisma.productsUpsertWithWhereUniqueWithoutSub_brandsInput[]
  createMany?: Prisma.productsCreateManySub_brandsInputEnvelope
  set?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  disconnect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  delete?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  update?: Prisma.productsUpdateWithWhereUniqueWithoutSub_brandsInput | Prisma.productsUpdateWithWhereUniqueWithoutSub_brandsInput[]
  updateMany?: Prisma.productsUpdateManyWithWhereWithoutSub_brandsInput | Prisma.productsUpdateManyWithWhereWithoutSub_brandsInput[]
  deleteMany?: Prisma.productsScalarWhereInput | Prisma.productsScalarWhereInput[]
}

export type productsUncheckedUpdateManyWithoutSub_brandsNestedInput = {
  create?: Prisma.XOR<Prisma.productsCreateWithoutSub_brandsInput, Prisma.productsUncheckedCreateWithoutSub_brandsInput> | Prisma.productsCreateWithoutSub_brandsInput[] | Prisma.productsUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.productsCreateOrConnectWithoutSub_brandsInput | Prisma.productsCreateOrConnectWithoutSub_brandsInput[]
  upsert?: Prisma.productsUpsertWithWhereUniqueWithoutSub_brandsInput | Prisma.productsUpsertWithWhereUniqueWithoutSub_brandsInput[]
  createMany?: Prisma.productsCreateManySub_brandsInputEnvelope
  set?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  disconnect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  delete?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  connect?: Prisma.productsWhereUniqueInput | Prisma.productsWhereUniqueInput[]
  update?: Prisma.productsUpdateWithWhereUniqueWithoutSub_brandsInput | Prisma.productsUpdateWithWhereUniqueWithoutSub_brandsInput[]
  updateMany?: Prisma.productsUpdateManyWithWhereWithoutSub_brandsInput | Prisma.productsUpdateManyWithWhereWithoutSub_brandsInput[]
  deleteMany?: Prisma.productsScalarWhereInput | Prisma.productsScalarWhereInput[]
}

export type productsCreateWithoutBrandsInput = {
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  product_sales?: Prisma.product_salesCreateNestedManyWithoutProductsInput
  categories?: Prisma.categoriesCreateNestedOneWithoutProductsInput
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutProductsInput
}

export type productsUncheckedCreateWithoutBrandsInput = {
  id?: number
  sub_brand_id?: number | null
  category_id?: number | null
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  product_sales?: Prisma.product_salesUncheckedCreateNestedManyWithoutProductsInput
}

export type productsCreateOrConnectWithoutBrandsInput = {
  where: Prisma.productsWhereUniqueInput
  create: Prisma.XOR<Prisma.productsCreateWithoutBrandsInput, Prisma.productsUncheckedCreateWithoutBrandsInput>
}

export type productsCreateManyBrandsInputEnvelope = {
  data: Prisma.productsCreateManyBrandsInput | Prisma.productsCreateManyBrandsInput[]
  skipDuplicates?: boolean
}

export type productsUpsertWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.productsWhereUniqueInput
  update: Prisma.XOR<Prisma.productsUpdateWithoutBrandsInput, Prisma.productsUncheckedUpdateWithoutBrandsInput>
  create: Prisma.XOR<Prisma.productsCreateWithoutBrandsInput, Prisma.productsUncheckedCreateWithoutBrandsInput>
}

export type productsUpdateWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.productsWhereUniqueInput
  data: Prisma.XOR<Prisma.productsUpdateWithoutBrandsInput, Prisma.productsUncheckedUpdateWithoutBrandsInput>
}

export type productsUpdateManyWithWhereWithoutBrandsInput = {
  where: Prisma.productsScalarWhereInput
  data: Prisma.XOR<Prisma.productsUpdateManyMutationInput, Prisma.productsUncheckedUpdateManyWithoutBrandsInput>
}

export type productsScalarWhereInput = {
  AND?: Prisma.productsScalarWhereInput | Prisma.productsScalarWhereInput[]
  OR?: Prisma.productsScalarWhereInput[]
  NOT?: Prisma.productsScalarWhereInput | Prisma.productsScalarWhereInput[]
  id?: Prisma.IntFilter<"products"> | number
  brand_id?: Prisma.IntNullableFilter<"products"> | number | null
  sub_brand_id?: Prisma.IntNullableFilter<"products"> | number | null
  category_id?: Prisma.IntNullableFilter<"products"> | number | null
  name?: Prisma.StringFilter<"products"> | string
  pos_uuid?: Prisma.StringNullableFilter<"products"> | string | null
  deleted_at?: Prisma.DateTimeNullableFilter<"products"> | Date | string | null
}

export type productsCreateWithoutCategoriesInput = {
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  product_sales?: Prisma.product_salesCreateNestedManyWithoutProductsInput
  brands?: Prisma.brandsCreateNestedOneWithoutProductsInput
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutProductsInput
}

export type productsUncheckedCreateWithoutCategoriesInput = {
  id?: number
  brand_id?: number | null
  sub_brand_id?: number | null
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  product_sales?: Prisma.product_salesUncheckedCreateNestedManyWithoutProductsInput
}

export type productsCreateOrConnectWithoutCategoriesInput = {
  where: Prisma.productsWhereUniqueInput
  create: Prisma.XOR<Prisma.productsCreateWithoutCategoriesInput, Prisma.productsUncheckedCreateWithoutCategoriesInput>
}

export type productsCreateManyCategoriesInputEnvelope = {
  data: Prisma.productsCreateManyCategoriesInput | Prisma.productsCreateManyCategoriesInput[]
  skipDuplicates?: boolean
}

export type productsUpsertWithWhereUniqueWithoutCategoriesInput = {
  where: Prisma.productsWhereUniqueInput
  update: Prisma.XOR<Prisma.productsUpdateWithoutCategoriesInput, Prisma.productsUncheckedUpdateWithoutCategoriesInput>
  create: Prisma.XOR<Prisma.productsCreateWithoutCategoriesInput, Prisma.productsUncheckedCreateWithoutCategoriesInput>
}

export type productsUpdateWithWhereUniqueWithoutCategoriesInput = {
  where: Prisma.productsWhereUniqueInput
  data: Prisma.XOR<Prisma.productsUpdateWithoutCategoriesInput, Prisma.productsUncheckedUpdateWithoutCategoriesInput>
}

export type productsUpdateManyWithWhereWithoutCategoriesInput = {
  where: Prisma.productsScalarWhereInput
  data: Prisma.XOR<Prisma.productsUpdateManyMutationInput, Prisma.productsUncheckedUpdateManyWithoutCategoriesInput>
}

export type productsCreateWithoutProduct_salesInput = {
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  brands?: Prisma.brandsCreateNestedOneWithoutProductsInput
  categories?: Prisma.categoriesCreateNestedOneWithoutProductsInput
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutProductsInput
}

export type productsUncheckedCreateWithoutProduct_salesInput = {
  id?: number
  brand_id?: number | null
  sub_brand_id?: number | null
  category_id?: number | null
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
}

export type productsCreateOrConnectWithoutProduct_salesInput = {
  where: Prisma.productsWhereUniqueInput
  create: Prisma.XOR<Prisma.productsCreateWithoutProduct_salesInput, Prisma.productsUncheckedCreateWithoutProduct_salesInput>
}

export type productsUpsertWithoutProduct_salesInput = {
  update: Prisma.XOR<Prisma.productsUpdateWithoutProduct_salesInput, Prisma.productsUncheckedUpdateWithoutProduct_salesInput>
  create: Prisma.XOR<Prisma.productsCreateWithoutProduct_salesInput, Prisma.productsUncheckedCreateWithoutProduct_salesInput>
  where?: Prisma.productsWhereInput
}

export type productsUpdateToOneWithWhereWithoutProduct_salesInput = {
  where?: Prisma.productsWhereInput
  data: Prisma.XOR<Prisma.productsUpdateWithoutProduct_salesInput, Prisma.productsUncheckedUpdateWithoutProduct_salesInput>
}

export type productsUpdateWithoutProduct_salesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  brands?: Prisma.brandsUpdateOneWithoutProductsNestedInput
  categories?: Prisma.categoriesUpdateOneWithoutProductsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutProductsNestedInput
}

export type productsUncheckedUpdateWithoutProduct_salesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  category_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type productsCreateWithoutSub_brandsInput = {
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  product_sales?: Prisma.product_salesCreateNestedManyWithoutProductsInput
  brands?: Prisma.brandsCreateNestedOneWithoutProductsInput
  categories?: Prisma.categoriesCreateNestedOneWithoutProductsInput
}

export type productsUncheckedCreateWithoutSub_brandsInput = {
  id?: number
  brand_id?: number | null
  category_id?: number | null
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
  product_sales?: Prisma.product_salesUncheckedCreateNestedManyWithoutProductsInput
}

export type productsCreateOrConnectWithoutSub_brandsInput = {
  where: Prisma.productsWhereUniqueInput
  create: Prisma.XOR<Prisma.productsCreateWithoutSub_brandsInput, Prisma.productsUncheckedCreateWithoutSub_brandsInput>
}

export type productsCreateManySub_brandsInputEnvelope = {
  data: Prisma.productsCreateManySub_brandsInput | Prisma.productsCreateManySub_brandsInput[]
  skipDuplicates?: boolean
}

export type productsUpsertWithWhereUniqueWithoutSub_brandsInput = {
  where: Prisma.productsWhereUniqueInput
  update: Prisma.XOR<Prisma.productsUpdateWithoutSub_brandsInput, Prisma.productsUncheckedUpdateWithoutSub_brandsInput>
  create: Prisma.XOR<Prisma.productsCreateWithoutSub_brandsInput, Prisma.productsUncheckedCreateWithoutSub_brandsInput>
}

export type productsUpdateWithWhereUniqueWithoutSub_brandsInput = {
  where: Prisma.productsWhereUniqueInput
  data: Prisma.XOR<Prisma.productsUpdateWithoutSub_brandsInput, Prisma.productsUncheckedUpdateWithoutSub_brandsInput>
}

export type productsUpdateManyWithWhereWithoutSub_brandsInput = {
  where: Prisma.productsScalarWhereInput
  data: Prisma.XOR<Prisma.productsUpdateManyMutationInput, Prisma.productsUncheckedUpdateManyWithoutSub_brandsInput>
}

export type productsCreateManyBrandsInput = {
  id?: number
  sub_brand_id?: number | null
  category_id?: number | null
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
}

export type productsUpdateWithoutBrandsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_sales?: Prisma.product_salesUpdateManyWithoutProductsNestedInput
  categories?: Prisma.categoriesUpdateOneWithoutProductsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutProductsNestedInput
}

export type productsUncheckedUpdateWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  category_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_sales?: Prisma.product_salesUncheckedUpdateManyWithoutProductsNestedInput
}

export type productsUncheckedUpdateManyWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  category_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type productsCreateManyCategoriesInput = {
  id?: number
  brand_id?: number | null
  sub_brand_id?: number | null
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
}

export type productsUpdateWithoutCategoriesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_sales?: Prisma.product_salesUpdateManyWithoutProductsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutProductsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutProductsNestedInput
}

export type productsUncheckedUpdateWithoutCategoriesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_sales?: Prisma.product_salesUncheckedUpdateManyWithoutProductsNestedInput
}

export type productsUncheckedUpdateManyWithoutCategoriesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type productsCreateManySub_brandsInput = {
  id?: number
  brand_id?: number | null
  category_id?: number | null
  name: string
  pos_uuid?: string | null
  deleted_at?: Date | string | null
}

export type productsUpdateWithoutSub_brandsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_sales?: Prisma.product_salesUpdateManyWithoutProductsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutProductsNestedInput
  categories?: Prisma.categoriesUpdateOneWithoutProductsNestedInput
}

export type productsUncheckedUpdateWithoutSub_brandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  category_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  product_sales?: Prisma.product_salesUncheckedUpdateManyWithoutProductsNestedInput
}

export type productsUncheckedUpdateManyWithoutSub_brandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  category_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  pos_uuid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type ProductsCountOutputType
 */

export type ProductsCountOutputType = {
  product_sales: number
}

export type ProductsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product_sales?: boolean | ProductsCountOutputTypeCountProduct_salesArgs
}

/**
 * ProductsCountOutputType without action
 */
export type ProductsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductsCountOutputType
   */
  select?: Prisma.ProductsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProductsCountOutputType without action
 */
export type ProductsCountOutputTypeCountProduct_salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.product_salesWhereInput
}


export type productsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  sub_brand_id?: boolean
  category_id?: boolean
  name?: boolean
  pos_uuid?: boolean
  deleted_at?: boolean
  product_sales?: boolean | Prisma.products$product_salesArgs<ExtArgs>
  brands?: boolean | Prisma.products$brandsArgs<ExtArgs>
  categories?: boolean | Prisma.products$categoriesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.products$sub_brandsArgs<ExtArgs>
  _count?: boolean | Prisma.ProductsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["products"]>

export type productsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  sub_brand_id?: boolean
  category_id?: boolean
  name?: boolean
  pos_uuid?: boolean
  deleted_at?: boolean
  brands?: boolean | Prisma.products$brandsArgs<ExtArgs>
  categories?: boolean | Prisma.products$categoriesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.products$sub_brandsArgs<ExtArgs>
}, ExtArgs["result"]["products"]>

export type productsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  sub_brand_id?: boolean
  category_id?: boolean
  name?: boolean
  pos_uuid?: boolean
  deleted_at?: boolean
  brands?: boolean | Prisma.products$brandsArgs<ExtArgs>
  categories?: boolean | Prisma.products$categoriesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.products$sub_brandsArgs<ExtArgs>
}, ExtArgs["result"]["products"]>

export type productsSelectScalar = {
  id?: boolean
  brand_id?: boolean
  sub_brand_id?: boolean
  category_id?: boolean
  name?: boolean
  pos_uuid?: boolean
  deleted_at?: boolean
}

export type productsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "brand_id" | "sub_brand_id" | "category_id" | "name" | "pos_uuid" | "deleted_at", ExtArgs["result"]["products"]>
export type productsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product_sales?: boolean | Prisma.products$product_salesArgs<ExtArgs>
  brands?: boolean | Prisma.products$brandsArgs<ExtArgs>
  categories?: boolean | Prisma.products$categoriesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.products$sub_brandsArgs<ExtArgs>
  _count?: boolean | Prisma.ProductsCountOutputTypeDefaultArgs<ExtArgs>
}
export type productsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.products$brandsArgs<ExtArgs>
  categories?: boolean | Prisma.products$categoriesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.products$sub_brandsArgs<ExtArgs>
}
export type productsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.products$brandsArgs<ExtArgs>
  categories?: boolean | Prisma.products$categoriesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.products$sub_brandsArgs<ExtArgs>
}

export type $productsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "products"
  objects: {
    product_sales: Prisma.$product_salesPayload<ExtArgs>[]
    brands: Prisma.$brandsPayload<ExtArgs> | null
    categories: Prisma.$categoriesPayload<ExtArgs> | null
    sub_brands: Prisma.$sub_brandsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    brand_id: number | null
    sub_brand_id: number | null
    category_id: number | null
    name: string
    pos_uuid: string | null
    deleted_at: Date | null
  }, ExtArgs["result"]["products"]>
  composites: {}
}

export type productsGetPayload<S extends boolean | null | undefined | productsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$productsPayload, S>

export type productsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<productsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductsCountAggregateInputType | true
  }

export interface productsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products'], meta: { name: 'products' } }
  /**
   * Find zero or one Products that matches the filter.
   * @param {productsFindUniqueArgs} args - Arguments to find a Products
   * @example
   * // Get one Products
   * const products = await prisma.products.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends productsFindUniqueArgs>(args: Prisma.SelectSubset<T, productsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__productsClient<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Products that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
   * @example
   * // Get one Products
   * const products = await prisma.products.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, productsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__productsClient<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Products that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productsFindFirstArgs} args - Arguments to find a Products
   * @example
   * // Get one Products
   * const products = await prisma.products.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends productsFindFirstArgs>(args?: Prisma.SelectSubset<T, productsFindFirstArgs<ExtArgs>>): Prisma.Prisma__productsClient<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Products that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
   * @example
   * // Get one Products
   * const products = await prisma.products.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends productsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, productsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__productsClient<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Products that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Products
   * const products = await prisma.products.findMany()
   * 
   * // Get first 10 Products
   * const products = await prisma.products.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends productsFindManyArgs>(args?: Prisma.SelectSubset<T, productsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Products.
   * @param {productsCreateArgs} args - Arguments to create a Products.
   * @example
   * // Create one Products
   * const Products = await prisma.products.create({
   *   data: {
   *     // ... data to create a Products
   *   }
   * })
   * 
   */
  create<T extends productsCreateArgs>(args: Prisma.SelectSubset<T, productsCreateArgs<ExtArgs>>): Prisma.Prisma__productsClient<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Products.
   * @param {productsCreateManyArgs} args - Arguments to create many Products.
   * @example
   * // Create many Products
   * const products = await prisma.products.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends productsCreateManyArgs>(args?: Prisma.SelectSubset<T, productsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Products and returns the data saved in the database.
   * @param {productsCreateManyAndReturnArgs} args - Arguments to create many Products.
   * @example
   * // Create many Products
   * const products = await prisma.products.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Products and only return the `id`
   * const productsWithIdOnly = await prisma.products.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends productsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, productsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Products.
   * @param {productsDeleteArgs} args - Arguments to delete one Products.
   * @example
   * // Delete one Products
   * const Products = await prisma.products.delete({
   *   where: {
   *     // ... filter to delete one Products
   *   }
   * })
   * 
   */
  delete<T extends productsDeleteArgs>(args: Prisma.SelectSubset<T, productsDeleteArgs<ExtArgs>>): Prisma.Prisma__productsClient<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Products.
   * @param {productsUpdateArgs} args - Arguments to update one Products.
   * @example
   * // Update one Products
   * const products = await prisma.products.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends productsUpdateArgs>(args: Prisma.SelectSubset<T, productsUpdateArgs<ExtArgs>>): Prisma.Prisma__productsClient<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Products.
   * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
   * @example
   * // Delete a few Products
   * const { count } = await prisma.products.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends productsDeleteManyArgs>(args?: Prisma.SelectSubset<T, productsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Products
   * const products = await prisma.products.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends productsUpdateManyArgs>(args: Prisma.SelectSubset<T, productsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Products and returns the data updated in the database.
   * @param {productsUpdateManyAndReturnArgs} args - Arguments to update many Products.
   * @example
   * // Update many Products
   * const products = await prisma.products.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Products and only return the `id`
   * const productsWithIdOnly = await prisma.products.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends productsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, productsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Products.
   * @param {productsUpsertArgs} args - Arguments to update or create a Products.
   * @example
   * // Update or create a Products
   * const products = await prisma.products.upsert({
   *   create: {
   *     // ... data to create a Products
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Products we want to update
   *   }
   * })
   */
  upsert<T extends productsUpsertArgs>(args: Prisma.SelectSubset<T, productsUpsertArgs<ExtArgs>>): Prisma.Prisma__productsClient<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productsCountArgs} args - Arguments to filter Products to count.
   * @example
   * // Count the number of Products
   * const count = await prisma.products.count({
   *   where: {
   *     // ... the filter for the Products we want to count
   *   }
   * })
  **/
  count<T extends productsCountArgs>(
    args?: Prisma.Subset<T, productsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductsAggregateArgs>(args: Prisma.Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

  /**
   * Group by Products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {productsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends productsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: productsGroupByArgs['orderBy'] }
      : { orderBy?: productsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the products model
 */
readonly fields: productsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for products.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__productsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product_sales<T extends Prisma.products$product_salesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.products$product_salesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  brands<T extends Prisma.products$brandsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.products$brandsArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  categories<T extends Prisma.products$categoriesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.products$categoriesArgs<ExtArgs>>): Prisma.Prisma__categoriesClient<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  sub_brands<T extends Prisma.products$sub_brandsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.products$sub_brandsArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the products model
 */
export interface productsFieldRefs {
  readonly id: Prisma.FieldRef<"products", 'Int'>
  readonly brand_id: Prisma.FieldRef<"products", 'Int'>
  readonly sub_brand_id: Prisma.FieldRef<"products", 'Int'>
  readonly category_id: Prisma.FieldRef<"products", 'Int'>
  readonly name: Prisma.FieldRef<"products", 'String'>
  readonly pos_uuid: Prisma.FieldRef<"products", 'String'>
  readonly deleted_at: Prisma.FieldRef<"products", 'DateTime'>
}
    

// Custom InputTypes
/**
 * products findUnique
 */
export type productsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  /**
   * Filter, which products to fetch.
   */
  where: Prisma.productsWhereUniqueInput
}

/**
 * products findUniqueOrThrow
 */
export type productsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  /**
   * Filter, which products to fetch.
   */
  where: Prisma.productsWhereUniqueInput
}

/**
 * products findFirst
 */
export type productsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  /**
   * Filter, which products to fetch.
   */
  where?: Prisma.productsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of products to fetch.
   */
  orderBy?: Prisma.productsOrderByWithRelationInput | Prisma.productsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for products.
   */
  cursor?: Prisma.productsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of products.
   */
  distinct?: Prisma.ProductsScalarFieldEnum | Prisma.ProductsScalarFieldEnum[]
}

/**
 * products findFirstOrThrow
 */
export type productsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  /**
   * Filter, which products to fetch.
   */
  where?: Prisma.productsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of products to fetch.
   */
  orderBy?: Prisma.productsOrderByWithRelationInput | Prisma.productsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for products.
   */
  cursor?: Prisma.productsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of products.
   */
  distinct?: Prisma.ProductsScalarFieldEnum | Prisma.ProductsScalarFieldEnum[]
}

/**
 * products findMany
 */
export type productsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  /**
   * Filter, which products to fetch.
   */
  where?: Prisma.productsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of products to fetch.
   */
  orderBy?: Prisma.productsOrderByWithRelationInput | Prisma.productsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing products.
   */
  cursor?: Prisma.productsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` products.
   */
  skip?: number
  distinct?: Prisma.ProductsScalarFieldEnum | Prisma.ProductsScalarFieldEnum[]
}

/**
 * products create
 */
export type productsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  /**
   * The data needed to create a products.
   */
  data: Prisma.XOR<Prisma.productsCreateInput, Prisma.productsUncheckedCreateInput>
}

/**
 * products createMany
 */
export type productsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many products.
   */
  data: Prisma.productsCreateManyInput | Prisma.productsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * products createManyAndReturn
 */
export type productsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * The data used to create many products.
   */
  data: Prisma.productsCreateManyInput | Prisma.productsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * products update
 */
export type productsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  /**
   * The data needed to update a products.
   */
  data: Prisma.XOR<Prisma.productsUpdateInput, Prisma.productsUncheckedUpdateInput>
  /**
   * Choose, which products to update.
   */
  where: Prisma.productsWhereUniqueInput
}

/**
 * products updateMany
 */
export type productsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update products.
   */
  data: Prisma.XOR<Prisma.productsUpdateManyMutationInput, Prisma.productsUncheckedUpdateManyInput>
  /**
   * Filter which products to update
   */
  where?: Prisma.productsWhereInput
  /**
   * Limit how many products to update.
   */
  limit?: number
}

/**
 * products updateManyAndReturn
 */
export type productsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * The data used to update products.
   */
  data: Prisma.XOR<Prisma.productsUpdateManyMutationInput, Prisma.productsUncheckedUpdateManyInput>
  /**
   * Filter which products to update
   */
  where?: Prisma.productsWhereInput
  /**
   * Limit how many products to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * products upsert
 */
export type productsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  /**
   * The filter to search for the products to update in case it exists.
   */
  where: Prisma.productsWhereUniqueInput
  /**
   * In case the products found by the `where` argument doesn't exist, create a new products with this data.
   */
  create: Prisma.XOR<Prisma.productsCreateInput, Prisma.productsUncheckedCreateInput>
  /**
   * In case the products was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.productsUpdateInput, Prisma.productsUncheckedUpdateInput>
}

/**
 * products delete
 */
export type productsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  /**
   * Filter which products to delete.
   */
  where: Prisma.productsWhereUniqueInput
}

/**
 * products deleteMany
 */
export type productsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which products to delete
   */
  where?: Prisma.productsWhereInput
  /**
   * Limit how many products to delete.
   */
  limit?: number
}

/**
 * products.product_sales
 */
export type products$product_salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
  where?: Prisma.product_salesWhereInput
  orderBy?: Prisma.product_salesOrderByWithRelationInput | Prisma.product_salesOrderByWithRelationInput[]
  cursor?: Prisma.product_salesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Product_salesScalarFieldEnum | Prisma.Product_salesScalarFieldEnum[]
}

/**
 * products.brands
 */
export type products$brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  where?: Prisma.brandsWhereInput
}

/**
 * products.categories
 */
export type products$categoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  where?: Prisma.categoriesWhereInput
}

/**
 * products.sub_brands
 */
export type products$sub_brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  where?: Prisma.sub_brandsWhereInput
}

/**
 * products without action
 */
export type productsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
}
