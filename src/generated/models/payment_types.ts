
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `payment_types` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model payment_types
 * 
 */
export type payment_typesModel = runtime.Types.Result.DefaultSelection<Prisma.$payment_typesPayload>

export type AggregatePayment_types = {
  _count: Payment_typesCountAggregateOutputType | null
  _avg: Payment_typesAvgAggregateOutputType | null
  _sum: Payment_typesSumAggregateOutputType | null
  _min: Payment_typesMinAggregateOutputType | null
  _max: Payment_typesMaxAggregateOutputType | null
}

export type Payment_typesAvgAggregateOutputType = {
  id: number | null
  brand_id: number | null
}

export type Payment_typesSumAggregateOutputType = {
  id: number | null
  brand_id: number | null
}

export type Payment_typesMinAggregateOutputType = {
  id: number | null
  brand_id: number | null
  description: string | null
}

export type Payment_typesMaxAggregateOutputType = {
  id: number | null
  brand_id: number | null
  description: string | null
}

export type Payment_typesCountAggregateOutputType = {
  id: number
  brand_id: number
  description: number
  _all: number
}


export type Payment_typesAvgAggregateInputType = {
  id?: true
  brand_id?: true
}

export type Payment_typesSumAggregateInputType = {
  id?: true
  brand_id?: true
}

export type Payment_typesMinAggregateInputType = {
  id?: true
  brand_id?: true
  description?: true
}

export type Payment_typesMaxAggregateInputType = {
  id?: true
  brand_id?: true
  description?: true
}

export type Payment_typesCountAggregateInputType = {
  id?: true
  brand_id?: true
  description?: true
  _all?: true
}

export type Payment_typesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which payment_types to aggregate.
   */
  where?: Prisma.payment_typesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payment_types to fetch.
   */
  orderBy?: Prisma.payment_typesOrderByWithRelationInput | Prisma.payment_typesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.payment_typesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payment_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payment_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned payment_types
  **/
  _count?: true | Payment_typesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Payment_typesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Payment_typesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Payment_typesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Payment_typesMaxAggregateInputType
}

export type GetPayment_typesAggregateType<T extends Payment_typesAggregateArgs> = {
      [P in keyof T & keyof AggregatePayment_types]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePayment_types[P]>
    : Prisma.GetScalarType<T[P], AggregatePayment_types[P]>
}




export type payment_typesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.payment_typesWhereInput
  orderBy?: Prisma.payment_typesOrderByWithAggregationInput | Prisma.payment_typesOrderByWithAggregationInput[]
  by: Prisma.Payment_typesScalarFieldEnum[] | Prisma.Payment_typesScalarFieldEnum
  having?: Prisma.payment_typesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Payment_typesCountAggregateInputType | true
  _avg?: Payment_typesAvgAggregateInputType
  _sum?: Payment_typesSumAggregateInputType
  _min?: Payment_typesMinAggregateInputType
  _max?: Payment_typesMaxAggregateInputType
}

export type Payment_typesGroupByOutputType = {
  id: number
  brand_id: number | null
  description: string
  _count: Payment_typesCountAggregateOutputType | null
  _avg: Payment_typesAvgAggregateOutputType | null
  _sum: Payment_typesSumAggregateOutputType | null
  _min: Payment_typesMinAggregateOutputType | null
  _max: Payment_typesMaxAggregateOutputType | null
}

type GetPayment_typesGroupByPayload<T extends payment_typesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Payment_typesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Payment_typesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Payment_typesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Payment_typesGroupByOutputType[P]>
      }
    >
  >



export type payment_typesWhereInput = {
  AND?: Prisma.payment_typesWhereInput | Prisma.payment_typesWhereInput[]
  OR?: Prisma.payment_typesWhereInput[]
  NOT?: Prisma.payment_typesWhereInput | Prisma.payment_typesWhereInput[]
  id?: Prisma.IntFilter<"payment_types"> | number
  brand_id?: Prisma.IntNullableFilter<"payment_types"> | number | null
  description?: Prisma.StringFilter<"payment_types"> | string
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
  payments?: Prisma.PaymentsListRelationFilter
}

export type payment_typesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrder
  brands?: Prisma.brandsOrderByWithRelationInput
  payments?: Prisma.paymentsOrderByRelationAggregateInput
}

export type payment_typesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.payment_typesWhereInput | Prisma.payment_typesWhereInput[]
  OR?: Prisma.payment_typesWhereInput[]
  NOT?: Prisma.payment_typesWhereInput | Prisma.payment_typesWhereInput[]
  brand_id?: Prisma.IntNullableFilter<"payment_types"> | number | null
  description?: Prisma.StringFilter<"payment_types"> | string
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
  payments?: Prisma.PaymentsListRelationFilter
}, "id">

export type payment_typesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrder
  _count?: Prisma.payment_typesCountOrderByAggregateInput
  _avg?: Prisma.payment_typesAvgOrderByAggregateInput
  _max?: Prisma.payment_typesMaxOrderByAggregateInput
  _min?: Prisma.payment_typesMinOrderByAggregateInput
  _sum?: Prisma.payment_typesSumOrderByAggregateInput
}

export type payment_typesScalarWhereWithAggregatesInput = {
  AND?: Prisma.payment_typesScalarWhereWithAggregatesInput | Prisma.payment_typesScalarWhereWithAggregatesInput[]
  OR?: Prisma.payment_typesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.payment_typesScalarWhereWithAggregatesInput | Prisma.payment_typesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"payment_types"> | number
  brand_id?: Prisma.IntNullableWithAggregatesFilter<"payment_types"> | number | null
  description?: Prisma.StringWithAggregatesFilter<"payment_types"> | string
}

export type payment_typesCreateInput = {
  description: string
  brands?: Prisma.brandsCreateNestedOneWithoutPayment_typesInput
  payments?: Prisma.paymentsCreateNestedManyWithoutPayment_typesInput
}

export type payment_typesUncheckedCreateInput = {
  id?: number
  brand_id?: number | null
  description: string
  payments?: Prisma.paymentsUncheckedCreateNestedManyWithoutPayment_typesInput
}

export type payment_typesUpdateInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  brands?: Prisma.brandsUpdateOneWithoutPayment_typesNestedInput
  payments?: Prisma.paymentsUpdateManyWithoutPayment_typesNestedInput
}

export type payment_typesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.paymentsUncheckedUpdateManyWithoutPayment_typesNestedInput
}

export type payment_typesCreateManyInput = {
  id?: number
  brand_id?: number | null
  description: string
}

export type payment_typesUpdateManyMutationInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type payment_typesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type Payment_typesListRelationFilter = {
  every?: Prisma.payment_typesWhereInput
  some?: Prisma.payment_typesWhereInput
  none?: Prisma.payment_typesWhereInput
}

export type payment_typesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type payment_typesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type payment_typesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
}

export type payment_typesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type payment_typesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type payment_typesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
}

export type Payment_typesNullableScalarRelationFilter = {
  is?: Prisma.payment_typesWhereInput | null
  isNot?: Prisma.payment_typesWhereInput | null
}

export type payment_typesCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.payment_typesCreateWithoutBrandsInput, Prisma.payment_typesUncheckedCreateWithoutBrandsInput> | Prisma.payment_typesCreateWithoutBrandsInput[] | Prisma.payment_typesUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.payment_typesCreateOrConnectWithoutBrandsInput | Prisma.payment_typesCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.payment_typesCreateManyBrandsInputEnvelope
  connect?: Prisma.payment_typesWhereUniqueInput | Prisma.payment_typesWhereUniqueInput[]
}

export type payment_typesUncheckedCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.payment_typesCreateWithoutBrandsInput, Prisma.payment_typesUncheckedCreateWithoutBrandsInput> | Prisma.payment_typesCreateWithoutBrandsInput[] | Prisma.payment_typesUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.payment_typesCreateOrConnectWithoutBrandsInput | Prisma.payment_typesCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.payment_typesCreateManyBrandsInputEnvelope
  connect?: Prisma.payment_typesWhereUniqueInput | Prisma.payment_typesWhereUniqueInput[]
}

export type payment_typesUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.payment_typesCreateWithoutBrandsInput, Prisma.payment_typesUncheckedCreateWithoutBrandsInput> | Prisma.payment_typesCreateWithoutBrandsInput[] | Prisma.payment_typesUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.payment_typesCreateOrConnectWithoutBrandsInput | Prisma.payment_typesCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.payment_typesUpsertWithWhereUniqueWithoutBrandsInput | Prisma.payment_typesUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.payment_typesCreateManyBrandsInputEnvelope
  set?: Prisma.payment_typesWhereUniqueInput | Prisma.payment_typesWhereUniqueInput[]
  disconnect?: Prisma.payment_typesWhereUniqueInput | Prisma.payment_typesWhereUniqueInput[]
  delete?: Prisma.payment_typesWhereUniqueInput | Prisma.payment_typesWhereUniqueInput[]
  connect?: Prisma.payment_typesWhereUniqueInput | Prisma.payment_typesWhereUniqueInput[]
  update?: Prisma.payment_typesUpdateWithWhereUniqueWithoutBrandsInput | Prisma.payment_typesUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.payment_typesUpdateManyWithWhereWithoutBrandsInput | Prisma.payment_typesUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.payment_typesScalarWhereInput | Prisma.payment_typesScalarWhereInput[]
}

export type payment_typesUncheckedUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.payment_typesCreateWithoutBrandsInput, Prisma.payment_typesUncheckedCreateWithoutBrandsInput> | Prisma.payment_typesCreateWithoutBrandsInput[] | Prisma.payment_typesUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.payment_typesCreateOrConnectWithoutBrandsInput | Prisma.payment_typesCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.payment_typesUpsertWithWhereUniqueWithoutBrandsInput | Prisma.payment_typesUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.payment_typesCreateManyBrandsInputEnvelope
  set?: Prisma.payment_typesWhereUniqueInput | Prisma.payment_typesWhereUniqueInput[]
  disconnect?: Prisma.payment_typesWhereUniqueInput | Prisma.payment_typesWhereUniqueInput[]
  delete?: Prisma.payment_typesWhereUniqueInput | Prisma.payment_typesWhereUniqueInput[]
  connect?: Prisma.payment_typesWhereUniqueInput | Prisma.payment_typesWhereUniqueInput[]
  update?: Prisma.payment_typesUpdateWithWhereUniqueWithoutBrandsInput | Prisma.payment_typesUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.payment_typesUpdateManyWithWhereWithoutBrandsInput | Prisma.payment_typesUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.payment_typesScalarWhereInput | Prisma.payment_typesScalarWhereInput[]
}

export type payment_typesCreateNestedOneWithoutPaymentsInput = {
  create?: Prisma.XOR<Prisma.payment_typesCreateWithoutPaymentsInput, Prisma.payment_typesUncheckedCreateWithoutPaymentsInput>
  connectOrCreate?: Prisma.payment_typesCreateOrConnectWithoutPaymentsInput
  connect?: Prisma.payment_typesWhereUniqueInput
}

export type payment_typesUpdateOneWithoutPaymentsNestedInput = {
  create?: Prisma.XOR<Prisma.payment_typesCreateWithoutPaymentsInput, Prisma.payment_typesUncheckedCreateWithoutPaymentsInput>
  connectOrCreate?: Prisma.payment_typesCreateOrConnectWithoutPaymentsInput
  upsert?: Prisma.payment_typesUpsertWithoutPaymentsInput
  disconnect?: Prisma.payment_typesWhereInput | boolean
  delete?: Prisma.payment_typesWhereInput | boolean
  connect?: Prisma.payment_typesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.payment_typesUpdateToOneWithWhereWithoutPaymentsInput, Prisma.payment_typesUpdateWithoutPaymentsInput>, Prisma.payment_typesUncheckedUpdateWithoutPaymentsInput>
}

export type payment_typesCreateWithoutBrandsInput = {
  description: string
  payments?: Prisma.paymentsCreateNestedManyWithoutPayment_typesInput
}

export type payment_typesUncheckedCreateWithoutBrandsInput = {
  id?: number
  description: string
  payments?: Prisma.paymentsUncheckedCreateNestedManyWithoutPayment_typesInput
}

export type payment_typesCreateOrConnectWithoutBrandsInput = {
  where: Prisma.payment_typesWhereUniqueInput
  create: Prisma.XOR<Prisma.payment_typesCreateWithoutBrandsInput, Prisma.payment_typesUncheckedCreateWithoutBrandsInput>
}

export type payment_typesCreateManyBrandsInputEnvelope = {
  data: Prisma.payment_typesCreateManyBrandsInput | Prisma.payment_typesCreateManyBrandsInput[]
  skipDuplicates?: boolean
}

export type payment_typesUpsertWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.payment_typesWhereUniqueInput
  update: Prisma.XOR<Prisma.payment_typesUpdateWithoutBrandsInput, Prisma.payment_typesUncheckedUpdateWithoutBrandsInput>
  create: Prisma.XOR<Prisma.payment_typesCreateWithoutBrandsInput, Prisma.payment_typesUncheckedCreateWithoutBrandsInput>
}

export type payment_typesUpdateWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.payment_typesWhereUniqueInput
  data: Prisma.XOR<Prisma.payment_typesUpdateWithoutBrandsInput, Prisma.payment_typesUncheckedUpdateWithoutBrandsInput>
}

export type payment_typesUpdateManyWithWhereWithoutBrandsInput = {
  where: Prisma.payment_typesScalarWhereInput
  data: Prisma.XOR<Prisma.payment_typesUpdateManyMutationInput, Prisma.payment_typesUncheckedUpdateManyWithoutBrandsInput>
}

export type payment_typesScalarWhereInput = {
  AND?: Prisma.payment_typesScalarWhereInput | Prisma.payment_typesScalarWhereInput[]
  OR?: Prisma.payment_typesScalarWhereInput[]
  NOT?: Prisma.payment_typesScalarWhereInput | Prisma.payment_typesScalarWhereInput[]
  id?: Prisma.IntFilter<"payment_types"> | number
  brand_id?: Prisma.IntNullableFilter<"payment_types"> | number | null
  description?: Prisma.StringFilter<"payment_types"> | string
}

export type payment_typesCreateWithoutPaymentsInput = {
  description: string
  brands?: Prisma.brandsCreateNestedOneWithoutPayment_typesInput
}

export type payment_typesUncheckedCreateWithoutPaymentsInput = {
  id?: number
  brand_id?: number | null
  description: string
}

export type payment_typesCreateOrConnectWithoutPaymentsInput = {
  where: Prisma.payment_typesWhereUniqueInput
  create: Prisma.XOR<Prisma.payment_typesCreateWithoutPaymentsInput, Prisma.payment_typesUncheckedCreateWithoutPaymentsInput>
}

export type payment_typesUpsertWithoutPaymentsInput = {
  update: Prisma.XOR<Prisma.payment_typesUpdateWithoutPaymentsInput, Prisma.payment_typesUncheckedUpdateWithoutPaymentsInput>
  create: Prisma.XOR<Prisma.payment_typesCreateWithoutPaymentsInput, Prisma.payment_typesUncheckedCreateWithoutPaymentsInput>
  where?: Prisma.payment_typesWhereInput
}

export type payment_typesUpdateToOneWithWhereWithoutPaymentsInput = {
  where?: Prisma.payment_typesWhereInput
  data: Prisma.XOR<Prisma.payment_typesUpdateWithoutPaymentsInput, Prisma.payment_typesUncheckedUpdateWithoutPaymentsInput>
}

export type payment_typesUpdateWithoutPaymentsInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  brands?: Prisma.brandsUpdateOneWithoutPayment_typesNestedInput
}

export type payment_typesUncheckedUpdateWithoutPaymentsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type payment_typesCreateManyBrandsInput = {
  id?: number
  description: string
}

export type payment_typesUpdateWithoutBrandsInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.paymentsUpdateManyWithoutPayment_typesNestedInput
}

export type payment_typesUncheckedUpdateWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.paymentsUncheckedUpdateManyWithoutPayment_typesNestedInput
}

export type payment_typesUncheckedUpdateManyWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type Payment_typesCountOutputType
 */

export type Payment_typesCountOutputType = {
  payments: number
}

export type Payment_typesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payments?: boolean | Payment_typesCountOutputTypeCountPaymentsArgs
}

/**
 * Payment_typesCountOutputType without action
 */
export type Payment_typesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Payment_typesCountOutputType
   */
  select?: Prisma.Payment_typesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Payment_typesCountOutputType without action
 */
export type Payment_typesCountOutputTypeCountPaymentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.paymentsWhereInput
}


export type payment_typesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  description?: boolean
  brands?: boolean | Prisma.payment_types$brandsArgs<ExtArgs>
  payments?: boolean | Prisma.payment_types$paymentsArgs<ExtArgs>
  _count?: boolean | Prisma.Payment_typesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["payment_types"]>

export type payment_typesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  description?: boolean
  brands?: boolean | Prisma.payment_types$brandsArgs<ExtArgs>
}, ExtArgs["result"]["payment_types"]>

export type payment_typesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  description?: boolean
  brands?: boolean | Prisma.payment_types$brandsArgs<ExtArgs>
}, ExtArgs["result"]["payment_types"]>

export type payment_typesSelectScalar = {
  id?: boolean
  brand_id?: boolean
  description?: boolean
}

export type payment_typesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "brand_id" | "description", ExtArgs["result"]["payment_types"]>
export type payment_typesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.payment_types$brandsArgs<ExtArgs>
  payments?: boolean | Prisma.payment_types$paymentsArgs<ExtArgs>
  _count?: boolean | Prisma.Payment_typesCountOutputTypeDefaultArgs<ExtArgs>
}
export type payment_typesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.payment_types$brandsArgs<ExtArgs>
}
export type payment_typesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.payment_types$brandsArgs<ExtArgs>
}

export type $payment_typesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "payment_types"
  objects: {
    brands: Prisma.$brandsPayload<ExtArgs> | null
    payments: Prisma.$paymentsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    brand_id: number | null
    description: string
  }, ExtArgs["result"]["payment_types"]>
  composites: {}
}

export type payment_typesGetPayload<S extends boolean | null | undefined | payment_typesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$payment_typesPayload, S>

export type payment_typesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<payment_typesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Payment_typesCountAggregateInputType | true
  }

export interface payment_typesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment_types'], meta: { name: 'payment_types' } }
  /**
   * Find zero or one Payment_types that matches the filter.
   * @param {payment_typesFindUniqueArgs} args - Arguments to find a Payment_types
   * @example
   * // Get one Payment_types
   * const payment_types = await prisma.payment_types.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends payment_typesFindUniqueArgs>(args: Prisma.SelectSubset<T, payment_typesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__payment_typesClient<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Payment_types that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {payment_typesFindUniqueOrThrowArgs} args - Arguments to find a Payment_types
   * @example
   * // Get one Payment_types
   * const payment_types = await prisma.payment_types.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends payment_typesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, payment_typesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__payment_typesClient<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Payment_types that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_typesFindFirstArgs} args - Arguments to find a Payment_types
   * @example
   * // Get one Payment_types
   * const payment_types = await prisma.payment_types.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends payment_typesFindFirstArgs>(args?: Prisma.SelectSubset<T, payment_typesFindFirstArgs<ExtArgs>>): Prisma.Prisma__payment_typesClient<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Payment_types that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_typesFindFirstOrThrowArgs} args - Arguments to find a Payment_types
   * @example
   * // Get one Payment_types
   * const payment_types = await prisma.payment_types.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends payment_typesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, payment_typesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__payment_typesClient<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Payment_types that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_typesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Payment_types
   * const payment_types = await prisma.payment_types.findMany()
   * 
   * // Get first 10 Payment_types
   * const payment_types = await prisma.payment_types.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const payment_typesWithIdOnly = await prisma.payment_types.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends payment_typesFindManyArgs>(args?: Prisma.SelectSubset<T, payment_typesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Payment_types.
   * @param {payment_typesCreateArgs} args - Arguments to create a Payment_types.
   * @example
   * // Create one Payment_types
   * const Payment_types = await prisma.payment_types.create({
   *   data: {
   *     // ... data to create a Payment_types
   *   }
   * })
   * 
   */
  create<T extends payment_typesCreateArgs>(args: Prisma.SelectSubset<T, payment_typesCreateArgs<ExtArgs>>): Prisma.Prisma__payment_typesClient<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Payment_types.
   * @param {payment_typesCreateManyArgs} args - Arguments to create many Payment_types.
   * @example
   * // Create many Payment_types
   * const payment_types = await prisma.payment_types.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends payment_typesCreateManyArgs>(args?: Prisma.SelectSubset<T, payment_typesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Payment_types and returns the data saved in the database.
   * @param {payment_typesCreateManyAndReturnArgs} args - Arguments to create many Payment_types.
   * @example
   * // Create many Payment_types
   * const payment_types = await prisma.payment_types.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Payment_types and only return the `id`
   * const payment_typesWithIdOnly = await prisma.payment_types.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends payment_typesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, payment_typesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Payment_types.
   * @param {payment_typesDeleteArgs} args - Arguments to delete one Payment_types.
   * @example
   * // Delete one Payment_types
   * const Payment_types = await prisma.payment_types.delete({
   *   where: {
   *     // ... filter to delete one Payment_types
   *   }
   * })
   * 
   */
  delete<T extends payment_typesDeleteArgs>(args: Prisma.SelectSubset<T, payment_typesDeleteArgs<ExtArgs>>): Prisma.Prisma__payment_typesClient<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Payment_types.
   * @param {payment_typesUpdateArgs} args - Arguments to update one Payment_types.
   * @example
   * // Update one Payment_types
   * const payment_types = await prisma.payment_types.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends payment_typesUpdateArgs>(args: Prisma.SelectSubset<T, payment_typesUpdateArgs<ExtArgs>>): Prisma.Prisma__payment_typesClient<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Payment_types.
   * @param {payment_typesDeleteManyArgs} args - Arguments to filter Payment_types to delete.
   * @example
   * // Delete a few Payment_types
   * const { count } = await prisma.payment_types.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends payment_typesDeleteManyArgs>(args?: Prisma.SelectSubset<T, payment_typesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Payment_types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_typesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Payment_types
   * const payment_types = await prisma.payment_types.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends payment_typesUpdateManyArgs>(args: Prisma.SelectSubset<T, payment_typesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Payment_types and returns the data updated in the database.
   * @param {payment_typesUpdateManyAndReturnArgs} args - Arguments to update many Payment_types.
   * @example
   * // Update many Payment_types
   * const payment_types = await prisma.payment_types.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Payment_types and only return the `id`
   * const payment_typesWithIdOnly = await prisma.payment_types.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends payment_typesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, payment_typesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Payment_types.
   * @param {payment_typesUpsertArgs} args - Arguments to update or create a Payment_types.
   * @example
   * // Update or create a Payment_types
   * const payment_types = await prisma.payment_types.upsert({
   *   create: {
   *     // ... data to create a Payment_types
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Payment_types we want to update
   *   }
   * })
   */
  upsert<T extends payment_typesUpsertArgs>(args: Prisma.SelectSubset<T, payment_typesUpsertArgs<ExtArgs>>): Prisma.Prisma__payment_typesClient<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Payment_types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_typesCountArgs} args - Arguments to filter Payment_types to count.
   * @example
   * // Count the number of Payment_types
   * const count = await prisma.payment_types.count({
   *   where: {
   *     // ... the filter for the Payment_types we want to count
   *   }
   * })
  **/
  count<T extends payment_typesCountArgs>(
    args?: Prisma.Subset<T, payment_typesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Payment_typesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Payment_types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Payment_typesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Payment_typesAggregateArgs>(args: Prisma.Subset<T, Payment_typesAggregateArgs>): Prisma.PrismaPromise<GetPayment_typesAggregateType<T>>

  /**
   * Group by Payment_types.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {payment_typesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends payment_typesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: payment_typesGroupByArgs['orderBy'] }
      : { orderBy?: payment_typesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, payment_typesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayment_typesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the payment_types model
 */
readonly fields: payment_typesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for payment_types.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__payment_typesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  brands<T extends Prisma.payment_types$brandsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.payment_types$brandsArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  payments<T extends Prisma.payment_types$paymentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.payment_types$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$paymentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the payment_types model
 */
export interface payment_typesFieldRefs {
  readonly id: Prisma.FieldRef<"payment_types", 'Int'>
  readonly brand_id: Prisma.FieldRef<"payment_types", 'Int'>
  readonly description: Prisma.FieldRef<"payment_types", 'String'>
}
    

// Custom InputTypes
/**
 * payment_types findUnique
 */
export type payment_typesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
  /**
   * Filter, which payment_types to fetch.
   */
  where: Prisma.payment_typesWhereUniqueInput
}

/**
 * payment_types findUniqueOrThrow
 */
export type payment_typesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
  /**
   * Filter, which payment_types to fetch.
   */
  where: Prisma.payment_typesWhereUniqueInput
}

/**
 * payment_types findFirst
 */
export type payment_typesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
  /**
   * Filter, which payment_types to fetch.
   */
  where?: Prisma.payment_typesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payment_types to fetch.
   */
  orderBy?: Prisma.payment_typesOrderByWithRelationInput | Prisma.payment_typesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for payment_types.
   */
  cursor?: Prisma.payment_typesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payment_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payment_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of payment_types.
   */
  distinct?: Prisma.Payment_typesScalarFieldEnum | Prisma.Payment_typesScalarFieldEnum[]
}

/**
 * payment_types findFirstOrThrow
 */
export type payment_typesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
  /**
   * Filter, which payment_types to fetch.
   */
  where?: Prisma.payment_typesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payment_types to fetch.
   */
  orderBy?: Prisma.payment_typesOrderByWithRelationInput | Prisma.payment_typesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for payment_types.
   */
  cursor?: Prisma.payment_typesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payment_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payment_types.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of payment_types.
   */
  distinct?: Prisma.Payment_typesScalarFieldEnum | Prisma.Payment_typesScalarFieldEnum[]
}

/**
 * payment_types findMany
 */
export type payment_typesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
  /**
   * Filter, which payment_types to fetch.
   */
  where?: Prisma.payment_typesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of payment_types to fetch.
   */
  orderBy?: Prisma.payment_typesOrderByWithRelationInput | Prisma.payment_typesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing payment_types.
   */
  cursor?: Prisma.payment_typesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` payment_types from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` payment_types.
   */
  skip?: number
  distinct?: Prisma.Payment_typesScalarFieldEnum | Prisma.Payment_typesScalarFieldEnum[]
}

/**
 * payment_types create
 */
export type payment_typesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
  /**
   * The data needed to create a payment_types.
   */
  data: Prisma.XOR<Prisma.payment_typesCreateInput, Prisma.payment_typesUncheckedCreateInput>
}

/**
 * payment_types createMany
 */
export type payment_typesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many payment_types.
   */
  data: Prisma.payment_typesCreateManyInput | Prisma.payment_typesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * payment_types createManyAndReturn
 */
export type payment_typesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * The data used to create many payment_types.
   */
  data: Prisma.payment_typesCreateManyInput | Prisma.payment_typesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * payment_types update
 */
export type payment_typesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
  /**
   * The data needed to update a payment_types.
   */
  data: Prisma.XOR<Prisma.payment_typesUpdateInput, Prisma.payment_typesUncheckedUpdateInput>
  /**
   * Choose, which payment_types to update.
   */
  where: Prisma.payment_typesWhereUniqueInput
}

/**
 * payment_types updateMany
 */
export type payment_typesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update payment_types.
   */
  data: Prisma.XOR<Prisma.payment_typesUpdateManyMutationInput, Prisma.payment_typesUncheckedUpdateManyInput>
  /**
   * Filter which payment_types to update
   */
  where?: Prisma.payment_typesWhereInput
  /**
   * Limit how many payment_types to update.
   */
  limit?: number
}

/**
 * payment_types updateManyAndReturn
 */
export type payment_typesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * The data used to update payment_types.
   */
  data: Prisma.XOR<Prisma.payment_typesUpdateManyMutationInput, Prisma.payment_typesUncheckedUpdateManyInput>
  /**
   * Filter which payment_types to update
   */
  where?: Prisma.payment_typesWhereInput
  /**
   * Limit how many payment_types to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * payment_types upsert
 */
export type payment_typesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
  /**
   * The filter to search for the payment_types to update in case it exists.
   */
  where: Prisma.payment_typesWhereUniqueInput
  /**
   * In case the payment_types found by the `where` argument doesn't exist, create a new payment_types with this data.
   */
  create: Prisma.XOR<Prisma.payment_typesCreateInput, Prisma.payment_typesUncheckedCreateInput>
  /**
   * In case the payment_types was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.payment_typesUpdateInput, Prisma.payment_typesUncheckedUpdateInput>
}

/**
 * payment_types delete
 */
export type payment_typesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
  /**
   * Filter which payment_types to delete.
   */
  where: Prisma.payment_typesWhereUniqueInput
}

/**
 * payment_types deleteMany
 */
export type payment_typesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which payment_types to delete
   */
  where?: Prisma.payment_typesWhereInput
  /**
   * Limit how many payment_types to delete.
   */
  limit?: number
}

/**
 * payment_types.brands
 */
export type payment_types$brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  where?: Prisma.brandsWhereInput
}

/**
 * payment_types.payments
 */
export type payment_types$paymentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payments
   */
  select?: Prisma.paymentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payments
   */
  omit?: Prisma.paymentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.paymentsInclude<ExtArgs> | null
  where?: Prisma.paymentsWhereInput
  orderBy?: Prisma.paymentsOrderByWithRelationInput | Prisma.paymentsOrderByWithRelationInput[]
  cursor?: Prisma.paymentsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PaymentsScalarFieldEnum | Prisma.PaymentsScalarFieldEnum[]
}

/**
 * payment_types without action
 */
export type payment_typesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
}
