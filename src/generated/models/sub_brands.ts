
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `sub_brands` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model sub_brands
 * 
 */
export type sub_brandsModel = runtime.Types.Result.DefaultSelection<Prisma.$sub_brandsPayload>

export type AggregateSub_brands = {
  _count: Sub_brandsCountAggregateOutputType | null
  _avg: Sub_brandsAvgAggregateOutputType | null
  _sum: Sub_brandsSumAggregateOutputType | null
  _min: Sub_brandsMinAggregateOutputType | null
  _max: Sub_brandsMaxAggregateOutputType | null
}

export type Sub_brandsAvgAggregateOutputType = {
  id: number | null
  brand_id: number | null
}

export type Sub_brandsSumAggregateOutputType = {
  id: number | null
  brand_id: number | null
}

export type Sub_brandsMinAggregateOutputType = {
  id: number | null
  brand_id: number | null
  name: string | null
  created_at: Date | null
}

export type Sub_brandsMaxAggregateOutputType = {
  id: number | null
  brand_id: number | null
  name: string | null
  created_at: Date | null
}

export type Sub_brandsCountAggregateOutputType = {
  id: number
  brand_id: number
  name: number
  created_at: number
  _all: number
}


export type Sub_brandsAvgAggregateInputType = {
  id?: true
  brand_id?: true
}

export type Sub_brandsSumAggregateInputType = {
  id?: true
  brand_id?: true
}

export type Sub_brandsMinAggregateInputType = {
  id?: true
  brand_id?: true
  name?: true
  created_at?: true
}

export type Sub_brandsMaxAggregateInputType = {
  id?: true
  brand_id?: true
  name?: true
  created_at?: true
}

export type Sub_brandsCountAggregateInputType = {
  id?: true
  brand_id?: true
  name?: true
  created_at?: true
  _all?: true
}

export type Sub_brandsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which sub_brands to aggregate.
   */
  where?: Prisma.sub_brandsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of sub_brands to fetch.
   */
  orderBy?: Prisma.sub_brandsOrderByWithRelationInput | Prisma.sub_brandsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.sub_brandsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` sub_brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` sub_brands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned sub_brands
  **/
  _count?: true | Sub_brandsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Sub_brandsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Sub_brandsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Sub_brandsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Sub_brandsMaxAggregateInputType
}

export type GetSub_brandsAggregateType<T extends Sub_brandsAggregateArgs> = {
      [P in keyof T & keyof AggregateSub_brands]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSub_brands[P]>
    : Prisma.GetScalarType<T[P], AggregateSub_brands[P]>
}




export type sub_brandsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.sub_brandsWhereInput
  orderBy?: Prisma.sub_brandsOrderByWithAggregationInput | Prisma.sub_brandsOrderByWithAggregationInput[]
  by: Prisma.Sub_brandsScalarFieldEnum[] | Prisma.Sub_brandsScalarFieldEnum
  having?: Prisma.sub_brandsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Sub_brandsCountAggregateInputType | true
  _avg?: Sub_brandsAvgAggregateInputType
  _sum?: Sub_brandsSumAggregateInputType
  _min?: Sub_brandsMinAggregateInputType
  _max?: Sub_brandsMaxAggregateInputType
}

export type Sub_brandsGroupByOutputType = {
  id: number
  brand_id: number | null
  name: string
  created_at: Date | null
  _count: Sub_brandsCountAggregateOutputType | null
  _avg: Sub_brandsAvgAggregateOutputType | null
  _sum: Sub_brandsSumAggregateOutputType | null
  _min: Sub_brandsMinAggregateOutputType | null
  _max: Sub_brandsMaxAggregateOutputType | null
}

type GetSub_brandsGroupByPayload<T extends sub_brandsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Sub_brandsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Sub_brandsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Sub_brandsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Sub_brandsGroupByOutputType[P]>
      }
    >
  >



export type sub_brandsWhereInput = {
  AND?: Prisma.sub_brandsWhereInput | Prisma.sub_brandsWhereInput[]
  OR?: Prisma.sub_brandsWhereInput[]
  NOT?: Prisma.sub_brandsWhereInput | Prisma.sub_brandsWhereInput[]
  id?: Prisma.IntFilter<"sub_brands"> | number
  brand_id?: Prisma.IntNullableFilter<"sub_brands"> | number | null
  name?: Prisma.StringFilter<"sub_brands"> | string
  created_at?: Prisma.DateTimeNullableFilter<"sub_brands"> | Date | string | null
  categories?: Prisma.CategoriesListRelationFilter
  customers?: Prisma.CustomersListRelationFilter
  items?: Prisma.ItemsListRelationFilter
  option_groups?: Prisma.Option_groupsListRelationFilter
  products?: Prisma.ProductsListRelationFilter
  sales?: Prisma.SalesListRelationFilter
  stores?: Prisma.StoresListRelationFilter
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
}

export type sub_brandsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  categories?: Prisma.categoriesOrderByRelationAggregateInput
  customers?: Prisma.customersOrderByRelationAggregateInput
  items?: Prisma.itemsOrderByRelationAggregateInput
  option_groups?: Prisma.option_groupsOrderByRelationAggregateInput
  products?: Prisma.productsOrderByRelationAggregateInput
  sales?: Prisma.salesOrderByRelationAggregateInput
  stores?: Prisma.storesOrderByRelationAggregateInput
  brands?: Prisma.brandsOrderByWithRelationInput
}

export type sub_brandsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.sub_brandsWhereInput | Prisma.sub_brandsWhereInput[]
  OR?: Prisma.sub_brandsWhereInput[]
  NOT?: Prisma.sub_brandsWhereInput | Prisma.sub_brandsWhereInput[]
  brand_id?: Prisma.IntNullableFilter<"sub_brands"> | number | null
  name?: Prisma.StringFilter<"sub_brands"> | string
  created_at?: Prisma.DateTimeNullableFilter<"sub_brands"> | Date | string | null
  categories?: Prisma.CategoriesListRelationFilter
  customers?: Prisma.CustomersListRelationFilter
  items?: Prisma.ItemsListRelationFilter
  option_groups?: Prisma.Option_groupsListRelationFilter
  products?: Prisma.ProductsListRelationFilter
  sales?: Prisma.SalesListRelationFilter
  stores?: Prisma.StoresListRelationFilter
  brands?: Prisma.XOR<Prisma.BrandsNullableScalarRelationFilter, Prisma.brandsWhereInput> | null
}, "id">

export type sub_brandsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.sub_brandsCountOrderByAggregateInput
  _avg?: Prisma.sub_brandsAvgOrderByAggregateInput
  _max?: Prisma.sub_brandsMaxOrderByAggregateInput
  _min?: Prisma.sub_brandsMinOrderByAggregateInput
  _sum?: Prisma.sub_brandsSumOrderByAggregateInput
}

export type sub_brandsScalarWhereWithAggregatesInput = {
  AND?: Prisma.sub_brandsScalarWhereWithAggregatesInput | Prisma.sub_brandsScalarWhereWithAggregatesInput[]
  OR?: Prisma.sub_brandsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.sub_brandsScalarWhereWithAggregatesInput | Prisma.sub_brandsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"sub_brands"> | number
  brand_id?: Prisma.IntNullableWithAggregatesFilter<"sub_brands"> | number | null
  name?: Prisma.StringWithAggregatesFilter<"sub_brands"> | string
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"sub_brands"> | Date | string | null
}

export type sub_brandsCreateInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesCreateNestedManyWithoutSub_brandsInput
  brands?: Prisma.brandsCreateNestedOneWithoutSub_brandsInput
}

export type sub_brandsUncheckedCreateInput = {
  id?: number
  brand_id?: number | null
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersUncheckedCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutSub_brandsInput
}

export type sub_brandsUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutSub_brandsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutSub_brandsNestedInput
}

export type sub_brandsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUncheckedUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUncheckedUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutSub_brandsNestedInput
}

export type sub_brandsCreateManyInput = {
  id?: number
  brand_id?: number | null
  name: string
  created_at?: Date | string | null
}

export type sub_brandsUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type sub_brandsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type Sub_brandsListRelationFilter = {
  every?: Prisma.sub_brandsWhereInput
  some?: Prisma.sub_brandsWhereInput
  none?: Prisma.sub_brandsWhereInput
}

export type sub_brandsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type Sub_brandsNullableScalarRelationFilter = {
  is?: Prisma.sub_brandsWhereInput | null
  isNot?: Prisma.sub_brandsWhereInput | null
}

export type sub_brandsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type sub_brandsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
}

export type sub_brandsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type sub_brandsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type sub_brandsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
}

export type sub_brandsCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutBrandsInput, Prisma.sub_brandsUncheckedCreateWithoutBrandsInput> | Prisma.sub_brandsCreateWithoutBrandsInput[] | Prisma.sub_brandsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutBrandsInput | Prisma.sub_brandsCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.sub_brandsCreateManyBrandsInputEnvelope
  connect?: Prisma.sub_brandsWhereUniqueInput | Prisma.sub_brandsWhereUniqueInput[]
}

export type sub_brandsUncheckedCreateNestedManyWithoutBrandsInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutBrandsInput, Prisma.sub_brandsUncheckedCreateWithoutBrandsInput> | Prisma.sub_brandsCreateWithoutBrandsInput[] | Prisma.sub_brandsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutBrandsInput | Prisma.sub_brandsCreateOrConnectWithoutBrandsInput[]
  createMany?: Prisma.sub_brandsCreateManyBrandsInputEnvelope
  connect?: Prisma.sub_brandsWhereUniqueInput | Prisma.sub_brandsWhereUniqueInput[]
}

export type sub_brandsUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutBrandsInput, Prisma.sub_brandsUncheckedCreateWithoutBrandsInput> | Prisma.sub_brandsCreateWithoutBrandsInput[] | Prisma.sub_brandsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutBrandsInput | Prisma.sub_brandsCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.sub_brandsUpsertWithWhereUniqueWithoutBrandsInput | Prisma.sub_brandsUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.sub_brandsCreateManyBrandsInputEnvelope
  set?: Prisma.sub_brandsWhereUniqueInput | Prisma.sub_brandsWhereUniqueInput[]
  disconnect?: Prisma.sub_brandsWhereUniqueInput | Prisma.sub_brandsWhereUniqueInput[]
  delete?: Prisma.sub_brandsWhereUniqueInput | Prisma.sub_brandsWhereUniqueInput[]
  connect?: Prisma.sub_brandsWhereUniqueInput | Prisma.sub_brandsWhereUniqueInput[]
  update?: Prisma.sub_brandsUpdateWithWhereUniqueWithoutBrandsInput | Prisma.sub_brandsUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.sub_brandsUpdateManyWithWhereWithoutBrandsInput | Prisma.sub_brandsUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.sub_brandsScalarWhereInput | Prisma.sub_brandsScalarWhereInput[]
}

export type sub_brandsUncheckedUpdateManyWithoutBrandsNestedInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutBrandsInput, Prisma.sub_brandsUncheckedCreateWithoutBrandsInput> | Prisma.sub_brandsCreateWithoutBrandsInput[] | Prisma.sub_brandsUncheckedCreateWithoutBrandsInput[]
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutBrandsInput | Prisma.sub_brandsCreateOrConnectWithoutBrandsInput[]
  upsert?: Prisma.sub_brandsUpsertWithWhereUniqueWithoutBrandsInput | Prisma.sub_brandsUpsertWithWhereUniqueWithoutBrandsInput[]
  createMany?: Prisma.sub_brandsCreateManyBrandsInputEnvelope
  set?: Prisma.sub_brandsWhereUniqueInput | Prisma.sub_brandsWhereUniqueInput[]
  disconnect?: Prisma.sub_brandsWhereUniqueInput | Prisma.sub_brandsWhereUniqueInput[]
  delete?: Prisma.sub_brandsWhereUniqueInput | Prisma.sub_brandsWhereUniqueInput[]
  connect?: Prisma.sub_brandsWhereUniqueInput | Prisma.sub_brandsWhereUniqueInput[]
  update?: Prisma.sub_brandsUpdateWithWhereUniqueWithoutBrandsInput | Prisma.sub_brandsUpdateWithWhereUniqueWithoutBrandsInput[]
  updateMany?: Prisma.sub_brandsUpdateManyWithWhereWithoutBrandsInput | Prisma.sub_brandsUpdateManyWithWhereWithoutBrandsInput[]
  deleteMany?: Prisma.sub_brandsScalarWhereInput | Prisma.sub_brandsScalarWhereInput[]
}

export type sub_brandsCreateNestedOneWithoutCategoriesInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutCategoriesInput, Prisma.sub_brandsUncheckedCreateWithoutCategoriesInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutCategoriesInput
  connect?: Prisma.sub_brandsWhereUniqueInput
}

export type sub_brandsUpdateOneWithoutCategoriesNestedInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutCategoriesInput, Prisma.sub_brandsUncheckedCreateWithoutCategoriesInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutCategoriesInput
  upsert?: Prisma.sub_brandsUpsertWithoutCategoriesInput
  disconnect?: Prisma.sub_brandsWhereInput | boolean
  delete?: Prisma.sub_brandsWhereInput | boolean
  connect?: Prisma.sub_brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.sub_brandsUpdateToOneWithWhereWithoutCategoriesInput, Prisma.sub_brandsUpdateWithoutCategoriesInput>, Prisma.sub_brandsUncheckedUpdateWithoutCategoriesInput>
}

export type sub_brandsCreateNestedOneWithoutCustomersInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutCustomersInput, Prisma.sub_brandsUncheckedCreateWithoutCustomersInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutCustomersInput
  connect?: Prisma.sub_brandsWhereUniqueInput
}

export type sub_brandsUpdateOneWithoutCustomersNestedInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutCustomersInput, Prisma.sub_brandsUncheckedCreateWithoutCustomersInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutCustomersInput
  upsert?: Prisma.sub_brandsUpsertWithoutCustomersInput
  disconnect?: Prisma.sub_brandsWhereInput | boolean
  delete?: Prisma.sub_brandsWhereInput | boolean
  connect?: Prisma.sub_brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.sub_brandsUpdateToOneWithWhereWithoutCustomersInput, Prisma.sub_brandsUpdateWithoutCustomersInput>, Prisma.sub_brandsUncheckedUpdateWithoutCustomersInput>
}

export type sub_brandsCreateNestedOneWithoutItemsInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutItemsInput, Prisma.sub_brandsUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutItemsInput
  connect?: Prisma.sub_brandsWhereUniqueInput
}

export type sub_brandsUpdateOneWithoutItemsNestedInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutItemsInput, Prisma.sub_brandsUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutItemsInput
  upsert?: Prisma.sub_brandsUpsertWithoutItemsInput
  disconnect?: Prisma.sub_brandsWhereInput | boolean
  delete?: Prisma.sub_brandsWhereInput | boolean
  connect?: Prisma.sub_brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.sub_brandsUpdateToOneWithWhereWithoutItemsInput, Prisma.sub_brandsUpdateWithoutItemsInput>, Prisma.sub_brandsUncheckedUpdateWithoutItemsInput>
}

export type sub_brandsCreateNestedOneWithoutOption_groupsInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutOption_groupsInput, Prisma.sub_brandsUncheckedCreateWithoutOption_groupsInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutOption_groupsInput
  connect?: Prisma.sub_brandsWhereUniqueInput
}

export type sub_brandsUpdateOneWithoutOption_groupsNestedInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutOption_groupsInput, Prisma.sub_brandsUncheckedCreateWithoutOption_groupsInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutOption_groupsInput
  upsert?: Prisma.sub_brandsUpsertWithoutOption_groupsInput
  disconnect?: Prisma.sub_brandsWhereInput | boolean
  delete?: Prisma.sub_brandsWhereInput | boolean
  connect?: Prisma.sub_brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.sub_brandsUpdateToOneWithWhereWithoutOption_groupsInput, Prisma.sub_brandsUpdateWithoutOption_groupsInput>, Prisma.sub_brandsUncheckedUpdateWithoutOption_groupsInput>
}

export type sub_brandsCreateNestedOneWithoutProductsInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutProductsInput, Prisma.sub_brandsUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutProductsInput
  connect?: Prisma.sub_brandsWhereUniqueInput
}

export type sub_brandsUpdateOneWithoutProductsNestedInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutProductsInput, Prisma.sub_brandsUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutProductsInput
  upsert?: Prisma.sub_brandsUpsertWithoutProductsInput
  disconnect?: Prisma.sub_brandsWhereInput | boolean
  delete?: Prisma.sub_brandsWhereInput | boolean
  connect?: Prisma.sub_brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.sub_brandsUpdateToOneWithWhereWithoutProductsInput, Prisma.sub_brandsUpdateWithoutProductsInput>, Prisma.sub_brandsUncheckedUpdateWithoutProductsInput>
}

export type sub_brandsCreateNestedOneWithoutSalesInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutSalesInput, Prisma.sub_brandsUncheckedCreateWithoutSalesInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutSalesInput
  connect?: Prisma.sub_brandsWhereUniqueInput
}

export type sub_brandsUpdateOneWithoutSalesNestedInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutSalesInput, Prisma.sub_brandsUncheckedCreateWithoutSalesInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutSalesInput
  upsert?: Prisma.sub_brandsUpsertWithoutSalesInput
  disconnect?: Prisma.sub_brandsWhereInput | boolean
  delete?: Prisma.sub_brandsWhereInput | boolean
  connect?: Prisma.sub_brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.sub_brandsUpdateToOneWithWhereWithoutSalesInput, Prisma.sub_brandsUpdateWithoutSalesInput>, Prisma.sub_brandsUncheckedUpdateWithoutSalesInput>
}

export type sub_brandsCreateNestedOneWithoutStoresInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutStoresInput, Prisma.sub_brandsUncheckedCreateWithoutStoresInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutStoresInput
  connect?: Prisma.sub_brandsWhereUniqueInput
}

export type sub_brandsUpdateOneWithoutStoresNestedInput = {
  create?: Prisma.XOR<Prisma.sub_brandsCreateWithoutStoresInput, Prisma.sub_brandsUncheckedCreateWithoutStoresInput>
  connectOrCreate?: Prisma.sub_brandsCreateOrConnectWithoutStoresInput
  upsert?: Prisma.sub_brandsUpsertWithoutStoresInput
  disconnect?: Prisma.sub_brandsWhereInput | boolean
  delete?: Prisma.sub_brandsWhereInput | boolean
  connect?: Prisma.sub_brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.sub_brandsUpdateToOneWithWhereWithoutStoresInput, Prisma.sub_brandsUpdateWithoutStoresInput>, Prisma.sub_brandsUncheckedUpdateWithoutStoresInput>
}

export type sub_brandsCreateWithoutBrandsInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesCreateNestedManyWithoutSub_brandsInput
}

export type sub_brandsUncheckedCreateWithoutBrandsInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersUncheckedCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutSub_brandsInput
}

export type sub_brandsCreateOrConnectWithoutBrandsInput = {
  where: Prisma.sub_brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutBrandsInput, Prisma.sub_brandsUncheckedCreateWithoutBrandsInput>
}

export type sub_brandsCreateManyBrandsInputEnvelope = {
  data: Prisma.sub_brandsCreateManyBrandsInput | Prisma.sub_brandsCreateManyBrandsInput[]
  skipDuplicates?: boolean
}

export type sub_brandsUpsertWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.sub_brandsWhereUniqueInput
  update: Prisma.XOR<Prisma.sub_brandsUpdateWithoutBrandsInput, Prisma.sub_brandsUncheckedUpdateWithoutBrandsInput>
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutBrandsInput, Prisma.sub_brandsUncheckedCreateWithoutBrandsInput>
}

export type sub_brandsUpdateWithWhereUniqueWithoutBrandsInput = {
  where: Prisma.sub_brandsWhereUniqueInput
  data: Prisma.XOR<Prisma.sub_brandsUpdateWithoutBrandsInput, Prisma.sub_brandsUncheckedUpdateWithoutBrandsInput>
}

export type sub_brandsUpdateManyWithWhereWithoutBrandsInput = {
  where: Prisma.sub_brandsScalarWhereInput
  data: Prisma.XOR<Prisma.sub_brandsUpdateManyMutationInput, Prisma.sub_brandsUncheckedUpdateManyWithoutBrandsInput>
}

export type sub_brandsScalarWhereInput = {
  AND?: Prisma.sub_brandsScalarWhereInput | Prisma.sub_brandsScalarWhereInput[]
  OR?: Prisma.sub_brandsScalarWhereInput[]
  NOT?: Prisma.sub_brandsScalarWhereInput | Prisma.sub_brandsScalarWhereInput[]
  id?: Prisma.IntFilter<"sub_brands"> | number
  brand_id?: Prisma.IntNullableFilter<"sub_brands"> | number | null
  name?: Prisma.StringFilter<"sub_brands"> | string
  created_at?: Prisma.DateTimeNullableFilter<"sub_brands"> | Date | string | null
}

export type sub_brandsCreateWithoutCategoriesInput = {
  name: string
  created_at?: Date | string | null
  customers?: Prisma.customersCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesCreateNestedManyWithoutSub_brandsInput
  brands?: Prisma.brandsCreateNestedOneWithoutSub_brandsInput
}

export type sub_brandsUncheckedCreateWithoutCategoriesInput = {
  id?: number
  brand_id?: number | null
  name: string
  created_at?: Date | string | null
  customers?: Prisma.customersUncheckedCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutSub_brandsInput
}

export type sub_brandsCreateOrConnectWithoutCategoriesInput = {
  where: Prisma.sub_brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutCategoriesInput, Prisma.sub_brandsUncheckedCreateWithoutCategoriesInput>
}

export type sub_brandsUpsertWithoutCategoriesInput = {
  update: Prisma.XOR<Prisma.sub_brandsUpdateWithoutCategoriesInput, Prisma.sub_brandsUncheckedUpdateWithoutCategoriesInput>
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutCategoriesInput, Prisma.sub_brandsUncheckedCreateWithoutCategoriesInput>
  where?: Prisma.sub_brandsWhereInput
}

export type sub_brandsUpdateToOneWithWhereWithoutCategoriesInput = {
  where?: Prisma.sub_brandsWhereInput
  data: Prisma.XOR<Prisma.sub_brandsUpdateWithoutCategoriesInput, Prisma.sub_brandsUncheckedUpdateWithoutCategoriesInput>
}

export type sub_brandsUpdateWithoutCategoriesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customers?: Prisma.customersUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutSub_brandsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutSub_brandsNestedInput
}

export type sub_brandsUncheckedUpdateWithoutCategoriesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customers?: Prisma.customersUncheckedUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUncheckedUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutSub_brandsNestedInput
}

export type sub_brandsCreateWithoutCustomersInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesCreateNestedManyWithoutSub_brandsInput
  brands?: Prisma.brandsCreateNestedOneWithoutSub_brandsInput
}

export type sub_brandsUncheckedCreateWithoutCustomersInput = {
  id?: number
  brand_id?: number | null
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutSub_brandsInput
}

export type sub_brandsCreateOrConnectWithoutCustomersInput = {
  where: Prisma.sub_brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutCustomersInput, Prisma.sub_brandsUncheckedCreateWithoutCustomersInput>
}

export type sub_brandsUpsertWithoutCustomersInput = {
  update: Prisma.XOR<Prisma.sub_brandsUpdateWithoutCustomersInput, Prisma.sub_brandsUncheckedUpdateWithoutCustomersInput>
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutCustomersInput, Prisma.sub_brandsUncheckedCreateWithoutCustomersInput>
  where?: Prisma.sub_brandsWhereInput
}

export type sub_brandsUpdateToOneWithWhereWithoutCustomersInput = {
  where?: Prisma.sub_brandsWhereInput
  data: Prisma.XOR<Prisma.sub_brandsUpdateWithoutCustomersInput, Prisma.sub_brandsUncheckedUpdateWithoutCustomersInput>
}

export type sub_brandsUpdateWithoutCustomersInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutSub_brandsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutSub_brandsNestedInput
}

export type sub_brandsUncheckedUpdateWithoutCustomersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUncheckedUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutSub_brandsNestedInput
}

export type sub_brandsCreateWithoutItemsInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesCreateNestedManyWithoutSub_brandsInput
  brands?: Prisma.brandsCreateNestedOneWithoutSub_brandsInput
}

export type sub_brandsUncheckedCreateWithoutItemsInput = {
  id?: number
  brand_id?: number | null
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersUncheckedCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutSub_brandsInput
}

export type sub_brandsCreateOrConnectWithoutItemsInput = {
  where: Prisma.sub_brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutItemsInput, Prisma.sub_brandsUncheckedCreateWithoutItemsInput>
}

export type sub_brandsUpsertWithoutItemsInput = {
  update: Prisma.XOR<Prisma.sub_brandsUpdateWithoutItemsInput, Prisma.sub_brandsUncheckedUpdateWithoutItemsInput>
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutItemsInput, Prisma.sub_brandsUncheckedCreateWithoutItemsInput>
  where?: Prisma.sub_brandsWhereInput
}

export type sub_brandsUpdateToOneWithWhereWithoutItemsInput = {
  where?: Prisma.sub_brandsWhereInput
  data: Prisma.XOR<Prisma.sub_brandsUpdateWithoutItemsInput, Prisma.sub_brandsUncheckedUpdateWithoutItemsInput>
}

export type sub_brandsUpdateWithoutItemsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutSub_brandsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutSub_brandsNestedInput
}

export type sub_brandsUncheckedUpdateWithoutItemsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUncheckedUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUncheckedUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutSub_brandsNestedInput
}

export type sub_brandsCreateWithoutOption_groupsInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesCreateNestedManyWithoutSub_brandsInput
  brands?: Prisma.brandsCreateNestedOneWithoutSub_brandsInput
}

export type sub_brandsUncheckedCreateWithoutOption_groupsInput = {
  id?: number
  brand_id?: number | null
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersUncheckedCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutSub_brandsInput
}

export type sub_brandsCreateOrConnectWithoutOption_groupsInput = {
  where: Prisma.sub_brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutOption_groupsInput, Prisma.sub_brandsUncheckedCreateWithoutOption_groupsInput>
}

export type sub_brandsUpsertWithoutOption_groupsInput = {
  update: Prisma.XOR<Prisma.sub_brandsUpdateWithoutOption_groupsInput, Prisma.sub_brandsUncheckedUpdateWithoutOption_groupsInput>
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutOption_groupsInput, Prisma.sub_brandsUncheckedCreateWithoutOption_groupsInput>
  where?: Prisma.sub_brandsWhereInput
}

export type sub_brandsUpdateToOneWithWhereWithoutOption_groupsInput = {
  where?: Prisma.sub_brandsWhereInput
  data: Prisma.XOR<Prisma.sub_brandsUpdateWithoutOption_groupsInput, Prisma.sub_brandsUncheckedUpdateWithoutOption_groupsInput>
}

export type sub_brandsUpdateWithoutOption_groupsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutSub_brandsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutSub_brandsNestedInput
}

export type sub_brandsUncheckedUpdateWithoutOption_groupsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUncheckedUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUncheckedUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutSub_brandsNestedInput
}

export type sub_brandsCreateWithoutProductsInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesCreateNestedManyWithoutSub_brandsInput
  brands?: Prisma.brandsCreateNestedOneWithoutSub_brandsInput
}

export type sub_brandsUncheckedCreateWithoutProductsInput = {
  id?: number
  brand_id?: number | null
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersUncheckedCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutSub_brandsInput
}

export type sub_brandsCreateOrConnectWithoutProductsInput = {
  where: Prisma.sub_brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutProductsInput, Prisma.sub_brandsUncheckedCreateWithoutProductsInput>
}

export type sub_brandsUpsertWithoutProductsInput = {
  update: Prisma.XOR<Prisma.sub_brandsUpdateWithoutProductsInput, Prisma.sub_brandsUncheckedUpdateWithoutProductsInput>
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutProductsInput, Prisma.sub_brandsUncheckedCreateWithoutProductsInput>
  where?: Prisma.sub_brandsWhereInput
}

export type sub_brandsUpdateToOneWithWhereWithoutProductsInput = {
  where?: Prisma.sub_brandsWhereInput
  data: Prisma.XOR<Prisma.sub_brandsUpdateWithoutProductsInput, Prisma.sub_brandsUncheckedUpdateWithoutProductsInput>
}

export type sub_brandsUpdateWithoutProductsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutSub_brandsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutSub_brandsNestedInput
}

export type sub_brandsUncheckedUpdateWithoutProductsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUncheckedUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUncheckedUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutSub_brandsNestedInput
}

export type sub_brandsCreateWithoutSalesInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesCreateNestedManyWithoutSub_brandsInput
  brands?: Prisma.brandsCreateNestedOneWithoutSub_brandsInput
}

export type sub_brandsUncheckedCreateWithoutSalesInput = {
  id?: number
  brand_id?: number | null
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersUncheckedCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutSub_brandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutSub_brandsInput
}

export type sub_brandsCreateOrConnectWithoutSalesInput = {
  where: Prisma.sub_brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutSalesInput, Prisma.sub_brandsUncheckedCreateWithoutSalesInput>
}

export type sub_brandsUpsertWithoutSalesInput = {
  update: Prisma.XOR<Prisma.sub_brandsUpdateWithoutSalesInput, Prisma.sub_brandsUncheckedUpdateWithoutSalesInput>
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutSalesInput, Prisma.sub_brandsUncheckedCreateWithoutSalesInput>
  where?: Prisma.sub_brandsWhereInput
}

export type sub_brandsUpdateToOneWithWhereWithoutSalesInput = {
  where?: Prisma.sub_brandsWhereInput
  data: Prisma.XOR<Prisma.sub_brandsUpdateWithoutSalesInput, Prisma.sub_brandsUncheckedUpdateWithoutSalesInput>
}

export type sub_brandsUpdateWithoutSalesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutSub_brandsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutSub_brandsNestedInput
}

export type sub_brandsUncheckedUpdateWithoutSalesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUncheckedUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutSub_brandsNestedInput
}

export type sub_brandsCreateWithoutStoresInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesCreateNestedManyWithoutSub_brandsInput
  brands?: Prisma.brandsCreateNestedOneWithoutSub_brandsInput
}

export type sub_brandsUncheckedCreateWithoutStoresInput = {
  id?: number
  brand_id?: number | null
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutSub_brandsInput
  customers?: Prisma.customersUncheckedCreateNestedManyWithoutSub_brandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutSub_brandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutSub_brandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutSub_brandsInput
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutSub_brandsInput
}

export type sub_brandsCreateOrConnectWithoutStoresInput = {
  where: Prisma.sub_brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutStoresInput, Prisma.sub_brandsUncheckedCreateWithoutStoresInput>
}

export type sub_brandsUpsertWithoutStoresInput = {
  update: Prisma.XOR<Prisma.sub_brandsUpdateWithoutStoresInput, Prisma.sub_brandsUncheckedUpdateWithoutStoresInput>
  create: Prisma.XOR<Prisma.sub_brandsCreateWithoutStoresInput, Prisma.sub_brandsUncheckedCreateWithoutStoresInput>
  where?: Prisma.sub_brandsWhereInput
}

export type sub_brandsUpdateToOneWithWhereWithoutStoresInput = {
  where?: Prisma.sub_brandsWhereInput
  data: Prisma.XOR<Prisma.sub_brandsUpdateWithoutStoresInput, Prisma.sub_brandsUncheckedUpdateWithoutStoresInput>
}

export type sub_brandsUpdateWithoutStoresInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUpdateManyWithoutSub_brandsNestedInput
  brands?: Prisma.brandsUpdateOneWithoutSub_brandsNestedInput
}

export type sub_brandsUncheckedUpdateWithoutStoresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUncheckedUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUncheckedUpdateManyWithoutSub_brandsNestedInput
}

export type sub_brandsCreateManyBrandsInput = {
  id?: number
  name: string
  created_at?: Date | string | null
}

export type sub_brandsUpdateWithoutBrandsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutSub_brandsNestedInput
}

export type sub_brandsUncheckedUpdateWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutSub_brandsNestedInput
  customers?: Prisma.customersUncheckedUpdateManyWithoutSub_brandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutSub_brandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutSub_brandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutSub_brandsNestedInput
  sales?: Prisma.salesUncheckedUpdateManyWithoutSub_brandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutSub_brandsNestedInput
}

export type sub_brandsUncheckedUpdateManyWithoutBrandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type Sub_brandsCountOutputType
 */

export type Sub_brandsCountOutputType = {
  categories: number
  customers: number
  items: number
  option_groups: number
  products: number
  sales: number
  stores: number
}

export type Sub_brandsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  categories?: boolean | Sub_brandsCountOutputTypeCountCategoriesArgs
  customers?: boolean | Sub_brandsCountOutputTypeCountCustomersArgs
  items?: boolean | Sub_brandsCountOutputTypeCountItemsArgs
  option_groups?: boolean | Sub_brandsCountOutputTypeCountOption_groupsArgs
  products?: boolean | Sub_brandsCountOutputTypeCountProductsArgs
  sales?: boolean | Sub_brandsCountOutputTypeCountSalesArgs
  stores?: boolean | Sub_brandsCountOutputTypeCountStoresArgs
}

/**
 * Sub_brandsCountOutputType without action
 */
export type Sub_brandsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sub_brandsCountOutputType
   */
  select?: Prisma.Sub_brandsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Sub_brandsCountOutputType without action
 */
export type Sub_brandsCountOutputTypeCountCategoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.categoriesWhereInput
}

/**
 * Sub_brandsCountOutputType without action
 */
export type Sub_brandsCountOutputTypeCountCustomersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.customersWhereInput
}

/**
 * Sub_brandsCountOutputType without action
 */
export type Sub_brandsCountOutputTypeCountItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.itemsWhereInput
}

/**
 * Sub_brandsCountOutputType without action
 */
export type Sub_brandsCountOutputTypeCountOption_groupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.option_groupsWhereInput
}

/**
 * Sub_brandsCountOutputType without action
 */
export type Sub_brandsCountOutputTypeCountProductsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.productsWhereInput
}

/**
 * Sub_brandsCountOutputType without action
 */
export type Sub_brandsCountOutputTypeCountSalesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.salesWhereInput
}

/**
 * Sub_brandsCountOutputType without action
 */
export type Sub_brandsCountOutputTypeCountStoresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.storesWhereInput
}


export type sub_brandsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  name?: boolean
  created_at?: boolean
  categories?: boolean | Prisma.sub_brands$categoriesArgs<ExtArgs>
  customers?: boolean | Prisma.sub_brands$customersArgs<ExtArgs>
  items?: boolean | Prisma.sub_brands$itemsArgs<ExtArgs>
  option_groups?: boolean | Prisma.sub_brands$option_groupsArgs<ExtArgs>
  products?: boolean | Prisma.sub_brands$productsArgs<ExtArgs>
  sales?: boolean | Prisma.sub_brands$salesArgs<ExtArgs>
  stores?: boolean | Prisma.sub_brands$storesArgs<ExtArgs>
  brands?: boolean | Prisma.sub_brands$brandsArgs<ExtArgs>
  _count?: boolean | Prisma.Sub_brandsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["sub_brands"]>

export type sub_brandsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  name?: boolean
  created_at?: boolean
  brands?: boolean | Prisma.sub_brands$brandsArgs<ExtArgs>
}, ExtArgs["result"]["sub_brands"]>

export type sub_brandsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  name?: boolean
  created_at?: boolean
  brands?: boolean | Prisma.sub_brands$brandsArgs<ExtArgs>
}, ExtArgs["result"]["sub_brands"]>

export type sub_brandsSelectScalar = {
  id?: boolean
  brand_id?: boolean
  name?: boolean
  created_at?: boolean
}

export type sub_brandsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "brand_id" | "name" | "created_at", ExtArgs["result"]["sub_brands"]>
export type sub_brandsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  categories?: boolean | Prisma.sub_brands$categoriesArgs<ExtArgs>
  customers?: boolean | Prisma.sub_brands$customersArgs<ExtArgs>
  items?: boolean | Prisma.sub_brands$itemsArgs<ExtArgs>
  option_groups?: boolean | Prisma.sub_brands$option_groupsArgs<ExtArgs>
  products?: boolean | Prisma.sub_brands$productsArgs<ExtArgs>
  sales?: boolean | Prisma.sub_brands$salesArgs<ExtArgs>
  stores?: boolean | Prisma.sub_brands$storesArgs<ExtArgs>
  brands?: boolean | Prisma.sub_brands$brandsArgs<ExtArgs>
  _count?: boolean | Prisma.Sub_brandsCountOutputTypeDefaultArgs<ExtArgs>
}
export type sub_brandsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.sub_brands$brandsArgs<ExtArgs>
}
export type sub_brandsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brands?: boolean | Prisma.sub_brands$brandsArgs<ExtArgs>
}

export type $sub_brandsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "sub_brands"
  objects: {
    categories: Prisma.$categoriesPayload<ExtArgs>[]
    customers: Prisma.$customersPayload<ExtArgs>[]
    items: Prisma.$itemsPayload<ExtArgs>[]
    option_groups: Prisma.$option_groupsPayload<ExtArgs>[]
    products: Prisma.$productsPayload<ExtArgs>[]
    sales: Prisma.$salesPayload<ExtArgs>[]
    stores: Prisma.$storesPayload<ExtArgs>[]
    brands: Prisma.$brandsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    brand_id: number | null
    name: string
    created_at: Date | null
  }, ExtArgs["result"]["sub_brands"]>
  composites: {}
}

export type sub_brandsGetPayload<S extends boolean | null | undefined | sub_brandsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload, S>

export type sub_brandsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<sub_brandsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Sub_brandsCountAggregateInputType | true
  }

export interface sub_brandsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sub_brands'], meta: { name: 'sub_brands' } }
  /**
   * Find zero or one Sub_brands that matches the filter.
   * @param {sub_brandsFindUniqueArgs} args - Arguments to find a Sub_brands
   * @example
   * // Get one Sub_brands
   * const sub_brands = await prisma.sub_brands.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends sub_brandsFindUniqueArgs>(args: Prisma.SelectSubset<T, sub_brandsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Sub_brands that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {sub_brandsFindUniqueOrThrowArgs} args - Arguments to find a Sub_brands
   * @example
   * // Get one Sub_brands
   * const sub_brands = await prisma.sub_brands.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends sub_brandsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, sub_brandsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Sub_brands that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {sub_brandsFindFirstArgs} args - Arguments to find a Sub_brands
   * @example
   * // Get one Sub_brands
   * const sub_brands = await prisma.sub_brands.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends sub_brandsFindFirstArgs>(args?: Prisma.SelectSubset<T, sub_brandsFindFirstArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Sub_brands that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {sub_brandsFindFirstOrThrowArgs} args - Arguments to find a Sub_brands
   * @example
   * // Get one Sub_brands
   * const sub_brands = await prisma.sub_brands.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends sub_brandsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, sub_brandsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Sub_brands that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {sub_brandsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Sub_brands
   * const sub_brands = await prisma.sub_brands.findMany()
   * 
   * // Get first 10 Sub_brands
   * const sub_brands = await prisma.sub_brands.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const sub_brandsWithIdOnly = await prisma.sub_brands.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends sub_brandsFindManyArgs>(args?: Prisma.SelectSubset<T, sub_brandsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Sub_brands.
   * @param {sub_brandsCreateArgs} args - Arguments to create a Sub_brands.
   * @example
   * // Create one Sub_brands
   * const Sub_brands = await prisma.sub_brands.create({
   *   data: {
   *     // ... data to create a Sub_brands
   *   }
   * })
   * 
   */
  create<T extends sub_brandsCreateArgs>(args: Prisma.SelectSubset<T, sub_brandsCreateArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Sub_brands.
   * @param {sub_brandsCreateManyArgs} args - Arguments to create many Sub_brands.
   * @example
   * // Create many Sub_brands
   * const sub_brands = await prisma.sub_brands.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends sub_brandsCreateManyArgs>(args?: Prisma.SelectSubset<T, sub_brandsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Sub_brands and returns the data saved in the database.
   * @param {sub_brandsCreateManyAndReturnArgs} args - Arguments to create many Sub_brands.
   * @example
   * // Create many Sub_brands
   * const sub_brands = await prisma.sub_brands.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Sub_brands and only return the `id`
   * const sub_brandsWithIdOnly = await prisma.sub_brands.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends sub_brandsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, sub_brandsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Sub_brands.
   * @param {sub_brandsDeleteArgs} args - Arguments to delete one Sub_brands.
   * @example
   * // Delete one Sub_brands
   * const Sub_brands = await prisma.sub_brands.delete({
   *   where: {
   *     // ... filter to delete one Sub_brands
   *   }
   * })
   * 
   */
  delete<T extends sub_brandsDeleteArgs>(args: Prisma.SelectSubset<T, sub_brandsDeleteArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Sub_brands.
   * @param {sub_brandsUpdateArgs} args - Arguments to update one Sub_brands.
   * @example
   * // Update one Sub_brands
   * const sub_brands = await prisma.sub_brands.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends sub_brandsUpdateArgs>(args: Prisma.SelectSubset<T, sub_brandsUpdateArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Sub_brands.
   * @param {sub_brandsDeleteManyArgs} args - Arguments to filter Sub_brands to delete.
   * @example
   * // Delete a few Sub_brands
   * const { count } = await prisma.sub_brands.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends sub_brandsDeleteManyArgs>(args?: Prisma.SelectSubset<T, sub_brandsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sub_brands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {sub_brandsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Sub_brands
   * const sub_brands = await prisma.sub_brands.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends sub_brandsUpdateManyArgs>(args: Prisma.SelectSubset<T, sub_brandsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sub_brands and returns the data updated in the database.
   * @param {sub_brandsUpdateManyAndReturnArgs} args - Arguments to update many Sub_brands.
   * @example
   * // Update many Sub_brands
   * const sub_brands = await prisma.sub_brands.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Sub_brands and only return the `id`
   * const sub_brandsWithIdOnly = await prisma.sub_brands.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends sub_brandsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, sub_brandsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Sub_brands.
   * @param {sub_brandsUpsertArgs} args - Arguments to update or create a Sub_brands.
   * @example
   * // Update or create a Sub_brands
   * const sub_brands = await prisma.sub_brands.upsert({
   *   create: {
   *     // ... data to create a Sub_brands
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Sub_brands we want to update
   *   }
   * })
   */
  upsert<T extends sub_brandsUpsertArgs>(args: Prisma.SelectSubset<T, sub_brandsUpsertArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Sub_brands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {sub_brandsCountArgs} args - Arguments to filter Sub_brands to count.
   * @example
   * // Count the number of Sub_brands
   * const count = await prisma.sub_brands.count({
   *   where: {
   *     // ... the filter for the Sub_brands we want to count
   *   }
   * })
  **/
  count<T extends sub_brandsCountArgs>(
    args?: Prisma.Subset<T, sub_brandsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Sub_brandsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Sub_brands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Sub_brandsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Sub_brandsAggregateArgs>(args: Prisma.Subset<T, Sub_brandsAggregateArgs>): Prisma.PrismaPromise<GetSub_brandsAggregateType<T>>

  /**
   * Group by Sub_brands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {sub_brandsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends sub_brandsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: sub_brandsGroupByArgs['orderBy'] }
      : { orderBy?: sub_brandsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, sub_brandsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSub_brandsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the sub_brands model
 */
readonly fields: sub_brandsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for sub_brands.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__sub_brandsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  categories<T extends Prisma.sub_brands$categoriesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.sub_brands$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  customers<T extends Prisma.sub_brands$customersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.sub_brands$customersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  items<T extends Prisma.sub_brands$itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.sub_brands$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  option_groups<T extends Prisma.sub_brands$option_groupsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.sub_brands$option_groupsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$option_groupsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  products<T extends Prisma.sub_brands$productsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.sub_brands$productsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  sales<T extends Prisma.sub_brands$salesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.sub_brands$salesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$salesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  stores<T extends Prisma.sub_brands$storesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.sub_brands$storesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$storesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  brands<T extends Prisma.sub_brands$brandsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.sub_brands$brandsArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the sub_brands model
 */
export interface sub_brandsFieldRefs {
  readonly id: Prisma.FieldRef<"sub_brands", 'Int'>
  readonly brand_id: Prisma.FieldRef<"sub_brands", 'Int'>
  readonly name: Prisma.FieldRef<"sub_brands", 'String'>
  readonly created_at: Prisma.FieldRef<"sub_brands", 'DateTime'>
}
    

// Custom InputTypes
/**
 * sub_brands findUnique
 */
export type sub_brandsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  /**
   * Filter, which sub_brands to fetch.
   */
  where: Prisma.sub_brandsWhereUniqueInput
}

/**
 * sub_brands findUniqueOrThrow
 */
export type sub_brandsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  /**
   * Filter, which sub_brands to fetch.
   */
  where: Prisma.sub_brandsWhereUniqueInput
}

/**
 * sub_brands findFirst
 */
export type sub_brandsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  /**
   * Filter, which sub_brands to fetch.
   */
  where?: Prisma.sub_brandsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of sub_brands to fetch.
   */
  orderBy?: Prisma.sub_brandsOrderByWithRelationInput | Prisma.sub_brandsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for sub_brands.
   */
  cursor?: Prisma.sub_brandsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` sub_brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` sub_brands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of sub_brands.
   */
  distinct?: Prisma.Sub_brandsScalarFieldEnum | Prisma.Sub_brandsScalarFieldEnum[]
}

/**
 * sub_brands findFirstOrThrow
 */
export type sub_brandsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  /**
   * Filter, which sub_brands to fetch.
   */
  where?: Prisma.sub_brandsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of sub_brands to fetch.
   */
  orderBy?: Prisma.sub_brandsOrderByWithRelationInput | Prisma.sub_brandsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for sub_brands.
   */
  cursor?: Prisma.sub_brandsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` sub_brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` sub_brands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of sub_brands.
   */
  distinct?: Prisma.Sub_brandsScalarFieldEnum | Prisma.Sub_brandsScalarFieldEnum[]
}

/**
 * sub_brands findMany
 */
export type sub_brandsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  /**
   * Filter, which sub_brands to fetch.
   */
  where?: Prisma.sub_brandsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of sub_brands to fetch.
   */
  orderBy?: Prisma.sub_brandsOrderByWithRelationInput | Prisma.sub_brandsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing sub_brands.
   */
  cursor?: Prisma.sub_brandsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` sub_brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` sub_brands.
   */
  skip?: number
  distinct?: Prisma.Sub_brandsScalarFieldEnum | Prisma.Sub_brandsScalarFieldEnum[]
}

/**
 * sub_brands create
 */
export type sub_brandsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  /**
   * The data needed to create a sub_brands.
   */
  data: Prisma.XOR<Prisma.sub_brandsCreateInput, Prisma.sub_brandsUncheckedCreateInput>
}

/**
 * sub_brands createMany
 */
export type sub_brandsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many sub_brands.
   */
  data: Prisma.sub_brandsCreateManyInput | Prisma.sub_brandsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * sub_brands createManyAndReturn
 */
export type sub_brandsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * The data used to create many sub_brands.
   */
  data: Prisma.sub_brandsCreateManyInput | Prisma.sub_brandsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * sub_brands update
 */
export type sub_brandsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  /**
   * The data needed to update a sub_brands.
   */
  data: Prisma.XOR<Prisma.sub_brandsUpdateInput, Prisma.sub_brandsUncheckedUpdateInput>
  /**
   * Choose, which sub_brands to update.
   */
  where: Prisma.sub_brandsWhereUniqueInput
}

/**
 * sub_brands updateMany
 */
export type sub_brandsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update sub_brands.
   */
  data: Prisma.XOR<Prisma.sub_brandsUpdateManyMutationInput, Prisma.sub_brandsUncheckedUpdateManyInput>
  /**
   * Filter which sub_brands to update
   */
  where?: Prisma.sub_brandsWhereInput
  /**
   * Limit how many sub_brands to update.
   */
  limit?: number
}

/**
 * sub_brands updateManyAndReturn
 */
export type sub_brandsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * The data used to update sub_brands.
   */
  data: Prisma.XOR<Prisma.sub_brandsUpdateManyMutationInput, Prisma.sub_brandsUncheckedUpdateManyInput>
  /**
   * Filter which sub_brands to update
   */
  where?: Prisma.sub_brandsWhereInput
  /**
   * Limit how many sub_brands to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * sub_brands upsert
 */
export type sub_brandsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  /**
   * The filter to search for the sub_brands to update in case it exists.
   */
  where: Prisma.sub_brandsWhereUniqueInput
  /**
   * In case the sub_brands found by the `where` argument doesn't exist, create a new sub_brands with this data.
   */
  create: Prisma.XOR<Prisma.sub_brandsCreateInput, Prisma.sub_brandsUncheckedCreateInput>
  /**
   * In case the sub_brands was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.sub_brandsUpdateInput, Prisma.sub_brandsUncheckedUpdateInput>
}

/**
 * sub_brands delete
 */
export type sub_brandsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  /**
   * Filter which sub_brands to delete.
   */
  where: Prisma.sub_brandsWhereUniqueInput
}

/**
 * sub_brands deleteMany
 */
export type sub_brandsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which sub_brands to delete
   */
  where?: Prisma.sub_brandsWhereInput
  /**
   * Limit how many sub_brands to delete.
   */
  limit?: number
}

/**
 * sub_brands.categories
 */
export type sub_brands$categoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  where?: Prisma.categoriesWhereInput
  orderBy?: Prisma.categoriesOrderByWithRelationInput | Prisma.categoriesOrderByWithRelationInput[]
  cursor?: Prisma.categoriesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CategoriesScalarFieldEnum | Prisma.CategoriesScalarFieldEnum[]
}

/**
 * sub_brands.customers
 */
export type sub_brands$customersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
  where?: Prisma.customersWhereInput
  orderBy?: Prisma.customersOrderByWithRelationInput | Prisma.customersOrderByWithRelationInput[]
  cursor?: Prisma.customersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CustomersScalarFieldEnum | Prisma.CustomersScalarFieldEnum[]
}

/**
 * sub_brands.items
 */
export type sub_brands$itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the items
   */
  select?: Prisma.itemsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the items
   */
  omit?: Prisma.itemsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.itemsInclude<ExtArgs> | null
  where?: Prisma.itemsWhereInput
  orderBy?: Prisma.itemsOrderByWithRelationInput | Prisma.itemsOrderByWithRelationInput[]
  cursor?: Prisma.itemsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ItemsScalarFieldEnum | Prisma.ItemsScalarFieldEnum[]
}

/**
 * sub_brands.option_groups
 */
export type sub_brands$option_groupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the option_groups
   */
  select?: Prisma.option_groupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the option_groups
   */
  omit?: Prisma.option_groupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.option_groupsInclude<ExtArgs> | null
  where?: Prisma.option_groupsWhereInput
  orderBy?: Prisma.option_groupsOrderByWithRelationInput | Prisma.option_groupsOrderByWithRelationInput[]
  cursor?: Prisma.option_groupsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Option_groupsScalarFieldEnum | Prisma.Option_groupsScalarFieldEnum[]
}

/**
 * sub_brands.products
 */
export type sub_brands$productsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  where?: Prisma.productsWhereInput
  orderBy?: Prisma.productsOrderByWithRelationInput | Prisma.productsOrderByWithRelationInput[]
  cursor?: Prisma.productsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductsScalarFieldEnum | Prisma.ProductsScalarFieldEnum[]
}

/**
 * sub_brands.sales
 */
export type sub_brands$salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sales
   */
  select?: Prisma.salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sales
   */
  omit?: Prisma.salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salesInclude<ExtArgs> | null
  where?: Prisma.salesWhereInput
  orderBy?: Prisma.salesOrderByWithRelationInput | Prisma.salesOrderByWithRelationInput[]
  cursor?: Prisma.salesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SalesScalarFieldEnum | Prisma.SalesScalarFieldEnum[]
}

/**
 * sub_brands.stores
 */
export type sub_brands$storesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the stores
   */
  select?: Prisma.storesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the stores
   */
  omit?: Prisma.storesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.storesInclude<ExtArgs> | null
  where?: Prisma.storesWhereInput
  orderBy?: Prisma.storesOrderByWithRelationInput | Prisma.storesOrderByWithRelationInput[]
  cursor?: Prisma.storesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.StoresScalarFieldEnum | Prisma.StoresScalarFieldEnum[]
}

/**
 * sub_brands.brands
 */
export type sub_brands$brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  where?: Prisma.brandsWhereInput
}

/**
 * sub_brands without action
 */
export type sub_brandsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
}
