
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `brands` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model brands
 * 
 */
export type brandsModel = runtime.Types.Result.DefaultSelection<Prisma.$brandsPayload>

export type AggregateBrands = {
  _count: BrandsCountAggregateOutputType | null
  _avg: BrandsAvgAggregateOutputType | null
  _sum: BrandsSumAggregateOutputType | null
  _min: BrandsMinAggregateOutputType | null
  _max: BrandsMaxAggregateOutputType | null
}

export type BrandsAvgAggregateOutputType = {
  id: number | null
}

export type BrandsSumAggregateOutputType = {
  id: number | null
}

export type BrandsMinAggregateOutputType = {
  id: number | null
  name: string | null
  created_at: Date | null
}

export type BrandsMaxAggregateOutputType = {
  id: number | null
  name: string | null
  created_at: Date | null
}

export type BrandsCountAggregateOutputType = {
  id: number
  name: number
  created_at: number
  _all: number
}


export type BrandsAvgAggregateInputType = {
  id?: true
}

export type BrandsSumAggregateInputType = {
  id?: true
}

export type BrandsMinAggregateInputType = {
  id?: true
  name?: true
  created_at?: true
}

export type BrandsMaxAggregateInputType = {
  id?: true
  name?: true
  created_at?: true
}

export type BrandsCountAggregateInputType = {
  id?: true
  name?: true
  created_at?: true
  _all?: true
}

export type BrandsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which brands to aggregate.
   */
  where?: Prisma.brandsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of brands to fetch.
   */
  orderBy?: Prisma.brandsOrderByWithRelationInput | Prisma.brandsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.brandsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` brands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned brands
  **/
  _count?: true | BrandsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BrandsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BrandsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BrandsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BrandsMaxAggregateInputType
}

export type GetBrandsAggregateType<T extends BrandsAggregateArgs> = {
      [P in keyof T & keyof AggregateBrands]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBrands[P]>
    : Prisma.GetScalarType<T[P], AggregateBrands[P]>
}




export type brandsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.brandsWhereInput
  orderBy?: Prisma.brandsOrderByWithAggregationInput | Prisma.brandsOrderByWithAggregationInput[]
  by: Prisma.BrandsScalarFieldEnum[] | Prisma.BrandsScalarFieldEnum
  having?: Prisma.brandsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BrandsCountAggregateInputType | true
  _avg?: BrandsAvgAggregateInputType
  _sum?: BrandsSumAggregateInputType
  _min?: BrandsMinAggregateInputType
  _max?: BrandsMaxAggregateInputType
}

export type BrandsGroupByOutputType = {
  id: number
  name: string
  created_at: Date | null
  _count: BrandsCountAggregateOutputType | null
  _avg: BrandsAvgAggregateOutputType | null
  _sum: BrandsSumAggregateOutputType | null
  _min: BrandsMinAggregateOutputType | null
  _max: BrandsMaxAggregateOutputType | null
}

type GetBrandsGroupByPayload<T extends brandsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BrandsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BrandsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BrandsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BrandsGroupByOutputType[P]>
      }
    >
  >



export type brandsWhereInput = {
  AND?: Prisma.brandsWhereInput | Prisma.brandsWhereInput[]
  OR?: Prisma.brandsWhereInput[]
  NOT?: Prisma.brandsWhereInput | Prisma.brandsWhereInput[]
  id?: Prisma.IntFilter<"brands"> | number
  name?: Prisma.StringFilter<"brands"> | string
  created_at?: Prisma.DateTimeNullableFilter<"brands"> | Date | string | null
  categories?: Prisma.CategoriesListRelationFilter
  channels?: Prisma.ChannelsListRelationFilter
  coupons?: Prisma.CouponsListRelationFilter
  items?: Prisma.ItemsListRelationFilter
  option_groups?: Prisma.Option_groupsListRelationFilter
  payment_types?: Prisma.Payment_typesListRelationFilter
  products?: Prisma.ProductsListRelationFilter
  stores?: Prisma.StoresListRelationFilter
  sub_brands?: Prisma.Sub_brandsListRelationFilter
}

export type brandsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  categories?: Prisma.categoriesOrderByRelationAggregateInput
  channels?: Prisma.channelsOrderByRelationAggregateInput
  coupons?: Prisma.couponsOrderByRelationAggregateInput
  items?: Prisma.itemsOrderByRelationAggregateInput
  option_groups?: Prisma.option_groupsOrderByRelationAggregateInput
  payment_types?: Prisma.payment_typesOrderByRelationAggregateInput
  products?: Prisma.productsOrderByRelationAggregateInput
  stores?: Prisma.storesOrderByRelationAggregateInput
  sub_brands?: Prisma.sub_brandsOrderByRelationAggregateInput
}

export type brandsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.brandsWhereInput | Prisma.brandsWhereInput[]
  OR?: Prisma.brandsWhereInput[]
  NOT?: Prisma.brandsWhereInput | Prisma.brandsWhereInput[]
  name?: Prisma.StringFilter<"brands"> | string
  created_at?: Prisma.DateTimeNullableFilter<"brands"> | Date | string | null
  categories?: Prisma.CategoriesListRelationFilter
  channels?: Prisma.ChannelsListRelationFilter
  coupons?: Prisma.CouponsListRelationFilter
  items?: Prisma.ItemsListRelationFilter
  option_groups?: Prisma.Option_groupsListRelationFilter
  payment_types?: Prisma.Payment_typesListRelationFilter
  products?: Prisma.ProductsListRelationFilter
  stores?: Prisma.StoresListRelationFilter
  sub_brands?: Prisma.Sub_brandsListRelationFilter
}, "id">

export type brandsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.brandsCountOrderByAggregateInput
  _avg?: Prisma.brandsAvgOrderByAggregateInput
  _max?: Prisma.brandsMaxOrderByAggregateInput
  _min?: Prisma.brandsMinOrderByAggregateInput
  _sum?: Prisma.brandsSumOrderByAggregateInput
}

export type brandsScalarWhereWithAggregatesInput = {
  AND?: Prisma.brandsScalarWhereWithAggregatesInput | Prisma.brandsScalarWhereWithAggregatesInput[]
  OR?: Prisma.brandsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.brandsScalarWhereWithAggregatesInput | Prisma.brandsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"brands"> | number
  name?: Prisma.StringWithAggregatesFilter<"brands"> | string
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"brands"> | Date | string | null
}

export type brandsCreateInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsCreateNestedManyWithoutBrandsInput
}

export type brandsUncheckedCreateInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsUncheckedCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsUncheckedCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesUncheckedCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsUncheckedCreateNestedManyWithoutBrandsInput
}

export type brandsUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateManyWithoutBrandsNestedInput
}

export type brandsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUncheckedUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUncheckedUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUncheckedUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUncheckedUpdateManyWithoutBrandsNestedInput
}

export type brandsCreateManyInput = {
  id?: number
  name: string
  created_at?: Date | string | null
}

export type brandsUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type brandsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type brandsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type brandsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type brandsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type brandsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type brandsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type BrandsNullableScalarRelationFilter = {
  is?: Prisma.brandsWhereInput | null
  isNot?: Prisma.brandsWhereInput | null
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type brandsCreateNestedOneWithoutCategoriesInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutCategoriesInput, Prisma.brandsUncheckedCreateWithoutCategoriesInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutCategoriesInput
  connect?: Prisma.brandsWhereUniqueInput
}

export type brandsUpdateOneWithoutCategoriesNestedInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutCategoriesInput, Prisma.brandsUncheckedCreateWithoutCategoriesInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutCategoriesInput
  upsert?: Prisma.brandsUpsertWithoutCategoriesInput
  disconnect?: Prisma.brandsWhereInput | boolean
  delete?: Prisma.brandsWhereInput | boolean
  connect?: Prisma.brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.brandsUpdateToOneWithWhereWithoutCategoriesInput, Prisma.brandsUpdateWithoutCategoriesInput>, Prisma.brandsUncheckedUpdateWithoutCategoriesInput>
}

export type brandsCreateNestedOneWithoutChannelsInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutChannelsInput, Prisma.brandsUncheckedCreateWithoutChannelsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutChannelsInput
  connect?: Prisma.brandsWhereUniqueInput
}

export type brandsUpdateOneWithoutChannelsNestedInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutChannelsInput, Prisma.brandsUncheckedCreateWithoutChannelsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutChannelsInput
  upsert?: Prisma.brandsUpsertWithoutChannelsInput
  disconnect?: Prisma.brandsWhereInput | boolean
  delete?: Prisma.brandsWhereInput | boolean
  connect?: Prisma.brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.brandsUpdateToOneWithWhereWithoutChannelsInput, Prisma.brandsUpdateWithoutChannelsInput>, Prisma.brandsUncheckedUpdateWithoutChannelsInput>
}

export type brandsCreateNestedOneWithoutCouponsInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutCouponsInput, Prisma.brandsUncheckedCreateWithoutCouponsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutCouponsInput
  connect?: Prisma.brandsWhereUniqueInput
}

export type brandsUpdateOneWithoutCouponsNestedInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutCouponsInput, Prisma.brandsUncheckedCreateWithoutCouponsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutCouponsInput
  upsert?: Prisma.brandsUpsertWithoutCouponsInput
  disconnect?: Prisma.brandsWhereInput | boolean
  delete?: Prisma.brandsWhereInput | boolean
  connect?: Prisma.brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.brandsUpdateToOneWithWhereWithoutCouponsInput, Prisma.brandsUpdateWithoutCouponsInput>, Prisma.brandsUncheckedUpdateWithoutCouponsInput>
}

export type brandsCreateNestedOneWithoutItemsInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutItemsInput, Prisma.brandsUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutItemsInput
  connect?: Prisma.brandsWhereUniqueInput
}

export type brandsUpdateOneWithoutItemsNestedInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutItemsInput, Prisma.brandsUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutItemsInput
  upsert?: Prisma.brandsUpsertWithoutItemsInput
  disconnect?: Prisma.brandsWhereInput | boolean
  delete?: Prisma.brandsWhereInput | boolean
  connect?: Prisma.brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.brandsUpdateToOneWithWhereWithoutItemsInput, Prisma.brandsUpdateWithoutItemsInput>, Prisma.brandsUncheckedUpdateWithoutItemsInput>
}

export type brandsCreateNestedOneWithoutOption_groupsInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutOption_groupsInput, Prisma.brandsUncheckedCreateWithoutOption_groupsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutOption_groupsInput
  connect?: Prisma.brandsWhereUniqueInput
}

export type brandsUpdateOneWithoutOption_groupsNestedInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutOption_groupsInput, Prisma.brandsUncheckedCreateWithoutOption_groupsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutOption_groupsInput
  upsert?: Prisma.brandsUpsertWithoutOption_groupsInput
  disconnect?: Prisma.brandsWhereInput | boolean
  delete?: Prisma.brandsWhereInput | boolean
  connect?: Prisma.brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.brandsUpdateToOneWithWhereWithoutOption_groupsInput, Prisma.brandsUpdateWithoutOption_groupsInput>, Prisma.brandsUncheckedUpdateWithoutOption_groupsInput>
}

export type brandsCreateNestedOneWithoutPayment_typesInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutPayment_typesInput, Prisma.brandsUncheckedCreateWithoutPayment_typesInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutPayment_typesInput
  connect?: Prisma.brandsWhereUniqueInput
}

export type brandsUpdateOneWithoutPayment_typesNestedInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutPayment_typesInput, Prisma.brandsUncheckedCreateWithoutPayment_typesInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutPayment_typesInput
  upsert?: Prisma.brandsUpsertWithoutPayment_typesInput
  disconnect?: Prisma.brandsWhereInput | boolean
  delete?: Prisma.brandsWhereInput | boolean
  connect?: Prisma.brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.brandsUpdateToOneWithWhereWithoutPayment_typesInput, Prisma.brandsUpdateWithoutPayment_typesInput>, Prisma.brandsUncheckedUpdateWithoutPayment_typesInput>
}

export type brandsCreateNestedOneWithoutProductsInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutProductsInput, Prisma.brandsUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutProductsInput
  connect?: Prisma.brandsWhereUniqueInput
}

export type brandsUpdateOneWithoutProductsNestedInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutProductsInput, Prisma.brandsUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutProductsInput
  upsert?: Prisma.brandsUpsertWithoutProductsInput
  disconnect?: Prisma.brandsWhereInput | boolean
  delete?: Prisma.brandsWhereInput | boolean
  connect?: Prisma.brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.brandsUpdateToOneWithWhereWithoutProductsInput, Prisma.brandsUpdateWithoutProductsInput>, Prisma.brandsUncheckedUpdateWithoutProductsInput>
}

export type brandsCreateNestedOneWithoutStoresInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutStoresInput, Prisma.brandsUncheckedCreateWithoutStoresInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutStoresInput
  connect?: Prisma.brandsWhereUniqueInput
}

export type brandsUpdateOneWithoutStoresNestedInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutStoresInput, Prisma.brandsUncheckedCreateWithoutStoresInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutStoresInput
  upsert?: Prisma.brandsUpsertWithoutStoresInput
  disconnect?: Prisma.brandsWhereInput | boolean
  delete?: Prisma.brandsWhereInput | boolean
  connect?: Prisma.brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.brandsUpdateToOneWithWhereWithoutStoresInput, Prisma.brandsUpdateWithoutStoresInput>, Prisma.brandsUncheckedUpdateWithoutStoresInput>
}

export type brandsCreateNestedOneWithoutSub_brandsInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutSub_brandsInput, Prisma.brandsUncheckedCreateWithoutSub_brandsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutSub_brandsInput
  connect?: Prisma.brandsWhereUniqueInput
}

export type brandsUpdateOneWithoutSub_brandsNestedInput = {
  create?: Prisma.XOR<Prisma.brandsCreateWithoutSub_brandsInput, Prisma.brandsUncheckedCreateWithoutSub_brandsInput>
  connectOrCreate?: Prisma.brandsCreateOrConnectWithoutSub_brandsInput
  upsert?: Prisma.brandsUpsertWithoutSub_brandsInput
  disconnect?: Prisma.brandsWhereInput | boolean
  delete?: Prisma.brandsWhereInput | boolean
  connect?: Prisma.brandsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.brandsUpdateToOneWithWhereWithoutSub_brandsInput, Prisma.brandsUpdateWithoutSub_brandsInput>, Prisma.brandsUncheckedUpdateWithoutSub_brandsInput>
}

export type brandsCreateWithoutCategoriesInput = {
  name: string
  created_at?: Date | string | null
  channels?: Prisma.channelsCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsCreateNestedManyWithoutBrandsInput
}

export type brandsUncheckedCreateWithoutCategoriesInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  channels?: Prisma.channelsUncheckedCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsUncheckedCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesUncheckedCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsUncheckedCreateNestedManyWithoutBrandsInput
}

export type brandsCreateOrConnectWithoutCategoriesInput = {
  where: Prisma.brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.brandsCreateWithoutCategoriesInput, Prisma.brandsUncheckedCreateWithoutCategoriesInput>
}

export type brandsUpsertWithoutCategoriesInput = {
  update: Prisma.XOR<Prisma.brandsUpdateWithoutCategoriesInput, Prisma.brandsUncheckedUpdateWithoutCategoriesInput>
  create: Prisma.XOR<Prisma.brandsCreateWithoutCategoriesInput, Prisma.brandsUncheckedCreateWithoutCategoriesInput>
  where?: Prisma.brandsWhereInput
}

export type brandsUpdateToOneWithWhereWithoutCategoriesInput = {
  where?: Prisma.brandsWhereInput
  data: Prisma.XOR<Prisma.brandsUpdateWithoutCategoriesInput, Prisma.brandsUncheckedUpdateWithoutCategoriesInput>
}

export type brandsUpdateWithoutCategoriesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  channels?: Prisma.channelsUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateManyWithoutBrandsNestedInput
}

export type brandsUncheckedUpdateWithoutCategoriesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  channels?: Prisma.channelsUncheckedUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUncheckedUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUncheckedUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUncheckedUpdateManyWithoutBrandsNestedInput
}

export type brandsCreateWithoutChannelsInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsCreateNestedManyWithoutBrandsInput
}

export type brandsUncheckedCreateWithoutChannelsInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsUncheckedCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesUncheckedCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsUncheckedCreateNestedManyWithoutBrandsInput
}

export type brandsCreateOrConnectWithoutChannelsInput = {
  where: Prisma.brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.brandsCreateWithoutChannelsInput, Prisma.brandsUncheckedCreateWithoutChannelsInput>
}

export type brandsUpsertWithoutChannelsInput = {
  update: Prisma.XOR<Prisma.brandsUpdateWithoutChannelsInput, Prisma.brandsUncheckedUpdateWithoutChannelsInput>
  create: Prisma.XOR<Prisma.brandsCreateWithoutChannelsInput, Prisma.brandsUncheckedCreateWithoutChannelsInput>
  where?: Prisma.brandsWhereInput
}

export type brandsUpdateToOneWithWhereWithoutChannelsInput = {
  where?: Prisma.brandsWhereInput
  data: Prisma.XOR<Prisma.brandsUpdateWithoutChannelsInput, Prisma.brandsUncheckedUpdateWithoutChannelsInput>
}

export type brandsUpdateWithoutChannelsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateManyWithoutBrandsNestedInput
}

export type brandsUncheckedUpdateWithoutChannelsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUncheckedUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUncheckedUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUncheckedUpdateManyWithoutBrandsNestedInput
}

export type brandsCreateWithoutCouponsInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsCreateNestedManyWithoutBrandsInput
}

export type brandsUncheckedCreateWithoutCouponsInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsUncheckedCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesUncheckedCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsUncheckedCreateNestedManyWithoutBrandsInput
}

export type brandsCreateOrConnectWithoutCouponsInput = {
  where: Prisma.brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.brandsCreateWithoutCouponsInput, Prisma.brandsUncheckedCreateWithoutCouponsInput>
}

export type brandsUpsertWithoutCouponsInput = {
  update: Prisma.XOR<Prisma.brandsUpdateWithoutCouponsInput, Prisma.brandsUncheckedUpdateWithoutCouponsInput>
  create: Prisma.XOR<Prisma.brandsCreateWithoutCouponsInput, Prisma.brandsUncheckedCreateWithoutCouponsInput>
  where?: Prisma.brandsWhereInput
}

export type brandsUpdateToOneWithWhereWithoutCouponsInput = {
  where?: Prisma.brandsWhereInput
  data: Prisma.XOR<Prisma.brandsUpdateWithoutCouponsInput, Prisma.brandsUncheckedUpdateWithoutCouponsInput>
}

export type brandsUpdateWithoutCouponsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateManyWithoutBrandsNestedInput
}

export type brandsUncheckedUpdateWithoutCouponsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUncheckedUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUncheckedUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUncheckedUpdateManyWithoutBrandsNestedInput
}

export type brandsCreateWithoutItemsInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsCreateNestedManyWithoutBrandsInput
}

export type brandsUncheckedCreateWithoutItemsInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsUncheckedCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsUncheckedCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesUncheckedCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsUncheckedCreateNestedManyWithoutBrandsInput
}

export type brandsCreateOrConnectWithoutItemsInput = {
  where: Prisma.brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.brandsCreateWithoutItemsInput, Prisma.brandsUncheckedCreateWithoutItemsInput>
}

export type brandsUpsertWithoutItemsInput = {
  update: Prisma.XOR<Prisma.brandsUpdateWithoutItemsInput, Prisma.brandsUncheckedUpdateWithoutItemsInput>
  create: Prisma.XOR<Prisma.brandsCreateWithoutItemsInput, Prisma.brandsUncheckedCreateWithoutItemsInput>
  where?: Prisma.brandsWhereInput
}

export type brandsUpdateToOneWithWhereWithoutItemsInput = {
  where?: Prisma.brandsWhereInput
  data: Prisma.XOR<Prisma.brandsUpdateWithoutItemsInput, Prisma.brandsUncheckedUpdateWithoutItemsInput>
}

export type brandsUpdateWithoutItemsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateManyWithoutBrandsNestedInput
}

export type brandsUncheckedUpdateWithoutItemsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUncheckedUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUncheckedUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUncheckedUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUncheckedUpdateManyWithoutBrandsNestedInput
}

export type brandsCreateWithoutOption_groupsInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsCreateNestedManyWithoutBrandsInput
}

export type brandsUncheckedCreateWithoutOption_groupsInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsUncheckedCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsUncheckedCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesUncheckedCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsUncheckedCreateNestedManyWithoutBrandsInput
}

export type brandsCreateOrConnectWithoutOption_groupsInput = {
  where: Prisma.brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.brandsCreateWithoutOption_groupsInput, Prisma.brandsUncheckedCreateWithoutOption_groupsInput>
}

export type brandsUpsertWithoutOption_groupsInput = {
  update: Prisma.XOR<Prisma.brandsUpdateWithoutOption_groupsInput, Prisma.brandsUncheckedUpdateWithoutOption_groupsInput>
  create: Prisma.XOR<Prisma.brandsCreateWithoutOption_groupsInput, Prisma.brandsUncheckedCreateWithoutOption_groupsInput>
  where?: Prisma.brandsWhereInput
}

export type brandsUpdateToOneWithWhereWithoutOption_groupsInput = {
  where?: Prisma.brandsWhereInput
  data: Prisma.XOR<Prisma.brandsUpdateWithoutOption_groupsInput, Prisma.brandsUncheckedUpdateWithoutOption_groupsInput>
}

export type brandsUpdateWithoutOption_groupsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateManyWithoutBrandsNestedInput
}

export type brandsUncheckedUpdateWithoutOption_groupsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUncheckedUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUncheckedUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUncheckedUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUncheckedUpdateManyWithoutBrandsNestedInput
}

export type brandsCreateWithoutPayment_typesInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsCreateNestedManyWithoutBrandsInput
}

export type brandsUncheckedCreateWithoutPayment_typesInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsUncheckedCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsUncheckedCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsUncheckedCreateNestedManyWithoutBrandsInput
}

export type brandsCreateOrConnectWithoutPayment_typesInput = {
  where: Prisma.brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.brandsCreateWithoutPayment_typesInput, Prisma.brandsUncheckedCreateWithoutPayment_typesInput>
}

export type brandsUpsertWithoutPayment_typesInput = {
  update: Prisma.XOR<Prisma.brandsUpdateWithoutPayment_typesInput, Prisma.brandsUncheckedUpdateWithoutPayment_typesInput>
  create: Prisma.XOR<Prisma.brandsCreateWithoutPayment_typesInput, Prisma.brandsUncheckedCreateWithoutPayment_typesInput>
  where?: Prisma.brandsWhereInput
}

export type brandsUpdateToOneWithWhereWithoutPayment_typesInput = {
  where?: Prisma.brandsWhereInput
  data: Prisma.XOR<Prisma.brandsUpdateWithoutPayment_typesInput, Prisma.brandsUncheckedUpdateWithoutPayment_typesInput>
}

export type brandsUpdateWithoutPayment_typesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateManyWithoutBrandsNestedInput
}

export type brandsUncheckedUpdateWithoutPayment_typesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUncheckedUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUncheckedUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUncheckedUpdateManyWithoutBrandsNestedInput
}

export type brandsCreateWithoutProductsInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsCreateNestedManyWithoutBrandsInput
}

export type brandsUncheckedCreateWithoutProductsInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsUncheckedCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsUncheckedCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesUncheckedCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsUncheckedCreateNestedManyWithoutBrandsInput
}

export type brandsCreateOrConnectWithoutProductsInput = {
  where: Prisma.brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.brandsCreateWithoutProductsInput, Prisma.brandsUncheckedCreateWithoutProductsInput>
}

export type brandsUpsertWithoutProductsInput = {
  update: Prisma.XOR<Prisma.brandsUpdateWithoutProductsInput, Prisma.brandsUncheckedUpdateWithoutProductsInput>
  create: Prisma.XOR<Prisma.brandsCreateWithoutProductsInput, Prisma.brandsUncheckedCreateWithoutProductsInput>
  where?: Prisma.brandsWhereInput
}

export type brandsUpdateToOneWithWhereWithoutProductsInput = {
  where?: Prisma.brandsWhereInput
  data: Prisma.XOR<Prisma.brandsUpdateWithoutProductsInput, Prisma.brandsUncheckedUpdateWithoutProductsInput>
}

export type brandsUpdateWithoutProductsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateManyWithoutBrandsNestedInput
}

export type brandsUncheckedUpdateWithoutProductsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUncheckedUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUncheckedUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUncheckedUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUncheckedUpdateManyWithoutBrandsNestedInput
}

export type brandsCreateWithoutStoresInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsCreateNestedManyWithoutBrandsInput
}

export type brandsUncheckedCreateWithoutStoresInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsUncheckedCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsUncheckedCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesUncheckedCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutBrandsInput
  sub_brands?: Prisma.sub_brandsUncheckedCreateNestedManyWithoutBrandsInput
}

export type brandsCreateOrConnectWithoutStoresInput = {
  where: Prisma.brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.brandsCreateWithoutStoresInput, Prisma.brandsUncheckedCreateWithoutStoresInput>
}

export type brandsUpsertWithoutStoresInput = {
  update: Prisma.XOR<Prisma.brandsUpdateWithoutStoresInput, Prisma.brandsUncheckedUpdateWithoutStoresInput>
  create: Prisma.XOR<Prisma.brandsCreateWithoutStoresInput, Prisma.brandsUncheckedCreateWithoutStoresInput>
  where?: Prisma.brandsWhereInput
}

export type brandsUpdateToOneWithWhereWithoutStoresInput = {
  where?: Prisma.brandsWhereInput
  data: Prisma.XOR<Prisma.brandsUpdateWithoutStoresInput, Prisma.brandsUncheckedUpdateWithoutStoresInput>
}

export type brandsUpdateWithoutStoresInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUpdateManyWithoutBrandsNestedInput
}

export type brandsUncheckedUpdateWithoutStoresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUncheckedUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUncheckedUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUncheckedUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutBrandsNestedInput
  sub_brands?: Prisma.sub_brandsUncheckedUpdateManyWithoutBrandsNestedInput
}

export type brandsCreateWithoutSub_brandsInput = {
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesCreateNestedManyWithoutBrandsInput
}

export type brandsUncheckedCreateWithoutSub_brandsInput = {
  id?: number
  name: string
  created_at?: Date | string | null
  categories?: Prisma.categoriesUncheckedCreateNestedManyWithoutBrandsInput
  channels?: Prisma.channelsUncheckedCreateNestedManyWithoutBrandsInput
  coupons?: Prisma.couponsUncheckedCreateNestedManyWithoutBrandsInput
  items?: Prisma.itemsUncheckedCreateNestedManyWithoutBrandsInput
  option_groups?: Prisma.option_groupsUncheckedCreateNestedManyWithoutBrandsInput
  payment_types?: Prisma.payment_typesUncheckedCreateNestedManyWithoutBrandsInput
  products?: Prisma.productsUncheckedCreateNestedManyWithoutBrandsInput
  stores?: Prisma.storesUncheckedCreateNestedManyWithoutBrandsInput
}

export type brandsCreateOrConnectWithoutSub_brandsInput = {
  where: Prisma.brandsWhereUniqueInput
  create: Prisma.XOR<Prisma.brandsCreateWithoutSub_brandsInput, Prisma.brandsUncheckedCreateWithoutSub_brandsInput>
}

export type brandsUpsertWithoutSub_brandsInput = {
  update: Prisma.XOR<Prisma.brandsUpdateWithoutSub_brandsInput, Prisma.brandsUncheckedUpdateWithoutSub_brandsInput>
  create: Prisma.XOR<Prisma.brandsCreateWithoutSub_brandsInput, Prisma.brandsUncheckedCreateWithoutSub_brandsInput>
  where?: Prisma.brandsWhereInput
}

export type brandsUpdateToOneWithWhereWithoutSub_brandsInput = {
  where?: Prisma.brandsWhereInput
  data: Prisma.XOR<Prisma.brandsUpdateWithoutSub_brandsInput, Prisma.brandsUncheckedUpdateWithoutSub_brandsInput>
}

export type brandsUpdateWithoutSub_brandsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUpdateManyWithoutBrandsNestedInput
}

export type brandsUncheckedUpdateWithoutSub_brandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categories?: Prisma.categoriesUncheckedUpdateManyWithoutBrandsNestedInput
  channels?: Prisma.channelsUncheckedUpdateManyWithoutBrandsNestedInput
  coupons?: Prisma.couponsUncheckedUpdateManyWithoutBrandsNestedInput
  items?: Prisma.itemsUncheckedUpdateManyWithoutBrandsNestedInput
  option_groups?: Prisma.option_groupsUncheckedUpdateManyWithoutBrandsNestedInput
  payment_types?: Prisma.payment_typesUncheckedUpdateManyWithoutBrandsNestedInput
  products?: Prisma.productsUncheckedUpdateManyWithoutBrandsNestedInput
  stores?: Prisma.storesUncheckedUpdateManyWithoutBrandsNestedInput
}


/**
 * Count Type BrandsCountOutputType
 */

export type BrandsCountOutputType = {
  categories: number
  channels: number
  coupons: number
  items: number
  option_groups: number
  payment_types: number
  products: number
  stores: number
  sub_brands: number
}

export type BrandsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  categories?: boolean | BrandsCountOutputTypeCountCategoriesArgs
  channels?: boolean | BrandsCountOutputTypeCountChannelsArgs
  coupons?: boolean | BrandsCountOutputTypeCountCouponsArgs
  items?: boolean | BrandsCountOutputTypeCountItemsArgs
  option_groups?: boolean | BrandsCountOutputTypeCountOption_groupsArgs
  payment_types?: boolean | BrandsCountOutputTypeCountPayment_typesArgs
  products?: boolean | BrandsCountOutputTypeCountProductsArgs
  stores?: boolean | BrandsCountOutputTypeCountStoresArgs
  sub_brands?: boolean | BrandsCountOutputTypeCountSub_brandsArgs
}

/**
 * BrandsCountOutputType without action
 */
export type BrandsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BrandsCountOutputType
   */
  select?: Prisma.BrandsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BrandsCountOutputType without action
 */
export type BrandsCountOutputTypeCountCategoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.categoriesWhereInput
}

/**
 * BrandsCountOutputType without action
 */
export type BrandsCountOutputTypeCountChannelsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.channelsWhereInput
}

/**
 * BrandsCountOutputType without action
 */
export type BrandsCountOutputTypeCountCouponsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.couponsWhereInput
}

/**
 * BrandsCountOutputType without action
 */
export type BrandsCountOutputTypeCountItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.itemsWhereInput
}

/**
 * BrandsCountOutputType without action
 */
export type BrandsCountOutputTypeCountOption_groupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.option_groupsWhereInput
}

/**
 * BrandsCountOutputType without action
 */
export type BrandsCountOutputTypeCountPayment_typesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.payment_typesWhereInput
}

/**
 * BrandsCountOutputType without action
 */
export type BrandsCountOutputTypeCountProductsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.productsWhereInput
}

/**
 * BrandsCountOutputType without action
 */
export type BrandsCountOutputTypeCountStoresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.storesWhereInput
}

/**
 * BrandsCountOutputType without action
 */
export type BrandsCountOutputTypeCountSub_brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.sub_brandsWhereInput
}


export type brandsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  created_at?: boolean
  categories?: boolean | Prisma.brands$categoriesArgs<ExtArgs>
  channels?: boolean | Prisma.brands$channelsArgs<ExtArgs>
  coupons?: boolean | Prisma.brands$couponsArgs<ExtArgs>
  items?: boolean | Prisma.brands$itemsArgs<ExtArgs>
  option_groups?: boolean | Prisma.brands$option_groupsArgs<ExtArgs>
  payment_types?: boolean | Prisma.brands$payment_typesArgs<ExtArgs>
  products?: boolean | Prisma.brands$productsArgs<ExtArgs>
  stores?: boolean | Prisma.brands$storesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.brands$sub_brandsArgs<ExtArgs>
  _count?: boolean | Prisma.BrandsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["brands"]>

export type brandsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  created_at?: boolean
}, ExtArgs["result"]["brands"]>

export type brandsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  created_at?: boolean
}, ExtArgs["result"]["brands"]>

export type brandsSelectScalar = {
  id?: boolean
  name?: boolean
  created_at?: boolean
}

export type brandsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "created_at", ExtArgs["result"]["brands"]>
export type brandsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  categories?: boolean | Prisma.brands$categoriesArgs<ExtArgs>
  channels?: boolean | Prisma.brands$channelsArgs<ExtArgs>
  coupons?: boolean | Prisma.brands$couponsArgs<ExtArgs>
  items?: boolean | Prisma.brands$itemsArgs<ExtArgs>
  option_groups?: boolean | Prisma.brands$option_groupsArgs<ExtArgs>
  payment_types?: boolean | Prisma.brands$payment_typesArgs<ExtArgs>
  products?: boolean | Prisma.brands$productsArgs<ExtArgs>
  stores?: boolean | Prisma.brands$storesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.brands$sub_brandsArgs<ExtArgs>
  _count?: boolean | Prisma.BrandsCountOutputTypeDefaultArgs<ExtArgs>
}
export type brandsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type brandsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $brandsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "brands"
  objects: {
    categories: Prisma.$categoriesPayload<ExtArgs>[]
    channels: Prisma.$channelsPayload<ExtArgs>[]
    coupons: Prisma.$couponsPayload<ExtArgs>[]
    items: Prisma.$itemsPayload<ExtArgs>[]
    option_groups: Prisma.$option_groupsPayload<ExtArgs>[]
    payment_types: Prisma.$payment_typesPayload<ExtArgs>[]
    products: Prisma.$productsPayload<ExtArgs>[]
    stores: Prisma.$storesPayload<ExtArgs>[]
    sub_brands: Prisma.$sub_brandsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    created_at: Date | null
  }, ExtArgs["result"]["brands"]>
  composites: {}
}

export type brandsGetPayload<S extends boolean | null | undefined | brandsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$brandsPayload, S>

export type brandsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<brandsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BrandsCountAggregateInputType | true
  }

export interface brandsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['brands'], meta: { name: 'brands' } }
  /**
   * Find zero or one Brands that matches the filter.
   * @param {brandsFindUniqueArgs} args - Arguments to find a Brands
   * @example
   * // Get one Brands
   * const brands = await prisma.brands.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends brandsFindUniqueArgs>(args: Prisma.SelectSubset<T, brandsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Brands that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {brandsFindUniqueOrThrowArgs} args - Arguments to find a Brands
   * @example
   * // Get one Brands
   * const brands = await prisma.brands.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends brandsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, brandsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Brands that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {brandsFindFirstArgs} args - Arguments to find a Brands
   * @example
   * // Get one Brands
   * const brands = await prisma.brands.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends brandsFindFirstArgs>(args?: Prisma.SelectSubset<T, brandsFindFirstArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Brands that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {brandsFindFirstOrThrowArgs} args - Arguments to find a Brands
   * @example
   * // Get one Brands
   * const brands = await prisma.brands.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends brandsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, brandsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Brands that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {brandsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Brands
   * const brands = await prisma.brands.findMany()
   * 
   * // Get first 10 Brands
   * const brands = await prisma.brands.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const brandsWithIdOnly = await prisma.brands.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends brandsFindManyArgs>(args?: Prisma.SelectSubset<T, brandsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Brands.
   * @param {brandsCreateArgs} args - Arguments to create a Brands.
   * @example
   * // Create one Brands
   * const Brands = await prisma.brands.create({
   *   data: {
   *     // ... data to create a Brands
   *   }
   * })
   * 
   */
  create<T extends brandsCreateArgs>(args: Prisma.SelectSubset<T, brandsCreateArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Brands.
   * @param {brandsCreateManyArgs} args - Arguments to create many Brands.
   * @example
   * // Create many Brands
   * const brands = await prisma.brands.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends brandsCreateManyArgs>(args?: Prisma.SelectSubset<T, brandsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Brands and returns the data saved in the database.
   * @param {brandsCreateManyAndReturnArgs} args - Arguments to create many Brands.
   * @example
   * // Create many Brands
   * const brands = await prisma.brands.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Brands and only return the `id`
   * const brandsWithIdOnly = await prisma.brands.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends brandsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, brandsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Brands.
   * @param {brandsDeleteArgs} args - Arguments to delete one Brands.
   * @example
   * // Delete one Brands
   * const Brands = await prisma.brands.delete({
   *   where: {
   *     // ... filter to delete one Brands
   *   }
   * })
   * 
   */
  delete<T extends brandsDeleteArgs>(args: Prisma.SelectSubset<T, brandsDeleteArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Brands.
   * @param {brandsUpdateArgs} args - Arguments to update one Brands.
   * @example
   * // Update one Brands
   * const brands = await prisma.brands.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends brandsUpdateArgs>(args: Prisma.SelectSubset<T, brandsUpdateArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Brands.
   * @param {brandsDeleteManyArgs} args - Arguments to filter Brands to delete.
   * @example
   * // Delete a few Brands
   * const { count } = await prisma.brands.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends brandsDeleteManyArgs>(args?: Prisma.SelectSubset<T, brandsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Brands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {brandsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Brands
   * const brands = await prisma.brands.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends brandsUpdateManyArgs>(args: Prisma.SelectSubset<T, brandsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Brands and returns the data updated in the database.
   * @param {brandsUpdateManyAndReturnArgs} args - Arguments to update many Brands.
   * @example
   * // Update many Brands
   * const brands = await prisma.brands.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Brands and only return the `id`
   * const brandsWithIdOnly = await prisma.brands.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends brandsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, brandsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Brands.
   * @param {brandsUpsertArgs} args - Arguments to update or create a Brands.
   * @example
   * // Update or create a Brands
   * const brands = await prisma.brands.upsert({
   *   create: {
   *     // ... data to create a Brands
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Brands we want to update
   *   }
   * })
   */
  upsert<T extends brandsUpsertArgs>(args: Prisma.SelectSubset<T, brandsUpsertArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Brands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {brandsCountArgs} args - Arguments to filter Brands to count.
   * @example
   * // Count the number of Brands
   * const count = await prisma.brands.count({
   *   where: {
   *     // ... the filter for the Brands we want to count
   *   }
   * })
  **/
  count<T extends brandsCountArgs>(
    args?: Prisma.Subset<T, brandsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BrandsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Brands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BrandsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BrandsAggregateArgs>(args: Prisma.Subset<T, BrandsAggregateArgs>): Prisma.PrismaPromise<GetBrandsAggregateType<T>>

  /**
   * Group by Brands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {brandsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends brandsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: brandsGroupByArgs['orderBy'] }
      : { orderBy?: brandsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, brandsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the brands model
 */
readonly fields: brandsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for brands.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__brandsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  categories<T extends Prisma.brands$categoriesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.brands$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  channels<T extends Prisma.brands$channelsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.brands$channelsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  coupons<T extends Prisma.brands$couponsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.brands$couponsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  items<T extends Prisma.brands$itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.brands$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  option_groups<T extends Prisma.brands$option_groupsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.brands$option_groupsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$option_groupsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  payment_types<T extends Prisma.brands$payment_typesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.brands$payment_typesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$payment_typesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  products<T extends Prisma.brands$productsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.brands$productsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  stores<T extends Prisma.brands$storesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.brands$storesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$storesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  sub_brands<T extends Prisma.brands$sub_brandsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.brands$sub_brandsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the brands model
 */
export interface brandsFieldRefs {
  readonly id: Prisma.FieldRef<"brands", 'Int'>
  readonly name: Prisma.FieldRef<"brands", 'String'>
  readonly created_at: Prisma.FieldRef<"brands", 'DateTime'>
}
    

// Custom InputTypes
/**
 * brands findUnique
 */
export type brandsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  /**
   * Filter, which brands to fetch.
   */
  where: Prisma.brandsWhereUniqueInput
}

/**
 * brands findUniqueOrThrow
 */
export type brandsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  /**
   * Filter, which brands to fetch.
   */
  where: Prisma.brandsWhereUniqueInput
}

/**
 * brands findFirst
 */
export type brandsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  /**
   * Filter, which brands to fetch.
   */
  where?: Prisma.brandsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of brands to fetch.
   */
  orderBy?: Prisma.brandsOrderByWithRelationInput | Prisma.brandsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for brands.
   */
  cursor?: Prisma.brandsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` brands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of brands.
   */
  distinct?: Prisma.BrandsScalarFieldEnum | Prisma.BrandsScalarFieldEnum[]
}

/**
 * brands findFirstOrThrow
 */
export type brandsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  /**
   * Filter, which brands to fetch.
   */
  where?: Prisma.brandsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of brands to fetch.
   */
  orderBy?: Prisma.brandsOrderByWithRelationInput | Prisma.brandsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for brands.
   */
  cursor?: Prisma.brandsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` brands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of brands.
   */
  distinct?: Prisma.BrandsScalarFieldEnum | Prisma.BrandsScalarFieldEnum[]
}

/**
 * brands findMany
 */
export type brandsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  /**
   * Filter, which brands to fetch.
   */
  where?: Prisma.brandsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of brands to fetch.
   */
  orderBy?: Prisma.brandsOrderByWithRelationInput | Prisma.brandsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing brands.
   */
  cursor?: Prisma.brandsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` brands.
   */
  skip?: number
  distinct?: Prisma.BrandsScalarFieldEnum | Prisma.BrandsScalarFieldEnum[]
}

/**
 * brands create
 */
export type brandsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  /**
   * The data needed to create a brands.
   */
  data: Prisma.XOR<Prisma.brandsCreateInput, Prisma.brandsUncheckedCreateInput>
}

/**
 * brands createMany
 */
export type brandsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many brands.
   */
  data: Prisma.brandsCreateManyInput | Prisma.brandsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * brands createManyAndReturn
 */
export type brandsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * The data used to create many brands.
   */
  data: Prisma.brandsCreateManyInput | Prisma.brandsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * brands update
 */
export type brandsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  /**
   * The data needed to update a brands.
   */
  data: Prisma.XOR<Prisma.brandsUpdateInput, Prisma.brandsUncheckedUpdateInput>
  /**
   * Choose, which brands to update.
   */
  where: Prisma.brandsWhereUniqueInput
}

/**
 * brands updateMany
 */
export type brandsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update brands.
   */
  data: Prisma.XOR<Prisma.brandsUpdateManyMutationInput, Prisma.brandsUncheckedUpdateManyInput>
  /**
   * Filter which brands to update
   */
  where?: Prisma.brandsWhereInput
  /**
   * Limit how many brands to update.
   */
  limit?: number
}

/**
 * brands updateManyAndReturn
 */
export type brandsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * The data used to update brands.
   */
  data: Prisma.XOR<Prisma.brandsUpdateManyMutationInput, Prisma.brandsUncheckedUpdateManyInput>
  /**
   * Filter which brands to update
   */
  where?: Prisma.brandsWhereInput
  /**
   * Limit how many brands to update.
   */
  limit?: number
}

/**
 * brands upsert
 */
export type brandsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  /**
   * The filter to search for the brands to update in case it exists.
   */
  where: Prisma.brandsWhereUniqueInput
  /**
   * In case the brands found by the `where` argument doesn't exist, create a new brands with this data.
   */
  create: Prisma.XOR<Prisma.brandsCreateInput, Prisma.brandsUncheckedCreateInput>
  /**
   * In case the brands was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.brandsUpdateInput, Prisma.brandsUncheckedUpdateInput>
}

/**
 * brands delete
 */
export type brandsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
  /**
   * Filter which brands to delete.
   */
  where: Prisma.brandsWhereUniqueInput
}

/**
 * brands deleteMany
 */
export type brandsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which brands to delete
   */
  where?: Prisma.brandsWhereInput
  /**
   * Limit how many brands to delete.
   */
  limit?: number
}

/**
 * brands.categories
 */
export type brands$categoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the categories
   */
  select?: Prisma.categoriesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the categories
   */
  omit?: Prisma.categoriesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.categoriesInclude<ExtArgs> | null
  where?: Prisma.categoriesWhereInput
  orderBy?: Prisma.categoriesOrderByWithRelationInput | Prisma.categoriesOrderByWithRelationInput[]
  cursor?: Prisma.categoriesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CategoriesScalarFieldEnum | Prisma.CategoriesScalarFieldEnum[]
}

/**
 * brands.channels
 */
export type brands$channelsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the channels
   */
  select?: Prisma.channelsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the channels
   */
  omit?: Prisma.channelsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.channelsInclude<ExtArgs> | null
  where?: Prisma.channelsWhereInput
  orderBy?: Prisma.channelsOrderByWithRelationInput | Prisma.channelsOrderByWithRelationInput[]
  cursor?: Prisma.channelsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChannelsScalarFieldEnum | Prisma.ChannelsScalarFieldEnum[]
}

/**
 * brands.coupons
 */
export type brands$couponsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  where?: Prisma.couponsWhereInput
  orderBy?: Prisma.couponsOrderByWithRelationInput | Prisma.couponsOrderByWithRelationInput[]
  cursor?: Prisma.couponsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CouponsScalarFieldEnum | Prisma.CouponsScalarFieldEnum[]
}

/**
 * brands.items
 */
export type brands$itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the items
   */
  select?: Prisma.itemsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the items
   */
  omit?: Prisma.itemsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.itemsInclude<ExtArgs> | null
  where?: Prisma.itemsWhereInput
  orderBy?: Prisma.itemsOrderByWithRelationInput | Prisma.itemsOrderByWithRelationInput[]
  cursor?: Prisma.itemsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ItemsScalarFieldEnum | Prisma.ItemsScalarFieldEnum[]
}

/**
 * brands.option_groups
 */
export type brands$option_groupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the option_groups
   */
  select?: Prisma.option_groupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the option_groups
   */
  omit?: Prisma.option_groupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.option_groupsInclude<ExtArgs> | null
  where?: Prisma.option_groupsWhereInput
  orderBy?: Prisma.option_groupsOrderByWithRelationInput | Prisma.option_groupsOrderByWithRelationInput[]
  cursor?: Prisma.option_groupsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Option_groupsScalarFieldEnum | Prisma.Option_groupsScalarFieldEnum[]
}

/**
 * brands.payment_types
 */
export type brands$payment_typesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the payment_types
   */
  select?: Prisma.payment_typesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the payment_types
   */
  omit?: Prisma.payment_typesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.payment_typesInclude<ExtArgs> | null
  where?: Prisma.payment_typesWhereInput
  orderBy?: Prisma.payment_typesOrderByWithRelationInput | Prisma.payment_typesOrderByWithRelationInput[]
  cursor?: Prisma.payment_typesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Payment_typesScalarFieldEnum | Prisma.Payment_typesScalarFieldEnum[]
}

/**
 * brands.products
 */
export type brands$productsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the products
   */
  select?: Prisma.productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the products
   */
  omit?: Prisma.productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.productsInclude<ExtArgs> | null
  where?: Prisma.productsWhereInput
  orderBy?: Prisma.productsOrderByWithRelationInput | Prisma.productsOrderByWithRelationInput[]
  cursor?: Prisma.productsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductsScalarFieldEnum | Prisma.ProductsScalarFieldEnum[]
}

/**
 * brands.stores
 */
export type brands$storesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the stores
   */
  select?: Prisma.storesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the stores
   */
  omit?: Prisma.storesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.storesInclude<ExtArgs> | null
  where?: Prisma.storesWhereInput
  orderBy?: Prisma.storesOrderByWithRelationInput | Prisma.storesOrderByWithRelationInput[]
  cursor?: Prisma.storesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.StoresScalarFieldEnum | Prisma.StoresScalarFieldEnum[]
}

/**
 * brands.sub_brands
 */
export type brands$sub_brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  where?: Prisma.sub_brandsWhereInput
  orderBy?: Prisma.sub_brandsOrderByWithRelationInput | Prisma.sub_brandsOrderByWithRelationInput[]
  cursor?: Prisma.sub_brandsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Sub_brandsScalarFieldEnum | Prisma.Sub_brandsScalarFieldEnum[]
}

/**
 * brands without action
 */
export type brandsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the brands
   */
  select?: Prisma.brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the brands
   */
  omit?: Prisma.brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.brandsInclude<ExtArgs> | null
}
