
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `coupon_sales` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model coupon_sales
 * 
 */
export type coupon_salesModel = runtime.Types.Result.DefaultSelection<Prisma.$coupon_salesPayload>

export type AggregateCoupon_sales = {
  _count: Coupon_salesCountAggregateOutputType | null
  _avg: Coupon_salesAvgAggregateOutputType | null
  _sum: Coupon_salesSumAggregateOutputType | null
  _min: Coupon_salesMinAggregateOutputType | null
  _max: Coupon_salesMaxAggregateOutputType | null
}

export type Coupon_salesAvgAggregateOutputType = {
  id: number | null
  sale_id: number | null
  coupon_id: number | null
  value: number | null
}

export type Coupon_salesSumAggregateOutputType = {
  id: number | null
  sale_id: number | null
  coupon_id: number | null
  value: number | null
}

export type Coupon_salesMinAggregateOutputType = {
  id: number | null
  sale_id: number | null
  coupon_id: number | null
  value: number | null
  target: string | null
  sponsorship: string | null
}

export type Coupon_salesMaxAggregateOutputType = {
  id: number | null
  sale_id: number | null
  coupon_id: number | null
  value: number | null
  target: string | null
  sponsorship: string | null
}

export type Coupon_salesCountAggregateOutputType = {
  id: number
  sale_id: number
  coupon_id: number
  value: number
  target: number
  sponsorship: number
  _all: number
}


export type Coupon_salesAvgAggregateInputType = {
  id?: true
  sale_id?: true
  coupon_id?: true
  value?: true
}

export type Coupon_salesSumAggregateInputType = {
  id?: true
  sale_id?: true
  coupon_id?: true
  value?: true
}

export type Coupon_salesMinAggregateInputType = {
  id?: true
  sale_id?: true
  coupon_id?: true
  value?: true
  target?: true
  sponsorship?: true
}

export type Coupon_salesMaxAggregateInputType = {
  id?: true
  sale_id?: true
  coupon_id?: true
  value?: true
  target?: true
  sponsorship?: true
}

export type Coupon_salesCountAggregateInputType = {
  id?: true
  sale_id?: true
  coupon_id?: true
  value?: true
  target?: true
  sponsorship?: true
  _all?: true
}

export type Coupon_salesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which coupon_sales to aggregate.
   */
  where?: Prisma.coupon_salesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupon_sales to fetch.
   */
  orderBy?: Prisma.coupon_salesOrderByWithRelationInput | Prisma.coupon_salesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.coupon_salesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupon_sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupon_sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned coupon_sales
  **/
  _count?: true | Coupon_salesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Coupon_salesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Coupon_salesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Coupon_salesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Coupon_salesMaxAggregateInputType
}

export type GetCoupon_salesAggregateType<T extends Coupon_salesAggregateArgs> = {
      [P in keyof T & keyof AggregateCoupon_sales]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCoupon_sales[P]>
    : Prisma.GetScalarType<T[P], AggregateCoupon_sales[P]>
}




export type coupon_salesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.coupon_salesWhereInput
  orderBy?: Prisma.coupon_salesOrderByWithAggregationInput | Prisma.coupon_salesOrderByWithAggregationInput[]
  by: Prisma.Coupon_salesScalarFieldEnum[] | Prisma.Coupon_salesScalarFieldEnum
  having?: Prisma.coupon_salesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Coupon_salesCountAggregateInputType | true
  _avg?: Coupon_salesAvgAggregateInputType
  _sum?: Coupon_salesSumAggregateInputType
  _min?: Coupon_salesMinAggregateInputType
  _max?: Coupon_salesMaxAggregateInputType
}

export type Coupon_salesGroupByOutputType = {
  id: number
  sale_id: number | null
  coupon_id: number | null
  value: number | null
  target: string | null
  sponsorship: string | null
  _count: Coupon_salesCountAggregateOutputType | null
  _avg: Coupon_salesAvgAggregateOutputType | null
  _sum: Coupon_salesSumAggregateOutputType | null
  _min: Coupon_salesMinAggregateOutputType | null
  _max: Coupon_salesMaxAggregateOutputType | null
}

type GetCoupon_salesGroupByPayload<T extends coupon_salesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Coupon_salesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Coupon_salesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Coupon_salesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Coupon_salesGroupByOutputType[P]>
      }
    >
  >



export type coupon_salesWhereInput = {
  AND?: Prisma.coupon_salesWhereInput | Prisma.coupon_salesWhereInput[]
  OR?: Prisma.coupon_salesWhereInput[]
  NOT?: Prisma.coupon_salesWhereInput | Prisma.coupon_salesWhereInput[]
  id?: Prisma.IntFilter<"coupon_sales"> | number
  sale_id?: Prisma.IntNullableFilter<"coupon_sales"> | number | null
  coupon_id?: Prisma.IntNullableFilter<"coupon_sales"> | number | null
  value?: Prisma.FloatNullableFilter<"coupon_sales"> | number | null
  target?: Prisma.StringNullableFilter<"coupon_sales"> | string | null
  sponsorship?: Prisma.StringNullableFilter<"coupon_sales"> | string | null
  coupons?: Prisma.XOR<Prisma.CouponsNullableScalarRelationFilter, Prisma.couponsWhereInput> | null
  sales?: Prisma.XOR<Prisma.SalesNullableScalarRelationFilter, Prisma.salesWhereInput> | null
}

export type coupon_salesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrderInput | Prisma.SortOrder
  coupon_id?: Prisma.SortOrderInput | Prisma.SortOrder
  value?: Prisma.SortOrderInput | Prisma.SortOrder
  target?: Prisma.SortOrderInput | Prisma.SortOrder
  sponsorship?: Prisma.SortOrderInput | Prisma.SortOrder
  coupons?: Prisma.couponsOrderByWithRelationInput
  sales?: Prisma.salesOrderByWithRelationInput
}

export type coupon_salesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.coupon_salesWhereInput | Prisma.coupon_salesWhereInput[]
  OR?: Prisma.coupon_salesWhereInput[]
  NOT?: Prisma.coupon_salesWhereInput | Prisma.coupon_salesWhereInput[]
  sale_id?: Prisma.IntNullableFilter<"coupon_sales"> | number | null
  coupon_id?: Prisma.IntNullableFilter<"coupon_sales"> | number | null
  value?: Prisma.FloatNullableFilter<"coupon_sales"> | number | null
  target?: Prisma.StringNullableFilter<"coupon_sales"> | string | null
  sponsorship?: Prisma.StringNullableFilter<"coupon_sales"> | string | null
  coupons?: Prisma.XOR<Prisma.CouponsNullableScalarRelationFilter, Prisma.couponsWhereInput> | null
  sales?: Prisma.XOR<Prisma.SalesNullableScalarRelationFilter, Prisma.salesWhereInput> | null
}, "id">

export type coupon_salesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrderInput | Prisma.SortOrder
  coupon_id?: Prisma.SortOrderInput | Prisma.SortOrder
  value?: Prisma.SortOrderInput | Prisma.SortOrder
  target?: Prisma.SortOrderInput | Prisma.SortOrder
  sponsorship?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.coupon_salesCountOrderByAggregateInput
  _avg?: Prisma.coupon_salesAvgOrderByAggregateInput
  _max?: Prisma.coupon_salesMaxOrderByAggregateInput
  _min?: Prisma.coupon_salesMinOrderByAggregateInput
  _sum?: Prisma.coupon_salesSumOrderByAggregateInput
}

export type coupon_salesScalarWhereWithAggregatesInput = {
  AND?: Prisma.coupon_salesScalarWhereWithAggregatesInput | Prisma.coupon_salesScalarWhereWithAggregatesInput[]
  OR?: Prisma.coupon_salesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.coupon_salesScalarWhereWithAggregatesInput | Prisma.coupon_salesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"coupon_sales"> | number
  sale_id?: Prisma.IntNullableWithAggregatesFilter<"coupon_sales"> | number | null
  coupon_id?: Prisma.IntNullableWithAggregatesFilter<"coupon_sales"> | number | null
  value?: Prisma.FloatNullableWithAggregatesFilter<"coupon_sales"> | number | null
  target?: Prisma.StringNullableWithAggregatesFilter<"coupon_sales"> | string | null
  sponsorship?: Prisma.StringNullableWithAggregatesFilter<"coupon_sales"> | string | null
}

export type coupon_salesCreateInput = {
  value?: number | null
  target?: string | null
  sponsorship?: string | null
  coupons?: Prisma.couponsCreateNestedOneWithoutCoupon_salesInput
  sales?: Prisma.salesCreateNestedOneWithoutCoupon_salesInput
}

export type coupon_salesUncheckedCreateInput = {
  id?: number
  sale_id?: number | null
  coupon_id?: number | null
  value?: number | null
  target?: string | null
  sponsorship?: string | null
}

export type coupon_salesUpdateInput = {
  value?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sponsorship?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coupons?: Prisma.couponsUpdateOneWithoutCoupon_salesNestedInput
  sales?: Prisma.salesUpdateOneWithoutCoupon_salesNestedInput
}

export type coupon_salesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sale_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  coupon_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  value?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sponsorship?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type coupon_salesCreateManyInput = {
  id?: number
  sale_id?: number | null
  coupon_id?: number | null
  value?: number | null
  target?: string | null
  sponsorship?: string | null
}

export type coupon_salesUpdateManyMutationInput = {
  value?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sponsorship?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type coupon_salesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sale_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  coupon_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  value?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sponsorship?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type coupon_salesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  coupon_id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  target?: Prisma.SortOrder
  sponsorship?: Prisma.SortOrder
}

export type coupon_salesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  coupon_id?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type coupon_salesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  coupon_id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  target?: Prisma.SortOrder
  sponsorship?: Prisma.SortOrder
}

export type coupon_salesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  coupon_id?: Prisma.SortOrder
  value?: Prisma.SortOrder
  target?: Prisma.SortOrder
  sponsorship?: Prisma.SortOrder
}

export type coupon_salesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  coupon_id?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type Coupon_salesListRelationFilter = {
  every?: Prisma.coupon_salesWhereInput
  some?: Prisma.coupon_salesWhereInput
  none?: Prisma.coupon_salesWhereInput
}

export type coupon_salesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type coupon_salesCreateNestedManyWithoutCouponsInput = {
  create?: Prisma.XOR<Prisma.coupon_salesCreateWithoutCouponsInput, Prisma.coupon_salesUncheckedCreateWithoutCouponsInput> | Prisma.coupon_salesCreateWithoutCouponsInput[] | Prisma.coupon_salesUncheckedCreateWithoutCouponsInput[]
  connectOrCreate?: Prisma.coupon_salesCreateOrConnectWithoutCouponsInput | Prisma.coupon_salesCreateOrConnectWithoutCouponsInput[]
  createMany?: Prisma.coupon_salesCreateManyCouponsInputEnvelope
  connect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
}

export type coupon_salesUncheckedCreateNestedManyWithoutCouponsInput = {
  create?: Prisma.XOR<Prisma.coupon_salesCreateWithoutCouponsInput, Prisma.coupon_salesUncheckedCreateWithoutCouponsInput> | Prisma.coupon_salesCreateWithoutCouponsInput[] | Prisma.coupon_salesUncheckedCreateWithoutCouponsInput[]
  connectOrCreate?: Prisma.coupon_salesCreateOrConnectWithoutCouponsInput | Prisma.coupon_salesCreateOrConnectWithoutCouponsInput[]
  createMany?: Prisma.coupon_salesCreateManyCouponsInputEnvelope
  connect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
}

export type coupon_salesUpdateManyWithoutCouponsNestedInput = {
  create?: Prisma.XOR<Prisma.coupon_salesCreateWithoutCouponsInput, Prisma.coupon_salesUncheckedCreateWithoutCouponsInput> | Prisma.coupon_salesCreateWithoutCouponsInput[] | Prisma.coupon_salesUncheckedCreateWithoutCouponsInput[]
  connectOrCreate?: Prisma.coupon_salesCreateOrConnectWithoutCouponsInput | Prisma.coupon_salesCreateOrConnectWithoutCouponsInput[]
  upsert?: Prisma.coupon_salesUpsertWithWhereUniqueWithoutCouponsInput | Prisma.coupon_salesUpsertWithWhereUniqueWithoutCouponsInput[]
  createMany?: Prisma.coupon_salesCreateManyCouponsInputEnvelope
  set?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  disconnect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  delete?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  connect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  update?: Prisma.coupon_salesUpdateWithWhereUniqueWithoutCouponsInput | Prisma.coupon_salesUpdateWithWhereUniqueWithoutCouponsInput[]
  updateMany?: Prisma.coupon_salesUpdateManyWithWhereWithoutCouponsInput | Prisma.coupon_salesUpdateManyWithWhereWithoutCouponsInput[]
  deleteMany?: Prisma.coupon_salesScalarWhereInput | Prisma.coupon_salesScalarWhereInput[]
}

export type coupon_salesUncheckedUpdateManyWithoutCouponsNestedInput = {
  create?: Prisma.XOR<Prisma.coupon_salesCreateWithoutCouponsInput, Prisma.coupon_salesUncheckedCreateWithoutCouponsInput> | Prisma.coupon_salesCreateWithoutCouponsInput[] | Prisma.coupon_salesUncheckedCreateWithoutCouponsInput[]
  connectOrCreate?: Prisma.coupon_salesCreateOrConnectWithoutCouponsInput | Prisma.coupon_salesCreateOrConnectWithoutCouponsInput[]
  upsert?: Prisma.coupon_salesUpsertWithWhereUniqueWithoutCouponsInput | Prisma.coupon_salesUpsertWithWhereUniqueWithoutCouponsInput[]
  createMany?: Prisma.coupon_salesCreateManyCouponsInputEnvelope
  set?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  disconnect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  delete?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  connect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  update?: Prisma.coupon_salesUpdateWithWhereUniqueWithoutCouponsInput | Prisma.coupon_salesUpdateWithWhereUniqueWithoutCouponsInput[]
  updateMany?: Prisma.coupon_salesUpdateManyWithWhereWithoutCouponsInput | Prisma.coupon_salesUpdateManyWithWhereWithoutCouponsInput[]
  deleteMany?: Prisma.coupon_salesScalarWhereInput | Prisma.coupon_salesScalarWhereInput[]
}

export type coupon_salesCreateNestedManyWithoutSalesInput = {
  create?: Prisma.XOR<Prisma.coupon_salesCreateWithoutSalesInput, Prisma.coupon_salesUncheckedCreateWithoutSalesInput> | Prisma.coupon_salesCreateWithoutSalesInput[] | Prisma.coupon_salesUncheckedCreateWithoutSalesInput[]
  connectOrCreate?: Prisma.coupon_salesCreateOrConnectWithoutSalesInput | Prisma.coupon_salesCreateOrConnectWithoutSalesInput[]
  createMany?: Prisma.coupon_salesCreateManySalesInputEnvelope
  connect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
}

export type coupon_salesUncheckedCreateNestedManyWithoutSalesInput = {
  create?: Prisma.XOR<Prisma.coupon_salesCreateWithoutSalesInput, Prisma.coupon_salesUncheckedCreateWithoutSalesInput> | Prisma.coupon_salesCreateWithoutSalesInput[] | Prisma.coupon_salesUncheckedCreateWithoutSalesInput[]
  connectOrCreate?: Prisma.coupon_salesCreateOrConnectWithoutSalesInput | Prisma.coupon_salesCreateOrConnectWithoutSalesInput[]
  createMany?: Prisma.coupon_salesCreateManySalesInputEnvelope
  connect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
}

export type coupon_salesUpdateManyWithoutSalesNestedInput = {
  create?: Prisma.XOR<Prisma.coupon_salesCreateWithoutSalesInput, Prisma.coupon_salesUncheckedCreateWithoutSalesInput> | Prisma.coupon_salesCreateWithoutSalesInput[] | Prisma.coupon_salesUncheckedCreateWithoutSalesInput[]
  connectOrCreate?: Prisma.coupon_salesCreateOrConnectWithoutSalesInput | Prisma.coupon_salesCreateOrConnectWithoutSalesInput[]
  upsert?: Prisma.coupon_salesUpsertWithWhereUniqueWithoutSalesInput | Prisma.coupon_salesUpsertWithWhereUniqueWithoutSalesInput[]
  createMany?: Prisma.coupon_salesCreateManySalesInputEnvelope
  set?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  disconnect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  delete?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  connect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  update?: Prisma.coupon_salesUpdateWithWhereUniqueWithoutSalesInput | Prisma.coupon_salesUpdateWithWhereUniqueWithoutSalesInput[]
  updateMany?: Prisma.coupon_salesUpdateManyWithWhereWithoutSalesInput | Prisma.coupon_salesUpdateManyWithWhereWithoutSalesInput[]
  deleteMany?: Prisma.coupon_salesScalarWhereInput | Prisma.coupon_salesScalarWhereInput[]
}

export type coupon_salesUncheckedUpdateManyWithoutSalesNestedInput = {
  create?: Prisma.XOR<Prisma.coupon_salesCreateWithoutSalesInput, Prisma.coupon_salesUncheckedCreateWithoutSalesInput> | Prisma.coupon_salesCreateWithoutSalesInput[] | Prisma.coupon_salesUncheckedCreateWithoutSalesInput[]
  connectOrCreate?: Prisma.coupon_salesCreateOrConnectWithoutSalesInput | Prisma.coupon_salesCreateOrConnectWithoutSalesInput[]
  upsert?: Prisma.coupon_salesUpsertWithWhereUniqueWithoutSalesInput | Prisma.coupon_salesUpsertWithWhereUniqueWithoutSalesInput[]
  createMany?: Prisma.coupon_salesCreateManySalesInputEnvelope
  set?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  disconnect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  delete?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  connect?: Prisma.coupon_salesWhereUniqueInput | Prisma.coupon_salesWhereUniqueInput[]
  update?: Prisma.coupon_salesUpdateWithWhereUniqueWithoutSalesInput | Prisma.coupon_salesUpdateWithWhereUniqueWithoutSalesInput[]
  updateMany?: Prisma.coupon_salesUpdateManyWithWhereWithoutSalesInput | Prisma.coupon_salesUpdateManyWithWhereWithoutSalesInput[]
  deleteMany?: Prisma.coupon_salesScalarWhereInput | Prisma.coupon_salesScalarWhereInput[]
}

export type coupon_salesCreateWithoutCouponsInput = {
  value?: number | null
  target?: string | null
  sponsorship?: string | null
  sales?: Prisma.salesCreateNestedOneWithoutCoupon_salesInput
}

export type coupon_salesUncheckedCreateWithoutCouponsInput = {
  id?: number
  sale_id?: number | null
  value?: number | null
  target?: string | null
  sponsorship?: string | null
}

export type coupon_salesCreateOrConnectWithoutCouponsInput = {
  where: Prisma.coupon_salesWhereUniqueInput
  create: Prisma.XOR<Prisma.coupon_salesCreateWithoutCouponsInput, Prisma.coupon_salesUncheckedCreateWithoutCouponsInput>
}

export type coupon_salesCreateManyCouponsInputEnvelope = {
  data: Prisma.coupon_salesCreateManyCouponsInput | Prisma.coupon_salesCreateManyCouponsInput[]
  skipDuplicates?: boolean
}

export type coupon_salesUpsertWithWhereUniqueWithoutCouponsInput = {
  where: Prisma.coupon_salesWhereUniqueInput
  update: Prisma.XOR<Prisma.coupon_salesUpdateWithoutCouponsInput, Prisma.coupon_salesUncheckedUpdateWithoutCouponsInput>
  create: Prisma.XOR<Prisma.coupon_salesCreateWithoutCouponsInput, Prisma.coupon_salesUncheckedCreateWithoutCouponsInput>
}

export type coupon_salesUpdateWithWhereUniqueWithoutCouponsInput = {
  where: Prisma.coupon_salesWhereUniqueInput
  data: Prisma.XOR<Prisma.coupon_salesUpdateWithoutCouponsInput, Prisma.coupon_salesUncheckedUpdateWithoutCouponsInput>
}

export type coupon_salesUpdateManyWithWhereWithoutCouponsInput = {
  where: Prisma.coupon_salesScalarWhereInput
  data: Prisma.XOR<Prisma.coupon_salesUpdateManyMutationInput, Prisma.coupon_salesUncheckedUpdateManyWithoutCouponsInput>
}

export type coupon_salesScalarWhereInput = {
  AND?: Prisma.coupon_salesScalarWhereInput | Prisma.coupon_salesScalarWhereInput[]
  OR?: Prisma.coupon_salesScalarWhereInput[]
  NOT?: Prisma.coupon_salesScalarWhereInput | Prisma.coupon_salesScalarWhereInput[]
  id?: Prisma.IntFilter<"coupon_sales"> | number
  sale_id?: Prisma.IntNullableFilter<"coupon_sales"> | number | null
  coupon_id?: Prisma.IntNullableFilter<"coupon_sales"> | number | null
  value?: Prisma.FloatNullableFilter<"coupon_sales"> | number | null
  target?: Prisma.StringNullableFilter<"coupon_sales"> | string | null
  sponsorship?: Prisma.StringNullableFilter<"coupon_sales"> | string | null
}

export type coupon_salesCreateWithoutSalesInput = {
  value?: number | null
  target?: string | null
  sponsorship?: string | null
  coupons?: Prisma.couponsCreateNestedOneWithoutCoupon_salesInput
}

export type coupon_salesUncheckedCreateWithoutSalesInput = {
  id?: number
  coupon_id?: number | null
  value?: number | null
  target?: string | null
  sponsorship?: string | null
}

export type coupon_salesCreateOrConnectWithoutSalesInput = {
  where: Prisma.coupon_salesWhereUniqueInput
  create: Prisma.XOR<Prisma.coupon_salesCreateWithoutSalesInput, Prisma.coupon_salesUncheckedCreateWithoutSalesInput>
}

export type coupon_salesCreateManySalesInputEnvelope = {
  data: Prisma.coupon_salesCreateManySalesInput | Prisma.coupon_salesCreateManySalesInput[]
  skipDuplicates?: boolean
}

export type coupon_salesUpsertWithWhereUniqueWithoutSalesInput = {
  where: Prisma.coupon_salesWhereUniqueInput
  update: Prisma.XOR<Prisma.coupon_salesUpdateWithoutSalesInput, Prisma.coupon_salesUncheckedUpdateWithoutSalesInput>
  create: Prisma.XOR<Prisma.coupon_salesCreateWithoutSalesInput, Prisma.coupon_salesUncheckedCreateWithoutSalesInput>
}

export type coupon_salesUpdateWithWhereUniqueWithoutSalesInput = {
  where: Prisma.coupon_salesWhereUniqueInput
  data: Prisma.XOR<Prisma.coupon_salesUpdateWithoutSalesInput, Prisma.coupon_salesUncheckedUpdateWithoutSalesInput>
}

export type coupon_salesUpdateManyWithWhereWithoutSalesInput = {
  where: Prisma.coupon_salesScalarWhereInput
  data: Prisma.XOR<Prisma.coupon_salesUpdateManyMutationInput, Prisma.coupon_salesUncheckedUpdateManyWithoutSalesInput>
}

export type coupon_salesCreateManyCouponsInput = {
  id?: number
  sale_id?: number | null
  value?: number | null
  target?: string | null
  sponsorship?: string | null
}

export type coupon_salesUpdateWithoutCouponsInput = {
  value?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sponsorship?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sales?: Prisma.salesUpdateOneWithoutCoupon_salesNestedInput
}

export type coupon_salesUncheckedUpdateWithoutCouponsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sale_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  value?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sponsorship?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type coupon_salesUncheckedUpdateManyWithoutCouponsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sale_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  value?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sponsorship?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type coupon_salesCreateManySalesInput = {
  id?: number
  coupon_id?: number | null
  value?: number | null
  target?: string | null
  sponsorship?: string | null
}

export type coupon_salesUpdateWithoutSalesInput = {
  value?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sponsorship?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  coupons?: Prisma.couponsUpdateOneWithoutCoupon_salesNestedInput
}

export type coupon_salesUncheckedUpdateWithoutSalesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  coupon_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  value?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sponsorship?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type coupon_salesUncheckedUpdateManyWithoutSalesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  coupon_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  value?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sponsorship?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type coupon_salesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sale_id?: boolean
  coupon_id?: boolean
  value?: boolean
  target?: boolean
  sponsorship?: boolean
  coupons?: boolean | Prisma.coupon_sales$couponsArgs<ExtArgs>
  sales?: boolean | Prisma.coupon_sales$salesArgs<ExtArgs>
}, ExtArgs["result"]["coupon_sales"]>

export type coupon_salesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sale_id?: boolean
  coupon_id?: boolean
  value?: boolean
  target?: boolean
  sponsorship?: boolean
  coupons?: boolean | Prisma.coupon_sales$couponsArgs<ExtArgs>
  sales?: boolean | Prisma.coupon_sales$salesArgs<ExtArgs>
}, ExtArgs["result"]["coupon_sales"]>

export type coupon_salesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sale_id?: boolean
  coupon_id?: boolean
  value?: boolean
  target?: boolean
  sponsorship?: boolean
  coupons?: boolean | Prisma.coupon_sales$couponsArgs<ExtArgs>
  sales?: boolean | Prisma.coupon_sales$salesArgs<ExtArgs>
}, ExtArgs["result"]["coupon_sales"]>

export type coupon_salesSelectScalar = {
  id?: boolean
  sale_id?: boolean
  coupon_id?: boolean
  value?: boolean
  target?: boolean
  sponsorship?: boolean
}

export type coupon_salesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "sale_id" | "coupon_id" | "value" | "target" | "sponsorship", ExtArgs["result"]["coupon_sales"]>
export type coupon_salesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  coupons?: boolean | Prisma.coupon_sales$couponsArgs<ExtArgs>
  sales?: boolean | Prisma.coupon_sales$salesArgs<ExtArgs>
}
export type coupon_salesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  coupons?: boolean | Prisma.coupon_sales$couponsArgs<ExtArgs>
  sales?: boolean | Prisma.coupon_sales$salesArgs<ExtArgs>
}
export type coupon_salesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  coupons?: boolean | Prisma.coupon_sales$couponsArgs<ExtArgs>
  sales?: boolean | Prisma.coupon_sales$salesArgs<ExtArgs>
}

export type $coupon_salesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "coupon_sales"
  objects: {
    coupons: Prisma.$couponsPayload<ExtArgs> | null
    sales: Prisma.$salesPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    sale_id: number | null
    coupon_id: number | null
    value: number | null
    target: string | null
    sponsorship: string | null
  }, ExtArgs["result"]["coupon_sales"]>
  composites: {}
}

export type coupon_salesGetPayload<S extends boolean | null | undefined | coupon_salesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload, S>

export type coupon_salesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<coupon_salesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Coupon_salesCountAggregateInputType | true
  }

export interface coupon_salesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['coupon_sales'], meta: { name: 'coupon_sales' } }
  /**
   * Find zero or one Coupon_sales that matches the filter.
   * @param {coupon_salesFindUniqueArgs} args - Arguments to find a Coupon_sales
   * @example
   * // Get one Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends coupon_salesFindUniqueArgs>(args: Prisma.SelectSubset<T, coupon_salesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__coupon_salesClient<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Coupon_sales that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {coupon_salesFindUniqueOrThrowArgs} args - Arguments to find a Coupon_sales
   * @example
   * // Get one Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends coupon_salesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, coupon_salesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__coupon_salesClient<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Coupon_sales that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {coupon_salesFindFirstArgs} args - Arguments to find a Coupon_sales
   * @example
   * // Get one Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends coupon_salesFindFirstArgs>(args?: Prisma.SelectSubset<T, coupon_salesFindFirstArgs<ExtArgs>>): Prisma.Prisma__coupon_salesClient<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Coupon_sales that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {coupon_salesFindFirstOrThrowArgs} args - Arguments to find a Coupon_sales
   * @example
   * // Get one Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends coupon_salesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, coupon_salesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__coupon_salesClient<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Coupon_sales that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {coupon_salesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.findMany()
   * 
   * // Get first 10 Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const coupon_salesWithIdOnly = await prisma.coupon_sales.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends coupon_salesFindManyArgs>(args?: Prisma.SelectSubset<T, coupon_salesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Coupon_sales.
   * @param {coupon_salesCreateArgs} args - Arguments to create a Coupon_sales.
   * @example
   * // Create one Coupon_sales
   * const Coupon_sales = await prisma.coupon_sales.create({
   *   data: {
   *     // ... data to create a Coupon_sales
   *   }
   * })
   * 
   */
  create<T extends coupon_salesCreateArgs>(args: Prisma.SelectSubset<T, coupon_salesCreateArgs<ExtArgs>>): Prisma.Prisma__coupon_salesClient<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Coupon_sales.
   * @param {coupon_salesCreateManyArgs} args - Arguments to create many Coupon_sales.
   * @example
   * // Create many Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends coupon_salesCreateManyArgs>(args?: Prisma.SelectSubset<T, coupon_salesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Coupon_sales and returns the data saved in the database.
   * @param {coupon_salesCreateManyAndReturnArgs} args - Arguments to create many Coupon_sales.
   * @example
   * // Create many Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Coupon_sales and only return the `id`
   * const coupon_salesWithIdOnly = await prisma.coupon_sales.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends coupon_salesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, coupon_salesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Coupon_sales.
   * @param {coupon_salesDeleteArgs} args - Arguments to delete one Coupon_sales.
   * @example
   * // Delete one Coupon_sales
   * const Coupon_sales = await prisma.coupon_sales.delete({
   *   where: {
   *     // ... filter to delete one Coupon_sales
   *   }
   * })
   * 
   */
  delete<T extends coupon_salesDeleteArgs>(args: Prisma.SelectSubset<T, coupon_salesDeleteArgs<ExtArgs>>): Prisma.Prisma__coupon_salesClient<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Coupon_sales.
   * @param {coupon_salesUpdateArgs} args - Arguments to update one Coupon_sales.
   * @example
   * // Update one Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends coupon_salesUpdateArgs>(args: Prisma.SelectSubset<T, coupon_salesUpdateArgs<ExtArgs>>): Prisma.Prisma__coupon_salesClient<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Coupon_sales.
   * @param {coupon_salesDeleteManyArgs} args - Arguments to filter Coupon_sales to delete.
   * @example
   * // Delete a few Coupon_sales
   * const { count } = await prisma.coupon_sales.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends coupon_salesDeleteManyArgs>(args?: Prisma.SelectSubset<T, coupon_salesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Coupon_sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {coupon_salesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends coupon_salesUpdateManyArgs>(args: Prisma.SelectSubset<T, coupon_salesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Coupon_sales and returns the data updated in the database.
   * @param {coupon_salesUpdateManyAndReturnArgs} args - Arguments to update many Coupon_sales.
   * @example
   * // Update many Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Coupon_sales and only return the `id`
   * const coupon_salesWithIdOnly = await prisma.coupon_sales.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends coupon_salesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, coupon_salesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Coupon_sales.
   * @param {coupon_salesUpsertArgs} args - Arguments to update or create a Coupon_sales.
   * @example
   * // Update or create a Coupon_sales
   * const coupon_sales = await prisma.coupon_sales.upsert({
   *   create: {
   *     // ... data to create a Coupon_sales
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Coupon_sales we want to update
   *   }
   * })
   */
  upsert<T extends coupon_salesUpsertArgs>(args: Prisma.SelectSubset<T, coupon_salesUpsertArgs<ExtArgs>>): Prisma.Prisma__coupon_salesClient<runtime.Types.Result.GetResult<Prisma.$coupon_salesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Coupon_sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {coupon_salesCountArgs} args - Arguments to filter Coupon_sales to count.
   * @example
   * // Count the number of Coupon_sales
   * const count = await prisma.coupon_sales.count({
   *   where: {
   *     // ... the filter for the Coupon_sales we want to count
   *   }
   * })
  **/
  count<T extends coupon_salesCountArgs>(
    args?: Prisma.Subset<T, coupon_salesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Coupon_salesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Coupon_sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Coupon_salesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Coupon_salesAggregateArgs>(args: Prisma.Subset<T, Coupon_salesAggregateArgs>): Prisma.PrismaPromise<GetCoupon_salesAggregateType<T>>

  /**
   * Group by Coupon_sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {coupon_salesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends coupon_salesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: coupon_salesGroupByArgs['orderBy'] }
      : { orderBy?: coupon_salesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, coupon_salesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoupon_salesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the coupon_sales model
 */
readonly fields: coupon_salesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for coupon_sales.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__coupon_salesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  coupons<T extends Prisma.coupon_sales$couponsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.coupon_sales$couponsArgs<ExtArgs>>): Prisma.Prisma__couponsClient<runtime.Types.Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  sales<T extends Prisma.coupon_sales$salesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.coupon_sales$salesArgs<ExtArgs>>): Prisma.Prisma__salesClient<runtime.Types.Result.GetResult<Prisma.$salesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the coupon_sales model
 */
export interface coupon_salesFieldRefs {
  readonly id: Prisma.FieldRef<"coupon_sales", 'Int'>
  readonly sale_id: Prisma.FieldRef<"coupon_sales", 'Int'>
  readonly coupon_id: Prisma.FieldRef<"coupon_sales", 'Int'>
  readonly value: Prisma.FieldRef<"coupon_sales", 'Float'>
  readonly target: Prisma.FieldRef<"coupon_sales", 'String'>
  readonly sponsorship: Prisma.FieldRef<"coupon_sales", 'String'>
}
    

// Custom InputTypes
/**
 * coupon_sales findUnique
 */
export type coupon_salesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
  /**
   * Filter, which coupon_sales to fetch.
   */
  where: Prisma.coupon_salesWhereUniqueInput
}

/**
 * coupon_sales findUniqueOrThrow
 */
export type coupon_salesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
  /**
   * Filter, which coupon_sales to fetch.
   */
  where: Prisma.coupon_salesWhereUniqueInput
}

/**
 * coupon_sales findFirst
 */
export type coupon_salesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
  /**
   * Filter, which coupon_sales to fetch.
   */
  where?: Prisma.coupon_salesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupon_sales to fetch.
   */
  orderBy?: Prisma.coupon_salesOrderByWithRelationInput | Prisma.coupon_salesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for coupon_sales.
   */
  cursor?: Prisma.coupon_salesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupon_sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupon_sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of coupon_sales.
   */
  distinct?: Prisma.Coupon_salesScalarFieldEnum | Prisma.Coupon_salesScalarFieldEnum[]
}

/**
 * coupon_sales findFirstOrThrow
 */
export type coupon_salesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
  /**
   * Filter, which coupon_sales to fetch.
   */
  where?: Prisma.coupon_salesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupon_sales to fetch.
   */
  orderBy?: Prisma.coupon_salesOrderByWithRelationInput | Prisma.coupon_salesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for coupon_sales.
   */
  cursor?: Prisma.coupon_salesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupon_sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupon_sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of coupon_sales.
   */
  distinct?: Prisma.Coupon_salesScalarFieldEnum | Prisma.Coupon_salesScalarFieldEnum[]
}

/**
 * coupon_sales findMany
 */
export type coupon_salesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
  /**
   * Filter, which coupon_sales to fetch.
   */
  where?: Prisma.coupon_salesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of coupon_sales to fetch.
   */
  orderBy?: Prisma.coupon_salesOrderByWithRelationInput | Prisma.coupon_salesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing coupon_sales.
   */
  cursor?: Prisma.coupon_salesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` coupon_sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` coupon_sales.
   */
  skip?: number
  distinct?: Prisma.Coupon_salesScalarFieldEnum | Prisma.Coupon_salesScalarFieldEnum[]
}

/**
 * coupon_sales create
 */
export type coupon_salesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
  /**
   * The data needed to create a coupon_sales.
   */
  data?: Prisma.XOR<Prisma.coupon_salesCreateInput, Prisma.coupon_salesUncheckedCreateInput>
}

/**
 * coupon_sales createMany
 */
export type coupon_salesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many coupon_sales.
   */
  data: Prisma.coupon_salesCreateManyInput | Prisma.coupon_salesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * coupon_sales createManyAndReturn
 */
export type coupon_salesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * The data used to create many coupon_sales.
   */
  data: Prisma.coupon_salesCreateManyInput | Prisma.coupon_salesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * coupon_sales update
 */
export type coupon_salesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
  /**
   * The data needed to update a coupon_sales.
   */
  data: Prisma.XOR<Prisma.coupon_salesUpdateInput, Prisma.coupon_salesUncheckedUpdateInput>
  /**
   * Choose, which coupon_sales to update.
   */
  where: Prisma.coupon_salesWhereUniqueInput
}

/**
 * coupon_sales updateMany
 */
export type coupon_salesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update coupon_sales.
   */
  data: Prisma.XOR<Prisma.coupon_salesUpdateManyMutationInput, Prisma.coupon_salesUncheckedUpdateManyInput>
  /**
   * Filter which coupon_sales to update
   */
  where?: Prisma.coupon_salesWhereInput
  /**
   * Limit how many coupon_sales to update.
   */
  limit?: number
}

/**
 * coupon_sales updateManyAndReturn
 */
export type coupon_salesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * The data used to update coupon_sales.
   */
  data: Prisma.XOR<Prisma.coupon_salesUpdateManyMutationInput, Prisma.coupon_salesUncheckedUpdateManyInput>
  /**
   * Filter which coupon_sales to update
   */
  where?: Prisma.coupon_salesWhereInput
  /**
   * Limit how many coupon_sales to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * coupon_sales upsert
 */
export type coupon_salesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
  /**
   * The filter to search for the coupon_sales to update in case it exists.
   */
  where: Prisma.coupon_salesWhereUniqueInput
  /**
   * In case the coupon_sales found by the `where` argument doesn't exist, create a new coupon_sales with this data.
   */
  create: Prisma.XOR<Prisma.coupon_salesCreateInput, Prisma.coupon_salesUncheckedCreateInput>
  /**
   * In case the coupon_sales was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.coupon_salesUpdateInput, Prisma.coupon_salesUncheckedUpdateInput>
}

/**
 * coupon_sales delete
 */
export type coupon_salesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
  /**
   * Filter which coupon_sales to delete.
   */
  where: Prisma.coupon_salesWhereUniqueInput
}

/**
 * coupon_sales deleteMany
 */
export type coupon_salesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which coupon_sales to delete
   */
  where?: Prisma.coupon_salesWhereInput
  /**
   * Limit how many coupon_sales to delete.
   */
  limit?: number
}

/**
 * coupon_sales.coupons
 */
export type coupon_sales$couponsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupons
   */
  select?: Prisma.couponsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupons
   */
  omit?: Prisma.couponsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.couponsInclude<ExtArgs> | null
  where?: Prisma.couponsWhereInput
}

/**
 * coupon_sales.sales
 */
export type coupon_sales$salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sales
   */
  select?: Prisma.salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sales
   */
  omit?: Prisma.salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salesInclude<ExtArgs> | null
  where?: Prisma.salesWhereInput
}

/**
 * coupon_sales without action
 */
export type coupon_salesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the coupon_sales
   */
  select?: Prisma.coupon_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the coupon_sales
   */
  omit?: Prisma.coupon_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.coupon_salesInclude<ExtArgs> | null
}
