
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `product_sales` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model product_sales
 * 
 */
export type product_salesModel = runtime.Types.Result.DefaultSelection<Prisma.$product_salesPayload>

export type AggregateProduct_sales = {
  _count: Product_salesCountAggregateOutputType | null
  _avg: Product_salesAvgAggregateOutputType | null
  _sum: Product_salesSumAggregateOutputType | null
  _min: Product_salesMinAggregateOutputType | null
  _max: Product_salesMaxAggregateOutputType | null
}

export type Product_salesAvgAggregateOutputType = {
  id: number | null
  sale_id: number | null
  product_id: number | null
  quantity: number | null
  base_price: number | null
  total_price: number | null
}

export type Product_salesSumAggregateOutputType = {
  id: number | null
  sale_id: number | null
  product_id: number | null
  quantity: number | null
  base_price: number | null
  total_price: number | null
}

export type Product_salesMinAggregateOutputType = {
  id: number | null
  sale_id: number | null
  product_id: number | null
  quantity: number | null
  base_price: number | null
  total_price: number | null
  observations: string | null
}

export type Product_salesMaxAggregateOutputType = {
  id: number | null
  sale_id: number | null
  product_id: number | null
  quantity: number | null
  base_price: number | null
  total_price: number | null
  observations: string | null
}

export type Product_salesCountAggregateOutputType = {
  id: number
  sale_id: number
  product_id: number
  quantity: number
  base_price: number
  total_price: number
  observations: number
  _all: number
}


export type Product_salesAvgAggregateInputType = {
  id?: true
  sale_id?: true
  product_id?: true
  quantity?: true
  base_price?: true
  total_price?: true
}

export type Product_salesSumAggregateInputType = {
  id?: true
  sale_id?: true
  product_id?: true
  quantity?: true
  base_price?: true
  total_price?: true
}

export type Product_salesMinAggregateInputType = {
  id?: true
  sale_id?: true
  product_id?: true
  quantity?: true
  base_price?: true
  total_price?: true
  observations?: true
}

export type Product_salesMaxAggregateInputType = {
  id?: true
  sale_id?: true
  product_id?: true
  quantity?: true
  base_price?: true
  total_price?: true
  observations?: true
}

export type Product_salesCountAggregateInputType = {
  id?: true
  sale_id?: true
  product_id?: true
  quantity?: true
  base_price?: true
  total_price?: true
  observations?: true
  _all?: true
}

export type Product_salesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which product_sales to aggregate.
   */
  where?: Prisma.product_salesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of product_sales to fetch.
   */
  orderBy?: Prisma.product_salesOrderByWithRelationInput | Prisma.product_salesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.product_salesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` product_sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` product_sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned product_sales
  **/
  _count?: true | Product_salesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Product_salesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Product_salesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Product_salesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Product_salesMaxAggregateInputType
}

export type GetProduct_salesAggregateType<T extends Product_salesAggregateArgs> = {
      [P in keyof T & keyof AggregateProduct_sales]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProduct_sales[P]>
    : Prisma.GetScalarType<T[P], AggregateProduct_sales[P]>
}




export type product_salesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.product_salesWhereInput
  orderBy?: Prisma.product_salesOrderByWithAggregationInput | Prisma.product_salesOrderByWithAggregationInput[]
  by: Prisma.Product_salesScalarFieldEnum[] | Prisma.Product_salesScalarFieldEnum
  having?: Prisma.product_salesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Product_salesCountAggregateInputType | true
  _avg?: Product_salesAvgAggregateInputType
  _sum?: Product_salesSumAggregateInputType
  _min?: Product_salesMinAggregateInputType
  _max?: Product_salesMaxAggregateInputType
}

export type Product_salesGroupByOutputType = {
  id: number
  sale_id: number
  product_id: number
  quantity: number
  base_price: number
  total_price: number
  observations: string | null
  _count: Product_salesCountAggregateOutputType | null
  _avg: Product_salesAvgAggregateOutputType | null
  _sum: Product_salesSumAggregateOutputType | null
  _min: Product_salesMinAggregateOutputType | null
  _max: Product_salesMaxAggregateOutputType | null
}

type GetProduct_salesGroupByPayload<T extends product_salesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Product_salesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Product_salesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Product_salesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Product_salesGroupByOutputType[P]>
      }
    >
  >



export type product_salesWhereInput = {
  AND?: Prisma.product_salesWhereInput | Prisma.product_salesWhereInput[]
  OR?: Prisma.product_salesWhereInput[]
  NOT?: Prisma.product_salesWhereInput | Prisma.product_salesWhereInput[]
  id?: Prisma.IntFilter<"product_sales"> | number
  sale_id?: Prisma.IntFilter<"product_sales"> | number
  product_id?: Prisma.IntFilter<"product_sales"> | number
  quantity?: Prisma.FloatFilter<"product_sales"> | number
  base_price?: Prisma.FloatFilter<"product_sales"> | number
  total_price?: Prisma.FloatFilter<"product_sales"> | number
  observations?: Prisma.StringNullableFilter<"product_sales"> | string | null
  item_product_sales?: Prisma.Item_product_salesListRelationFilter
  products?: Prisma.XOR<Prisma.ProductsScalarRelationFilter, Prisma.productsWhereInput>
  sales?: Prisma.XOR<Prisma.SalesScalarRelationFilter, Prisma.salesWhereInput>
}

export type product_salesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  base_price?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
  observations?: Prisma.SortOrderInput | Prisma.SortOrder
  item_product_sales?: Prisma.item_product_salesOrderByRelationAggregateInput
  products?: Prisma.productsOrderByWithRelationInput
  sales?: Prisma.salesOrderByWithRelationInput
}

export type product_salesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.product_salesWhereInput | Prisma.product_salesWhereInput[]
  OR?: Prisma.product_salesWhereInput[]
  NOT?: Prisma.product_salesWhereInput | Prisma.product_salesWhereInput[]
  sale_id?: Prisma.IntFilter<"product_sales"> | number
  product_id?: Prisma.IntFilter<"product_sales"> | number
  quantity?: Prisma.FloatFilter<"product_sales"> | number
  base_price?: Prisma.FloatFilter<"product_sales"> | number
  total_price?: Prisma.FloatFilter<"product_sales"> | number
  observations?: Prisma.StringNullableFilter<"product_sales"> | string | null
  item_product_sales?: Prisma.Item_product_salesListRelationFilter
  products?: Prisma.XOR<Prisma.ProductsScalarRelationFilter, Prisma.productsWhereInput>
  sales?: Prisma.XOR<Prisma.SalesScalarRelationFilter, Prisma.salesWhereInput>
}, "id">

export type product_salesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  base_price?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
  observations?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.product_salesCountOrderByAggregateInput
  _avg?: Prisma.product_salesAvgOrderByAggregateInput
  _max?: Prisma.product_salesMaxOrderByAggregateInput
  _min?: Prisma.product_salesMinOrderByAggregateInput
  _sum?: Prisma.product_salesSumOrderByAggregateInput
}

export type product_salesScalarWhereWithAggregatesInput = {
  AND?: Prisma.product_salesScalarWhereWithAggregatesInput | Prisma.product_salesScalarWhereWithAggregatesInput[]
  OR?: Prisma.product_salesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.product_salesScalarWhereWithAggregatesInput | Prisma.product_salesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"product_sales"> | number
  sale_id?: Prisma.IntWithAggregatesFilter<"product_sales"> | number
  product_id?: Prisma.IntWithAggregatesFilter<"product_sales"> | number
  quantity?: Prisma.FloatWithAggregatesFilter<"product_sales"> | number
  base_price?: Prisma.FloatWithAggregatesFilter<"product_sales"> | number
  total_price?: Prisma.FloatWithAggregatesFilter<"product_sales"> | number
  observations?: Prisma.StringNullableWithAggregatesFilter<"product_sales"> | string | null
}

export type product_salesCreateInput = {
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
  item_product_sales?: Prisma.item_product_salesCreateNestedManyWithoutProduct_salesInput
  products: Prisma.productsCreateNestedOneWithoutProduct_salesInput
  sales: Prisma.salesCreateNestedOneWithoutProduct_salesInput
}

export type product_salesUncheckedCreateInput = {
  id?: number
  sale_id: number
  product_id: number
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
  item_product_sales?: Prisma.item_product_salesUncheckedCreateNestedManyWithoutProduct_salesInput
}

export type product_salesUpdateInput = {
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  item_product_sales?: Prisma.item_product_salesUpdateManyWithoutProduct_salesNestedInput
  products?: Prisma.productsUpdateOneRequiredWithoutProduct_salesNestedInput
  sales?: Prisma.salesUpdateOneRequiredWithoutProduct_salesNestedInput
}

export type product_salesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sale_id?: Prisma.IntFieldUpdateOperationsInput | number
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  item_product_sales?: Prisma.item_product_salesUncheckedUpdateManyWithoutProduct_salesNestedInput
}

export type product_salesCreateManyInput = {
  id?: number
  sale_id: number
  product_id: number
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
}

export type product_salesUpdateManyMutationInput = {
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type product_salesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sale_id?: Prisma.IntFieldUpdateOperationsInput | number
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type Product_salesScalarRelationFilter = {
  is?: Prisma.product_salesWhereInput
  isNot?: Prisma.product_salesWhereInput
}

export type product_salesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  base_price?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
  observations?: Prisma.SortOrder
}

export type product_salesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  base_price?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
}

export type product_salesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  base_price?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
  observations?: Prisma.SortOrder
}

export type product_salesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  base_price?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
  observations?: Prisma.SortOrder
}

export type product_salesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sale_id?: Prisma.SortOrder
  product_id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  base_price?: Prisma.SortOrder
  total_price?: Prisma.SortOrder
}

export type Product_salesListRelationFilter = {
  every?: Prisma.product_salesWhereInput
  some?: Prisma.product_salesWhereInput
  none?: Prisma.product_salesWhereInput
}

export type product_salesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type product_salesCreateNestedOneWithoutItem_product_salesInput = {
  create?: Prisma.XOR<Prisma.product_salesCreateWithoutItem_product_salesInput, Prisma.product_salesUncheckedCreateWithoutItem_product_salesInput>
  connectOrCreate?: Prisma.product_salesCreateOrConnectWithoutItem_product_salesInput
  connect?: Prisma.product_salesWhereUniqueInput
}

export type product_salesUpdateOneRequiredWithoutItem_product_salesNestedInput = {
  create?: Prisma.XOR<Prisma.product_salesCreateWithoutItem_product_salesInput, Prisma.product_salesUncheckedCreateWithoutItem_product_salesInput>
  connectOrCreate?: Prisma.product_salesCreateOrConnectWithoutItem_product_salesInput
  upsert?: Prisma.product_salesUpsertWithoutItem_product_salesInput
  connect?: Prisma.product_salesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.product_salesUpdateToOneWithWhereWithoutItem_product_salesInput, Prisma.product_salesUpdateWithoutItem_product_salesInput>, Prisma.product_salesUncheckedUpdateWithoutItem_product_salesInput>
}

export type product_salesCreateNestedManyWithoutProductsInput = {
  create?: Prisma.XOR<Prisma.product_salesCreateWithoutProductsInput, Prisma.product_salesUncheckedCreateWithoutProductsInput> | Prisma.product_salesCreateWithoutProductsInput[] | Prisma.product_salesUncheckedCreateWithoutProductsInput[]
  connectOrCreate?: Prisma.product_salesCreateOrConnectWithoutProductsInput | Prisma.product_salesCreateOrConnectWithoutProductsInput[]
  createMany?: Prisma.product_salesCreateManyProductsInputEnvelope
  connect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
}

export type product_salesUncheckedCreateNestedManyWithoutProductsInput = {
  create?: Prisma.XOR<Prisma.product_salesCreateWithoutProductsInput, Prisma.product_salesUncheckedCreateWithoutProductsInput> | Prisma.product_salesCreateWithoutProductsInput[] | Prisma.product_salesUncheckedCreateWithoutProductsInput[]
  connectOrCreate?: Prisma.product_salesCreateOrConnectWithoutProductsInput | Prisma.product_salesCreateOrConnectWithoutProductsInput[]
  createMany?: Prisma.product_salesCreateManyProductsInputEnvelope
  connect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
}

export type product_salesUpdateManyWithoutProductsNestedInput = {
  create?: Prisma.XOR<Prisma.product_salesCreateWithoutProductsInput, Prisma.product_salesUncheckedCreateWithoutProductsInput> | Prisma.product_salesCreateWithoutProductsInput[] | Prisma.product_salesUncheckedCreateWithoutProductsInput[]
  connectOrCreate?: Prisma.product_salesCreateOrConnectWithoutProductsInput | Prisma.product_salesCreateOrConnectWithoutProductsInput[]
  upsert?: Prisma.product_salesUpsertWithWhereUniqueWithoutProductsInput | Prisma.product_salesUpsertWithWhereUniqueWithoutProductsInput[]
  createMany?: Prisma.product_salesCreateManyProductsInputEnvelope
  set?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  disconnect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  delete?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  connect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  update?: Prisma.product_salesUpdateWithWhereUniqueWithoutProductsInput | Prisma.product_salesUpdateWithWhereUniqueWithoutProductsInput[]
  updateMany?: Prisma.product_salesUpdateManyWithWhereWithoutProductsInput | Prisma.product_salesUpdateManyWithWhereWithoutProductsInput[]
  deleteMany?: Prisma.product_salesScalarWhereInput | Prisma.product_salesScalarWhereInput[]
}

export type product_salesUncheckedUpdateManyWithoutProductsNestedInput = {
  create?: Prisma.XOR<Prisma.product_salesCreateWithoutProductsInput, Prisma.product_salesUncheckedCreateWithoutProductsInput> | Prisma.product_salesCreateWithoutProductsInput[] | Prisma.product_salesUncheckedCreateWithoutProductsInput[]
  connectOrCreate?: Prisma.product_salesCreateOrConnectWithoutProductsInput | Prisma.product_salesCreateOrConnectWithoutProductsInput[]
  upsert?: Prisma.product_salesUpsertWithWhereUniqueWithoutProductsInput | Prisma.product_salesUpsertWithWhereUniqueWithoutProductsInput[]
  createMany?: Prisma.product_salesCreateManyProductsInputEnvelope
  set?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  disconnect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  delete?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  connect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  update?: Prisma.product_salesUpdateWithWhereUniqueWithoutProductsInput | Prisma.product_salesUpdateWithWhereUniqueWithoutProductsInput[]
  updateMany?: Prisma.product_salesUpdateManyWithWhereWithoutProductsInput | Prisma.product_salesUpdateManyWithWhereWithoutProductsInput[]
  deleteMany?: Prisma.product_salesScalarWhereInput | Prisma.product_salesScalarWhereInput[]
}

export type product_salesCreateNestedManyWithoutSalesInput = {
  create?: Prisma.XOR<Prisma.product_salesCreateWithoutSalesInput, Prisma.product_salesUncheckedCreateWithoutSalesInput> | Prisma.product_salesCreateWithoutSalesInput[] | Prisma.product_salesUncheckedCreateWithoutSalesInput[]
  connectOrCreate?: Prisma.product_salesCreateOrConnectWithoutSalesInput | Prisma.product_salesCreateOrConnectWithoutSalesInput[]
  createMany?: Prisma.product_salesCreateManySalesInputEnvelope
  connect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
}

export type product_salesUncheckedCreateNestedManyWithoutSalesInput = {
  create?: Prisma.XOR<Prisma.product_salesCreateWithoutSalesInput, Prisma.product_salesUncheckedCreateWithoutSalesInput> | Prisma.product_salesCreateWithoutSalesInput[] | Prisma.product_salesUncheckedCreateWithoutSalesInput[]
  connectOrCreate?: Prisma.product_salesCreateOrConnectWithoutSalesInput | Prisma.product_salesCreateOrConnectWithoutSalesInput[]
  createMany?: Prisma.product_salesCreateManySalesInputEnvelope
  connect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
}

export type product_salesUpdateManyWithoutSalesNestedInput = {
  create?: Prisma.XOR<Prisma.product_salesCreateWithoutSalesInput, Prisma.product_salesUncheckedCreateWithoutSalesInput> | Prisma.product_salesCreateWithoutSalesInput[] | Prisma.product_salesUncheckedCreateWithoutSalesInput[]
  connectOrCreate?: Prisma.product_salesCreateOrConnectWithoutSalesInput | Prisma.product_salesCreateOrConnectWithoutSalesInput[]
  upsert?: Prisma.product_salesUpsertWithWhereUniqueWithoutSalesInput | Prisma.product_salesUpsertWithWhereUniqueWithoutSalesInput[]
  createMany?: Prisma.product_salesCreateManySalesInputEnvelope
  set?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  disconnect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  delete?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  connect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  update?: Prisma.product_salesUpdateWithWhereUniqueWithoutSalesInput | Prisma.product_salesUpdateWithWhereUniqueWithoutSalesInput[]
  updateMany?: Prisma.product_salesUpdateManyWithWhereWithoutSalesInput | Prisma.product_salesUpdateManyWithWhereWithoutSalesInput[]
  deleteMany?: Prisma.product_salesScalarWhereInput | Prisma.product_salesScalarWhereInput[]
}

export type product_salesUncheckedUpdateManyWithoutSalesNestedInput = {
  create?: Prisma.XOR<Prisma.product_salesCreateWithoutSalesInput, Prisma.product_salesUncheckedCreateWithoutSalesInput> | Prisma.product_salesCreateWithoutSalesInput[] | Prisma.product_salesUncheckedCreateWithoutSalesInput[]
  connectOrCreate?: Prisma.product_salesCreateOrConnectWithoutSalesInput | Prisma.product_salesCreateOrConnectWithoutSalesInput[]
  upsert?: Prisma.product_salesUpsertWithWhereUniqueWithoutSalesInput | Prisma.product_salesUpsertWithWhereUniqueWithoutSalesInput[]
  createMany?: Prisma.product_salesCreateManySalesInputEnvelope
  set?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  disconnect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  delete?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  connect?: Prisma.product_salesWhereUniqueInput | Prisma.product_salesWhereUniqueInput[]
  update?: Prisma.product_salesUpdateWithWhereUniqueWithoutSalesInput | Prisma.product_salesUpdateWithWhereUniqueWithoutSalesInput[]
  updateMany?: Prisma.product_salesUpdateManyWithWhereWithoutSalesInput | Prisma.product_salesUpdateManyWithWhereWithoutSalesInput[]
  deleteMany?: Prisma.product_salesScalarWhereInput | Prisma.product_salesScalarWhereInput[]
}

export type product_salesCreateWithoutItem_product_salesInput = {
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
  products: Prisma.productsCreateNestedOneWithoutProduct_salesInput
  sales: Prisma.salesCreateNestedOneWithoutProduct_salesInput
}

export type product_salesUncheckedCreateWithoutItem_product_salesInput = {
  id?: number
  sale_id: number
  product_id: number
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
}

export type product_salesCreateOrConnectWithoutItem_product_salesInput = {
  where: Prisma.product_salesWhereUniqueInput
  create: Prisma.XOR<Prisma.product_salesCreateWithoutItem_product_salesInput, Prisma.product_salesUncheckedCreateWithoutItem_product_salesInput>
}

export type product_salesUpsertWithoutItem_product_salesInput = {
  update: Prisma.XOR<Prisma.product_salesUpdateWithoutItem_product_salesInput, Prisma.product_salesUncheckedUpdateWithoutItem_product_salesInput>
  create: Prisma.XOR<Prisma.product_salesCreateWithoutItem_product_salesInput, Prisma.product_salesUncheckedCreateWithoutItem_product_salesInput>
  where?: Prisma.product_salesWhereInput
}

export type product_salesUpdateToOneWithWhereWithoutItem_product_salesInput = {
  where?: Prisma.product_salesWhereInput
  data: Prisma.XOR<Prisma.product_salesUpdateWithoutItem_product_salesInput, Prisma.product_salesUncheckedUpdateWithoutItem_product_salesInput>
}

export type product_salesUpdateWithoutItem_product_salesInput = {
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  products?: Prisma.productsUpdateOneRequiredWithoutProduct_salesNestedInput
  sales?: Prisma.salesUpdateOneRequiredWithoutProduct_salesNestedInput
}

export type product_salesUncheckedUpdateWithoutItem_product_salesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sale_id?: Prisma.IntFieldUpdateOperationsInput | number
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type product_salesCreateWithoutProductsInput = {
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
  item_product_sales?: Prisma.item_product_salesCreateNestedManyWithoutProduct_salesInput
  sales: Prisma.salesCreateNestedOneWithoutProduct_salesInput
}

export type product_salesUncheckedCreateWithoutProductsInput = {
  id?: number
  sale_id: number
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
  item_product_sales?: Prisma.item_product_salesUncheckedCreateNestedManyWithoutProduct_salesInput
}

export type product_salesCreateOrConnectWithoutProductsInput = {
  where: Prisma.product_salesWhereUniqueInput
  create: Prisma.XOR<Prisma.product_salesCreateWithoutProductsInput, Prisma.product_salesUncheckedCreateWithoutProductsInput>
}

export type product_salesCreateManyProductsInputEnvelope = {
  data: Prisma.product_salesCreateManyProductsInput | Prisma.product_salesCreateManyProductsInput[]
  skipDuplicates?: boolean
}

export type product_salesUpsertWithWhereUniqueWithoutProductsInput = {
  where: Prisma.product_salesWhereUniqueInput
  update: Prisma.XOR<Prisma.product_salesUpdateWithoutProductsInput, Prisma.product_salesUncheckedUpdateWithoutProductsInput>
  create: Prisma.XOR<Prisma.product_salesCreateWithoutProductsInput, Prisma.product_salesUncheckedCreateWithoutProductsInput>
}

export type product_salesUpdateWithWhereUniqueWithoutProductsInput = {
  where: Prisma.product_salesWhereUniqueInput
  data: Prisma.XOR<Prisma.product_salesUpdateWithoutProductsInput, Prisma.product_salesUncheckedUpdateWithoutProductsInput>
}

export type product_salesUpdateManyWithWhereWithoutProductsInput = {
  where: Prisma.product_salesScalarWhereInput
  data: Prisma.XOR<Prisma.product_salesUpdateManyMutationInput, Prisma.product_salesUncheckedUpdateManyWithoutProductsInput>
}

export type product_salesScalarWhereInput = {
  AND?: Prisma.product_salesScalarWhereInput | Prisma.product_salesScalarWhereInput[]
  OR?: Prisma.product_salesScalarWhereInput[]
  NOT?: Prisma.product_salesScalarWhereInput | Prisma.product_salesScalarWhereInput[]
  id?: Prisma.IntFilter<"product_sales"> | number
  sale_id?: Prisma.IntFilter<"product_sales"> | number
  product_id?: Prisma.IntFilter<"product_sales"> | number
  quantity?: Prisma.FloatFilter<"product_sales"> | number
  base_price?: Prisma.FloatFilter<"product_sales"> | number
  total_price?: Prisma.FloatFilter<"product_sales"> | number
  observations?: Prisma.StringNullableFilter<"product_sales"> | string | null
}

export type product_salesCreateWithoutSalesInput = {
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
  item_product_sales?: Prisma.item_product_salesCreateNestedManyWithoutProduct_salesInput
  products: Prisma.productsCreateNestedOneWithoutProduct_salesInput
}

export type product_salesUncheckedCreateWithoutSalesInput = {
  id?: number
  product_id: number
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
  item_product_sales?: Prisma.item_product_salesUncheckedCreateNestedManyWithoutProduct_salesInput
}

export type product_salesCreateOrConnectWithoutSalesInput = {
  where: Prisma.product_salesWhereUniqueInput
  create: Prisma.XOR<Prisma.product_salesCreateWithoutSalesInput, Prisma.product_salesUncheckedCreateWithoutSalesInput>
}

export type product_salesCreateManySalesInputEnvelope = {
  data: Prisma.product_salesCreateManySalesInput | Prisma.product_salesCreateManySalesInput[]
  skipDuplicates?: boolean
}

export type product_salesUpsertWithWhereUniqueWithoutSalesInput = {
  where: Prisma.product_salesWhereUniqueInput
  update: Prisma.XOR<Prisma.product_salesUpdateWithoutSalesInput, Prisma.product_salesUncheckedUpdateWithoutSalesInput>
  create: Prisma.XOR<Prisma.product_salesCreateWithoutSalesInput, Prisma.product_salesUncheckedCreateWithoutSalesInput>
}

export type product_salesUpdateWithWhereUniqueWithoutSalesInput = {
  where: Prisma.product_salesWhereUniqueInput
  data: Prisma.XOR<Prisma.product_salesUpdateWithoutSalesInput, Prisma.product_salesUncheckedUpdateWithoutSalesInput>
}

export type product_salesUpdateManyWithWhereWithoutSalesInput = {
  where: Prisma.product_salesScalarWhereInput
  data: Prisma.XOR<Prisma.product_salesUpdateManyMutationInput, Prisma.product_salesUncheckedUpdateManyWithoutSalesInput>
}

export type product_salesCreateManyProductsInput = {
  id?: number
  sale_id: number
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
}

export type product_salesUpdateWithoutProductsInput = {
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  item_product_sales?: Prisma.item_product_salesUpdateManyWithoutProduct_salesNestedInput
  sales?: Prisma.salesUpdateOneRequiredWithoutProduct_salesNestedInput
}

export type product_salesUncheckedUpdateWithoutProductsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sale_id?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  item_product_sales?: Prisma.item_product_salesUncheckedUpdateManyWithoutProduct_salesNestedInput
}

export type product_salesUncheckedUpdateManyWithoutProductsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sale_id?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type product_salesCreateManySalesInput = {
  id?: number
  product_id: number
  quantity: number
  base_price: number
  total_price: number
  observations?: string | null
}

export type product_salesUpdateWithoutSalesInput = {
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  item_product_sales?: Prisma.item_product_salesUpdateManyWithoutProduct_salesNestedInput
  products?: Prisma.productsUpdateOneRequiredWithoutProduct_salesNestedInput
}

export type product_salesUncheckedUpdateWithoutSalesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  item_product_sales?: Prisma.item_product_salesUncheckedUpdateManyWithoutProduct_salesNestedInput
}

export type product_salesUncheckedUpdateManyWithoutSalesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  product_id?: Prisma.IntFieldUpdateOperationsInput | number
  quantity?: Prisma.FloatFieldUpdateOperationsInput | number
  base_price?: Prisma.FloatFieldUpdateOperationsInput | number
  total_price?: Prisma.FloatFieldUpdateOperationsInput | number
  observations?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type Product_salesCountOutputType
 */

export type Product_salesCountOutputType = {
  item_product_sales: number
}

export type Product_salesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  item_product_sales?: boolean | Product_salesCountOutputTypeCountItem_product_salesArgs
}

/**
 * Product_salesCountOutputType without action
 */
export type Product_salesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Product_salesCountOutputType
   */
  select?: Prisma.Product_salesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Product_salesCountOutputType without action
 */
export type Product_salesCountOutputTypeCountItem_product_salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.item_product_salesWhereInput
}


export type product_salesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sale_id?: boolean
  product_id?: boolean
  quantity?: boolean
  base_price?: boolean
  total_price?: boolean
  observations?: boolean
  item_product_sales?: boolean | Prisma.product_sales$item_product_salesArgs<ExtArgs>
  products?: boolean | Prisma.productsDefaultArgs<ExtArgs>
  sales?: boolean | Prisma.salesDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.Product_salesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["product_sales"]>

export type product_salesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sale_id?: boolean
  product_id?: boolean
  quantity?: boolean
  base_price?: boolean
  total_price?: boolean
  observations?: boolean
  products?: boolean | Prisma.productsDefaultArgs<ExtArgs>
  sales?: boolean | Prisma.salesDefaultArgs<ExtArgs>
}, ExtArgs["result"]["product_sales"]>

export type product_salesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sale_id?: boolean
  product_id?: boolean
  quantity?: boolean
  base_price?: boolean
  total_price?: boolean
  observations?: boolean
  products?: boolean | Prisma.productsDefaultArgs<ExtArgs>
  sales?: boolean | Prisma.salesDefaultArgs<ExtArgs>
}, ExtArgs["result"]["product_sales"]>

export type product_salesSelectScalar = {
  id?: boolean
  sale_id?: boolean
  product_id?: boolean
  quantity?: boolean
  base_price?: boolean
  total_price?: boolean
  observations?: boolean
}

export type product_salesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "sale_id" | "product_id" | "quantity" | "base_price" | "total_price" | "observations", ExtArgs["result"]["product_sales"]>
export type product_salesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  item_product_sales?: boolean | Prisma.product_sales$item_product_salesArgs<ExtArgs>
  products?: boolean | Prisma.productsDefaultArgs<ExtArgs>
  sales?: boolean | Prisma.salesDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.Product_salesCountOutputTypeDefaultArgs<ExtArgs>
}
export type product_salesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  products?: boolean | Prisma.productsDefaultArgs<ExtArgs>
  sales?: boolean | Prisma.salesDefaultArgs<ExtArgs>
}
export type product_salesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  products?: boolean | Prisma.productsDefaultArgs<ExtArgs>
  sales?: boolean | Prisma.salesDefaultArgs<ExtArgs>
}

export type $product_salesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "product_sales"
  objects: {
    item_product_sales: Prisma.$item_product_salesPayload<ExtArgs>[]
    products: Prisma.$productsPayload<ExtArgs>
    sales: Prisma.$salesPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    sale_id: number
    product_id: number
    quantity: number
    base_price: number
    total_price: number
    observations: string | null
  }, ExtArgs["result"]["product_sales"]>
  composites: {}
}

export type product_salesGetPayload<S extends boolean | null | undefined | product_salesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$product_salesPayload, S>

export type product_salesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<product_salesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Product_salesCountAggregateInputType | true
  }

export interface product_salesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_sales'], meta: { name: 'product_sales' } }
  /**
   * Find zero or one Product_sales that matches the filter.
   * @param {product_salesFindUniqueArgs} args - Arguments to find a Product_sales
   * @example
   * // Get one Product_sales
   * const product_sales = await prisma.product_sales.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends product_salesFindUniqueArgs>(args: Prisma.SelectSubset<T, product_salesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__product_salesClient<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Product_sales that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {product_salesFindUniqueOrThrowArgs} args - Arguments to find a Product_sales
   * @example
   * // Get one Product_sales
   * const product_sales = await prisma.product_sales.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends product_salesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, product_salesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__product_salesClient<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Product_sales that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {product_salesFindFirstArgs} args - Arguments to find a Product_sales
   * @example
   * // Get one Product_sales
   * const product_sales = await prisma.product_sales.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends product_salesFindFirstArgs>(args?: Prisma.SelectSubset<T, product_salesFindFirstArgs<ExtArgs>>): Prisma.Prisma__product_salesClient<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Product_sales that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {product_salesFindFirstOrThrowArgs} args - Arguments to find a Product_sales
   * @example
   * // Get one Product_sales
   * const product_sales = await prisma.product_sales.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends product_salesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, product_salesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__product_salesClient<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Product_sales that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {product_salesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Product_sales
   * const product_sales = await prisma.product_sales.findMany()
   * 
   * // Get first 10 Product_sales
   * const product_sales = await prisma.product_sales.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const product_salesWithIdOnly = await prisma.product_sales.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends product_salesFindManyArgs>(args?: Prisma.SelectSubset<T, product_salesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Product_sales.
   * @param {product_salesCreateArgs} args - Arguments to create a Product_sales.
   * @example
   * // Create one Product_sales
   * const Product_sales = await prisma.product_sales.create({
   *   data: {
   *     // ... data to create a Product_sales
   *   }
   * })
   * 
   */
  create<T extends product_salesCreateArgs>(args: Prisma.SelectSubset<T, product_salesCreateArgs<ExtArgs>>): Prisma.Prisma__product_salesClient<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Product_sales.
   * @param {product_salesCreateManyArgs} args - Arguments to create many Product_sales.
   * @example
   * // Create many Product_sales
   * const product_sales = await prisma.product_sales.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends product_salesCreateManyArgs>(args?: Prisma.SelectSubset<T, product_salesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Product_sales and returns the data saved in the database.
   * @param {product_salesCreateManyAndReturnArgs} args - Arguments to create many Product_sales.
   * @example
   * // Create many Product_sales
   * const product_sales = await prisma.product_sales.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Product_sales and only return the `id`
   * const product_salesWithIdOnly = await prisma.product_sales.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends product_salesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, product_salesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Product_sales.
   * @param {product_salesDeleteArgs} args - Arguments to delete one Product_sales.
   * @example
   * // Delete one Product_sales
   * const Product_sales = await prisma.product_sales.delete({
   *   where: {
   *     // ... filter to delete one Product_sales
   *   }
   * })
   * 
   */
  delete<T extends product_salesDeleteArgs>(args: Prisma.SelectSubset<T, product_salesDeleteArgs<ExtArgs>>): Prisma.Prisma__product_salesClient<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Product_sales.
   * @param {product_salesUpdateArgs} args - Arguments to update one Product_sales.
   * @example
   * // Update one Product_sales
   * const product_sales = await prisma.product_sales.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends product_salesUpdateArgs>(args: Prisma.SelectSubset<T, product_salesUpdateArgs<ExtArgs>>): Prisma.Prisma__product_salesClient<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Product_sales.
   * @param {product_salesDeleteManyArgs} args - Arguments to filter Product_sales to delete.
   * @example
   * // Delete a few Product_sales
   * const { count } = await prisma.product_sales.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends product_salesDeleteManyArgs>(args?: Prisma.SelectSubset<T, product_salesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Product_sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {product_salesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Product_sales
   * const product_sales = await prisma.product_sales.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends product_salesUpdateManyArgs>(args: Prisma.SelectSubset<T, product_salesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Product_sales and returns the data updated in the database.
   * @param {product_salesUpdateManyAndReturnArgs} args - Arguments to update many Product_sales.
   * @example
   * // Update many Product_sales
   * const product_sales = await prisma.product_sales.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Product_sales and only return the `id`
   * const product_salesWithIdOnly = await prisma.product_sales.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends product_salesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, product_salesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Product_sales.
   * @param {product_salesUpsertArgs} args - Arguments to update or create a Product_sales.
   * @example
   * // Update or create a Product_sales
   * const product_sales = await prisma.product_sales.upsert({
   *   create: {
   *     // ... data to create a Product_sales
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Product_sales we want to update
   *   }
   * })
   */
  upsert<T extends product_salesUpsertArgs>(args: Prisma.SelectSubset<T, product_salesUpsertArgs<ExtArgs>>): Prisma.Prisma__product_salesClient<runtime.Types.Result.GetResult<Prisma.$product_salesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Product_sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {product_salesCountArgs} args - Arguments to filter Product_sales to count.
   * @example
   * // Count the number of Product_sales
   * const count = await prisma.product_sales.count({
   *   where: {
   *     // ... the filter for the Product_sales we want to count
   *   }
   * })
  **/
  count<T extends product_salesCountArgs>(
    args?: Prisma.Subset<T, product_salesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Product_salesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Product_sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Product_salesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Product_salesAggregateArgs>(args: Prisma.Subset<T, Product_salesAggregateArgs>): Prisma.PrismaPromise<GetProduct_salesAggregateType<T>>

  /**
   * Group by Product_sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {product_salesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends product_salesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: product_salesGroupByArgs['orderBy'] }
      : { orderBy?: product_salesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, product_salesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_salesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the product_sales model
 */
readonly fields: product_salesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for product_sales.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__product_salesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  item_product_sales<T extends Prisma.product_sales$item_product_salesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.product_sales$item_product_salesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$item_product_salesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  products<T extends Prisma.productsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.productsDefaultArgs<ExtArgs>>): Prisma.Prisma__productsClient<runtime.Types.Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  sales<T extends Prisma.salesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.salesDefaultArgs<ExtArgs>>): Prisma.Prisma__salesClient<runtime.Types.Result.GetResult<Prisma.$salesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the product_sales model
 */
export interface product_salesFieldRefs {
  readonly id: Prisma.FieldRef<"product_sales", 'Int'>
  readonly sale_id: Prisma.FieldRef<"product_sales", 'Int'>
  readonly product_id: Prisma.FieldRef<"product_sales", 'Int'>
  readonly quantity: Prisma.FieldRef<"product_sales", 'Float'>
  readonly base_price: Prisma.FieldRef<"product_sales", 'Float'>
  readonly total_price: Prisma.FieldRef<"product_sales", 'Float'>
  readonly observations: Prisma.FieldRef<"product_sales", 'String'>
}
    

// Custom InputTypes
/**
 * product_sales findUnique
 */
export type product_salesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
  /**
   * Filter, which product_sales to fetch.
   */
  where: Prisma.product_salesWhereUniqueInput
}

/**
 * product_sales findUniqueOrThrow
 */
export type product_salesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
  /**
   * Filter, which product_sales to fetch.
   */
  where: Prisma.product_salesWhereUniqueInput
}

/**
 * product_sales findFirst
 */
export type product_salesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
  /**
   * Filter, which product_sales to fetch.
   */
  where?: Prisma.product_salesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of product_sales to fetch.
   */
  orderBy?: Prisma.product_salesOrderByWithRelationInput | Prisma.product_salesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for product_sales.
   */
  cursor?: Prisma.product_salesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` product_sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` product_sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of product_sales.
   */
  distinct?: Prisma.Product_salesScalarFieldEnum | Prisma.Product_salesScalarFieldEnum[]
}

/**
 * product_sales findFirstOrThrow
 */
export type product_salesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
  /**
   * Filter, which product_sales to fetch.
   */
  where?: Prisma.product_salesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of product_sales to fetch.
   */
  orderBy?: Prisma.product_salesOrderByWithRelationInput | Prisma.product_salesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for product_sales.
   */
  cursor?: Prisma.product_salesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` product_sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` product_sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of product_sales.
   */
  distinct?: Prisma.Product_salesScalarFieldEnum | Prisma.Product_salesScalarFieldEnum[]
}

/**
 * product_sales findMany
 */
export type product_salesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
  /**
   * Filter, which product_sales to fetch.
   */
  where?: Prisma.product_salesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of product_sales to fetch.
   */
  orderBy?: Prisma.product_salesOrderByWithRelationInput | Prisma.product_salesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing product_sales.
   */
  cursor?: Prisma.product_salesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` product_sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` product_sales.
   */
  skip?: number
  distinct?: Prisma.Product_salesScalarFieldEnum | Prisma.Product_salesScalarFieldEnum[]
}

/**
 * product_sales create
 */
export type product_salesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
  /**
   * The data needed to create a product_sales.
   */
  data: Prisma.XOR<Prisma.product_salesCreateInput, Prisma.product_salesUncheckedCreateInput>
}

/**
 * product_sales createMany
 */
export type product_salesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many product_sales.
   */
  data: Prisma.product_salesCreateManyInput | Prisma.product_salesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * product_sales createManyAndReturn
 */
export type product_salesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * The data used to create many product_sales.
   */
  data: Prisma.product_salesCreateManyInput | Prisma.product_salesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * product_sales update
 */
export type product_salesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
  /**
   * The data needed to update a product_sales.
   */
  data: Prisma.XOR<Prisma.product_salesUpdateInput, Prisma.product_salesUncheckedUpdateInput>
  /**
   * Choose, which product_sales to update.
   */
  where: Prisma.product_salesWhereUniqueInput
}

/**
 * product_sales updateMany
 */
export type product_salesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update product_sales.
   */
  data: Prisma.XOR<Prisma.product_salesUpdateManyMutationInput, Prisma.product_salesUncheckedUpdateManyInput>
  /**
   * Filter which product_sales to update
   */
  where?: Prisma.product_salesWhereInput
  /**
   * Limit how many product_sales to update.
   */
  limit?: number
}

/**
 * product_sales updateManyAndReturn
 */
export type product_salesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * The data used to update product_sales.
   */
  data: Prisma.XOR<Prisma.product_salesUpdateManyMutationInput, Prisma.product_salesUncheckedUpdateManyInput>
  /**
   * Filter which product_sales to update
   */
  where?: Prisma.product_salesWhereInput
  /**
   * Limit how many product_sales to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * product_sales upsert
 */
export type product_salesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
  /**
   * The filter to search for the product_sales to update in case it exists.
   */
  where: Prisma.product_salesWhereUniqueInput
  /**
   * In case the product_sales found by the `where` argument doesn't exist, create a new product_sales with this data.
   */
  create: Prisma.XOR<Prisma.product_salesCreateInput, Prisma.product_salesUncheckedCreateInput>
  /**
   * In case the product_sales was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.product_salesUpdateInput, Prisma.product_salesUncheckedUpdateInput>
}

/**
 * product_sales delete
 */
export type product_salesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
  /**
   * Filter which product_sales to delete.
   */
  where: Prisma.product_salesWhereUniqueInput
}

/**
 * product_sales deleteMany
 */
export type product_salesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which product_sales to delete
   */
  where?: Prisma.product_salesWhereInput
  /**
   * Limit how many product_sales to delete.
   */
  limit?: number
}

/**
 * product_sales.item_product_sales
 */
export type product_sales$item_product_salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the item_product_sales
   */
  select?: Prisma.item_product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the item_product_sales
   */
  omit?: Prisma.item_product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.item_product_salesInclude<ExtArgs> | null
  where?: Prisma.item_product_salesWhereInput
  orderBy?: Prisma.item_product_salesOrderByWithRelationInput | Prisma.item_product_salesOrderByWithRelationInput[]
  cursor?: Prisma.item_product_salesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Item_product_salesScalarFieldEnum | Prisma.Item_product_salesScalarFieldEnum[]
}

/**
 * product_sales without action
 */
export type product_salesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the product_sales
   */
  select?: Prisma.product_salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the product_sales
   */
  omit?: Prisma.product_salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.product_salesInclude<ExtArgs> | null
}
