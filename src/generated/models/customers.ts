
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `customers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model customers
 * 
 */
export type customersModel = runtime.Types.Result.DefaultSelection<Prisma.$customersPayload>

export type AggregateCustomers = {
  _count: CustomersCountAggregateOutputType | null
  _avg: CustomersAvgAggregateOutputType | null
  _sum: CustomersSumAggregateOutputType | null
  _min: CustomersMinAggregateOutputType | null
  _max: CustomersMaxAggregateOutputType | null
}

export type CustomersAvgAggregateOutputType = {
  id: number | null
  store_id: number | null
  sub_brand_id: number | null
}

export type CustomersSumAggregateOutputType = {
  id: number | null
  store_id: number | null
  sub_brand_id: number | null
}

export type CustomersMinAggregateOutputType = {
  id: number | null
  customer_name: string | null
  email: string | null
  phone_number: string | null
  cpf: string | null
  birth_date: Date | null
  gender: string | null
  store_id: number | null
  sub_brand_id: number | null
  registration_origin: string | null
  agree_terms: boolean | null
  receive_promotions_email: boolean | null
  receive_promotions_sms: boolean | null
  created_at: Date | null
}

export type CustomersMaxAggregateOutputType = {
  id: number | null
  customer_name: string | null
  email: string | null
  phone_number: string | null
  cpf: string | null
  birth_date: Date | null
  gender: string | null
  store_id: number | null
  sub_brand_id: number | null
  registration_origin: string | null
  agree_terms: boolean | null
  receive_promotions_email: boolean | null
  receive_promotions_sms: boolean | null
  created_at: Date | null
}

export type CustomersCountAggregateOutputType = {
  id: number
  customer_name: number
  email: number
  phone_number: number
  cpf: number
  birth_date: number
  gender: number
  store_id: number
  sub_brand_id: number
  registration_origin: number
  agree_terms: number
  receive_promotions_email: number
  receive_promotions_sms: number
  created_at: number
  _all: number
}


export type CustomersAvgAggregateInputType = {
  id?: true
  store_id?: true
  sub_brand_id?: true
}

export type CustomersSumAggregateInputType = {
  id?: true
  store_id?: true
  sub_brand_id?: true
}

export type CustomersMinAggregateInputType = {
  id?: true
  customer_name?: true
  email?: true
  phone_number?: true
  cpf?: true
  birth_date?: true
  gender?: true
  store_id?: true
  sub_brand_id?: true
  registration_origin?: true
  agree_terms?: true
  receive_promotions_email?: true
  receive_promotions_sms?: true
  created_at?: true
}

export type CustomersMaxAggregateInputType = {
  id?: true
  customer_name?: true
  email?: true
  phone_number?: true
  cpf?: true
  birth_date?: true
  gender?: true
  store_id?: true
  sub_brand_id?: true
  registration_origin?: true
  agree_terms?: true
  receive_promotions_email?: true
  receive_promotions_sms?: true
  created_at?: true
}

export type CustomersCountAggregateInputType = {
  id?: true
  customer_name?: true
  email?: true
  phone_number?: true
  cpf?: true
  birth_date?: true
  gender?: true
  store_id?: true
  sub_brand_id?: true
  registration_origin?: true
  agree_terms?: true
  receive_promotions_email?: true
  receive_promotions_sms?: true
  created_at?: true
  _all?: true
}

export type CustomersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which customers to aggregate.
   */
  where?: Prisma.customersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customers to fetch.
   */
  orderBy?: Prisma.customersOrderByWithRelationInput | Prisma.customersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.customersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned customers
  **/
  _count?: true | CustomersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CustomersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CustomersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CustomersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CustomersMaxAggregateInputType
}

export type GetCustomersAggregateType<T extends CustomersAggregateArgs> = {
      [P in keyof T & keyof AggregateCustomers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCustomers[P]>
    : Prisma.GetScalarType<T[P], AggregateCustomers[P]>
}




export type customersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.customersWhereInput
  orderBy?: Prisma.customersOrderByWithAggregationInput | Prisma.customersOrderByWithAggregationInput[]
  by: Prisma.CustomersScalarFieldEnum[] | Prisma.CustomersScalarFieldEnum
  having?: Prisma.customersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CustomersCountAggregateInputType | true
  _avg?: CustomersAvgAggregateInputType
  _sum?: CustomersSumAggregateInputType
  _min?: CustomersMinAggregateInputType
  _max?: CustomersMaxAggregateInputType
}

export type CustomersGroupByOutputType = {
  id: number
  customer_name: string | null
  email: string | null
  phone_number: string | null
  cpf: string | null
  birth_date: Date | null
  gender: string | null
  store_id: number | null
  sub_brand_id: number | null
  registration_origin: string | null
  agree_terms: boolean | null
  receive_promotions_email: boolean | null
  receive_promotions_sms: boolean | null
  created_at: Date | null
  _count: CustomersCountAggregateOutputType | null
  _avg: CustomersAvgAggregateOutputType | null
  _sum: CustomersSumAggregateOutputType | null
  _min: CustomersMinAggregateOutputType | null
  _max: CustomersMaxAggregateOutputType | null
}

type GetCustomersGroupByPayload<T extends customersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CustomersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CustomersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CustomersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CustomersGroupByOutputType[P]>
      }
    >
  >



export type customersWhereInput = {
  AND?: Prisma.customersWhereInput | Prisma.customersWhereInput[]
  OR?: Prisma.customersWhereInput[]
  NOT?: Prisma.customersWhereInput | Prisma.customersWhereInput[]
  id?: Prisma.IntFilter<"customers"> | number
  customer_name?: Prisma.StringNullableFilter<"customers"> | string | null
  email?: Prisma.StringNullableFilter<"customers"> | string | null
  phone_number?: Prisma.StringNullableFilter<"customers"> | string | null
  cpf?: Prisma.StringNullableFilter<"customers"> | string | null
  birth_date?: Prisma.DateTimeNullableFilter<"customers"> | Date | string | null
  gender?: Prisma.StringNullableFilter<"customers"> | string | null
  store_id?: Prisma.IntNullableFilter<"customers"> | number | null
  sub_brand_id?: Prisma.IntNullableFilter<"customers"> | number | null
  registration_origin?: Prisma.StringNullableFilter<"customers"> | string | null
  agree_terms?: Prisma.BoolNullableFilter<"customers"> | boolean | null
  receive_promotions_email?: Prisma.BoolNullableFilter<"customers"> | boolean | null
  receive_promotions_sms?: Prisma.BoolNullableFilter<"customers"> | boolean | null
  created_at?: Prisma.DateTimeNullableFilter<"customers"> | Date | string | null
  stores?: Prisma.XOR<Prisma.StoresNullableScalarRelationFilter, Prisma.storesWhereInput> | null
  sub_brands?: Prisma.XOR<Prisma.Sub_brandsNullableScalarRelationFilter, Prisma.sub_brandsWhereInput> | null
  sales?: Prisma.SalesListRelationFilter
}

export type customersOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  customer_name?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  phone_number?: Prisma.SortOrderInput | Prisma.SortOrder
  cpf?: Prisma.SortOrderInput | Prisma.SortOrder
  birth_date?: Prisma.SortOrderInput | Prisma.SortOrder
  gender?: Prisma.SortOrderInput | Prisma.SortOrder
  store_id?: Prisma.SortOrderInput | Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  registration_origin?: Prisma.SortOrderInput | Prisma.SortOrder
  agree_terms?: Prisma.SortOrderInput | Prisma.SortOrder
  receive_promotions_email?: Prisma.SortOrderInput | Prisma.SortOrder
  receive_promotions_sms?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  stores?: Prisma.storesOrderByWithRelationInput
  sub_brands?: Prisma.sub_brandsOrderByWithRelationInput
  sales?: Prisma.salesOrderByRelationAggregateInput
}

export type customersWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.customersWhereInput | Prisma.customersWhereInput[]
  OR?: Prisma.customersWhereInput[]
  NOT?: Prisma.customersWhereInput | Prisma.customersWhereInput[]
  customer_name?: Prisma.StringNullableFilter<"customers"> | string | null
  email?: Prisma.StringNullableFilter<"customers"> | string | null
  phone_number?: Prisma.StringNullableFilter<"customers"> | string | null
  cpf?: Prisma.StringNullableFilter<"customers"> | string | null
  birth_date?: Prisma.DateTimeNullableFilter<"customers"> | Date | string | null
  gender?: Prisma.StringNullableFilter<"customers"> | string | null
  store_id?: Prisma.IntNullableFilter<"customers"> | number | null
  sub_brand_id?: Prisma.IntNullableFilter<"customers"> | number | null
  registration_origin?: Prisma.StringNullableFilter<"customers"> | string | null
  agree_terms?: Prisma.BoolNullableFilter<"customers"> | boolean | null
  receive_promotions_email?: Prisma.BoolNullableFilter<"customers"> | boolean | null
  receive_promotions_sms?: Prisma.BoolNullableFilter<"customers"> | boolean | null
  created_at?: Prisma.DateTimeNullableFilter<"customers"> | Date | string | null
  stores?: Prisma.XOR<Prisma.StoresNullableScalarRelationFilter, Prisma.storesWhereInput> | null
  sub_brands?: Prisma.XOR<Prisma.Sub_brandsNullableScalarRelationFilter, Prisma.sub_brandsWhereInput> | null
  sales?: Prisma.SalesListRelationFilter
}, "id">

export type customersOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  customer_name?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  phone_number?: Prisma.SortOrderInput | Prisma.SortOrder
  cpf?: Prisma.SortOrderInput | Prisma.SortOrder
  birth_date?: Prisma.SortOrderInput | Prisma.SortOrder
  gender?: Prisma.SortOrderInput | Prisma.SortOrder
  store_id?: Prisma.SortOrderInput | Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrderInput | Prisma.SortOrder
  registration_origin?: Prisma.SortOrderInput | Prisma.SortOrder
  agree_terms?: Prisma.SortOrderInput | Prisma.SortOrder
  receive_promotions_email?: Prisma.SortOrderInput | Prisma.SortOrder
  receive_promotions_sms?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.customersCountOrderByAggregateInput
  _avg?: Prisma.customersAvgOrderByAggregateInput
  _max?: Prisma.customersMaxOrderByAggregateInput
  _min?: Prisma.customersMinOrderByAggregateInput
  _sum?: Prisma.customersSumOrderByAggregateInput
}

export type customersScalarWhereWithAggregatesInput = {
  AND?: Prisma.customersScalarWhereWithAggregatesInput | Prisma.customersScalarWhereWithAggregatesInput[]
  OR?: Prisma.customersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.customersScalarWhereWithAggregatesInput | Prisma.customersScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"customers"> | number
  customer_name?: Prisma.StringNullableWithAggregatesFilter<"customers"> | string | null
  email?: Prisma.StringNullableWithAggregatesFilter<"customers"> | string | null
  phone_number?: Prisma.StringNullableWithAggregatesFilter<"customers"> | string | null
  cpf?: Prisma.StringNullableWithAggregatesFilter<"customers"> | string | null
  birth_date?: Prisma.DateTimeNullableWithAggregatesFilter<"customers"> | Date | string | null
  gender?: Prisma.StringNullableWithAggregatesFilter<"customers"> | string | null
  store_id?: Prisma.IntNullableWithAggregatesFilter<"customers"> | number | null
  sub_brand_id?: Prisma.IntNullableWithAggregatesFilter<"customers"> | number | null
  registration_origin?: Prisma.StringNullableWithAggregatesFilter<"customers"> | string | null
  agree_terms?: Prisma.BoolNullableWithAggregatesFilter<"customers"> | boolean | null
  receive_promotions_email?: Prisma.BoolNullableWithAggregatesFilter<"customers"> | boolean | null
  receive_promotions_sms?: Prisma.BoolNullableWithAggregatesFilter<"customers"> | boolean | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"customers"> | Date | string | null
}

export type customersCreateInput = {
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
  stores?: Prisma.storesCreateNestedOneWithoutCustomersInput
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutCustomersInput
  sales?: Prisma.salesCreateNestedManyWithoutCustomersInput
}

export type customersUncheckedCreateInput = {
  id?: number
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  store_id?: number | null
  sub_brand_id?: number | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutCustomersInput
}

export type customersUpdateInput = {
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  stores?: Prisma.storesUpdateOneWithoutCustomersNestedInput
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutCustomersNestedInput
  sales?: Prisma.salesUpdateManyWithoutCustomersNestedInput
}

export type customersUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  store_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.salesUncheckedUpdateManyWithoutCustomersNestedInput
}

export type customersCreateManyInput = {
  id?: number
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  store_id?: number | null
  sub_brand_id?: number | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
}

export type customersUpdateManyMutationInput = {
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type customersUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  store_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type customersCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  customer_name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone_number?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  birth_date?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  store_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  registration_origin?: Prisma.SortOrder
  agree_terms?: Prisma.SortOrder
  receive_promotions_email?: Prisma.SortOrder
  receive_promotions_sms?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type customersAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  store_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
}

export type customersMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  customer_name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone_number?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  birth_date?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  store_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  registration_origin?: Prisma.SortOrder
  agree_terms?: Prisma.SortOrder
  receive_promotions_email?: Prisma.SortOrder
  receive_promotions_sms?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type customersMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  customer_name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone_number?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  birth_date?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  store_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
  registration_origin?: Prisma.SortOrder
  agree_terms?: Prisma.SortOrder
  receive_promotions_email?: Prisma.SortOrder
  receive_promotions_sms?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type customersSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  store_id?: Prisma.SortOrder
  sub_brand_id?: Prisma.SortOrder
}

export type CustomersNullableScalarRelationFilter = {
  is?: Prisma.customersWhereInput | null
  isNot?: Prisma.customersWhereInput | null
}

export type CustomersListRelationFilter = {
  every?: Prisma.customersWhereInput
  some?: Prisma.customersWhereInput
  none?: Prisma.customersWhereInput
}

export type customersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type customersCreateNestedOneWithoutSalesInput = {
  create?: Prisma.XOR<Prisma.customersCreateWithoutSalesInput, Prisma.customersUncheckedCreateWithoutSalesInput>
  connectOrCreate?: Prisma.customersCreateOrConnectWithoutSalesInput
  connect?: Prisma.customersWhereUniqueInput
}

export type customersUpdateOneWithoutSalesNestedInput = {
  create?: Prisma.XOR<Prisma.customersCreateWithoutSalesInput, Prisma.customersUncheckedCreateWithoutSalesInput>
  connectOrCreate?: Prisma.customersCreateOrConnectWithoutSalesInput
  upsert?: Prisma.customersUpsertWithoutSalesInput
  disconnect?: Prisma.customersWhereInput | boolean
  delete?: Prisma.customersWhereInput | boolean
  connect?: Prisma.customersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.customersUpdateToOneWithWhereWithoutSalesInput, Prisma.customersUpdateWithoutSalesInput>, Prisma.customersUncheckedUpdateWithoutSalesInput>
}

export type customersCreateNestedManyWithoutStoresInput = {
  create?: Prisma.XOR<Prisma.customersCreateWithoutStoresInput, Prisma.customersUncheckedCreateWithoutStoresInput> | Prisma.customersCreateWithoutStoresInput[] | Prisma.customersUncheckedCreateWithoutStoresInput[]
  connectOrCreate?: Prisma.customersCreateOrConnectWithoutStoresInput | Prisma.customersCreateOrConnectWithoutStoresInput[]
  createMany?: Prisma.customersCreateManyStoresInputEnvelope
  connect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
}

export type customersUncheckedCreateNestedManyWithoutStoresInput = {
  create?: Prisma.XOR<Prisma.customersCreateWithoutStoresInput, Prisma.customersUncheckedCreateWithoutStoresInput> | Prisma.customersCreateWithoutStoresInput[] | Prisma.customersUncheckedCreateWithoutStoresInput[]
  connectOrCreate?: Prisma.customersCreateOrConnectWithoutStoresInput | Prisma.customersCreateOrConnectWithoutStoresInput[]
  createMany?: Prisma.customersCreateManyStoresInputEnvelope
  connect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
}

export type customersUpdateManyWithoutStoresNestedInput = {
  create?: Prisma.XOR<Prisma.customersCreateWithoutStoresInput, Prisma.customersUncheckedCreateWithoutStoresInput> | Prisma.customersCreateWithoutStoresInput[] | Prisma.customersUncheckedCreateWithoutStoresInput[]
  connectOrCreate?: Prisma.customersCreateOrConnectWithoutStoresInput | Prisma.customersCreateOrConnectWithoutStoresInput[]
  upsert?: Prisma.customersUpsertWithWhereUniqueWithoutStoresInput | Prisma.customersUpsertWithWhereUniqueWithoutStoresInput[]
  createMany?: Prisma.customersCreateManyStoresInputEnvelope
  set?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  disconnect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  delete?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  connect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  update?: Prisma.customersUpdateWithWhereUniqueWithoutStoresInput | Prisma.customersUpdateWithWhereUniqueWithoutStoresInput[]
  updateMany?: Prisma.customersUpdateManyWithWhereWithoutStoresInput | Prisma.customersUpdateManyWithWhereWithoutStoresInput[]
  deleteMany?: Prisma.customersScalarWhereInput | Prisma.customersScalarWhereInput[]
}

export type customersUncheckedUpdateManyWithoutStoresNestedInput = {
  create?: Prisma.XOR<Prisma.customersCreateWithoutStoresInput, Prisma.customersUncheckedCreateWithoutStoresInput> | Prisma.customersCreateWithoutStoresInput[] | Prisma.customersUncheckedCreateWithoutStoresInput[]
  connectOrCreate?: Prisma.customersCreateOrConnectWithoutStoresInput | Prisma.customersCreateOrConnectWithoutStoresInput[]
  upsert?: Prisma.customersUpsertWithWhereUniqueWithoutStoresInput | Prisma.customersUpsertWithWhereUniqueWithoutStoresInput[]
  createMany?: Prisma.customersCreateManyStoresInputEnvelope
  set?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  disconnect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  delete?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  connect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  update?: Prisma.customersUpdateWithWhereUniqueWithoutStoresInput | Prisma.customersUpdateWithWhereUniqueWithoutStoresInput[]
  updateMany?: Prisma.customersUpdateManyWithWhereWithoutStoresInput | Prisma.customersUpdateManyWithWhereWithoutStoresInput[]
  deleteMany?: Prisma.customersScalarWhereInput | Prisma.customersScalarWhereInput[]
}

export type customersCreateNestedManyWithoutSub_brandsInput = {
  create?: Prisma.XOR<Prisma.customersCreateWithoutSub_brandsInput, Prisma.customersUncheckedCreateWithoutSub_brandsInput> | Prisma.customersCreateWithoutSub_brandsInput[] | Prisma.customersUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.customersCreateOrConnectWithoutSub_brandsInput | Prisma.customersCreateOrConnectWithoutSub_brandsInput[]
  createMany?: Prisma.customersCreateManySub_brandsInputEnvelope
  connect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
}

export type customersUncheckedCreateNestedManyWithoutSub_brandsInput = {
  create?: Prisma.XOR<Prisma.customersCreateWithoutSub_brandsInput, Prisma.customersUncheckedCreateWithoutSub_brandsInput> | Prisma.customersCreateWithoutSub_brandsInput[] | Prisma.customersUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.customersCreateOrConnectWithoutSub_brandsInput | Prisma.customersCreateOrConnectWithoutSub_brandsInput[]
  createMany?: Prisma.customersCreateManySub_brandsInputEnvelope
  connect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
}

export type customersUpdateManyWithoutSub_brandsNestedInput = {
  create?: Prisma.XOR<Prisma.customersCreateWithoutSub_brandsInput, Prisma.customersUncheckedCreateWithoutSub_brandsInput> | Prisma.customersCreateWithoutSub_brandsInput[] | Prisma.customersUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.customersCreateOrConnectWithoutSub_brandsInput | Prisma.customersCreateOrConnectWithoutSub_brandsInput[]
  upsert?: Prisma.customersUpsertWithWhereUniqueWithoutSub_brandsInput | Prisma.customersUpsertWithWhereUniqueWithoutSub_brandsInput[]
  createMany?: Prisma.customersCreateManySub_brandsInputEnvelope
  set?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  disconnect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  delete?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  connect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  update?: Prisma.customersUpdateWithWhereUniqueWithoutSub_brandsInput | Prisma.customersUpdateWithWhereUniqueWithoutSub_brandsInput[]
  updateMany?: Prisma.customersUpdateManyWithWhereWithoutSub_brandsInput | Prisma.customersUpdateManyWithWhereWithoutSub_brandsInput[]
  deleteMany?: Prisma.customersScalarWhereInput | Prisma.customersScalarWhereInput[]
}

export type customersUncheckedUpdateManyWithoutSub_brandsNestedInput = {
  create?: Prisma.XOR<Prisma.customersCreateWithoutSub_brandsInput, Prisma.customersUncheckedCreateWithoutSub_brandsInput> | Prisma.customersCreateWithoutSub_brandsInput[] | Prisma.customersUncheckedCreateWithoutSub_brandsInput[]
  connectOrCreate?: Prisma.customersCreateOrConnectWithoutSub_brandsInput | Prisma.customersCreateOrConnectWithoutSub_brandsInput[]
  upsert?: Prisma.customersUpsertWithWhereUniqueWithoutSub_brandsInput | Prisma.customersUpsertWithWhereUniqueWithoutSub_brandsInput[]
  createMany?: Prisma.customersCreateManySub_brandsInputEnvelope
  set?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  disconnect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  delete?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  connect?: Prisma.customersWhereUniqueInput | Prisma.customersWhereUniqueInput[]
  update?: Prisma.customersUpdateWithWhereUniqueWithoutSub_brandsInput | Prisma.customersUpdateWithWhereUniqueWithoutSub_brandsInput[]
  updateMany?: Prisma.customersUpdateManyWithWhereWithoutSub_brandsInput | Prisma.customersUpdateManyWithWhereWithoutSub_brandsInput[]
  deleteMany?: Prisma.customersScalarWhereInput | Prisma.customersScalarWhereInput[]
}

export type customersCreateWithoutSalesInput = {
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
  stores?: Prisma.storesCreateNestedOneWithoutCustomersInput
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutCustomersInput
}

export type customersUncheckedCreateWithoutSalesInput = {
  id?: number
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  store_id?: number | null
  sub_brand_id?: number | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
}

export type customersCreateOrConnectWithoutSalesInput = {
  where: Prisma.customersWhereUniqueInput
  create: Prisma.XOR<Prisma.customersCreateWithoutSalesInput, Prisma.customersUncheckedCreateWithoutSalesInput>
}

export type customersUpsertWithoutSalesInput = {
  update: Prisma.XOR<Prisma.customersUpdateWithoutSalesInput, Prisma.customersUncheckedUpdateWithoutSalesInput>
  create: Prisma.XOR<Prisma.customersCreateWithoutSalesInput, Prisma.customersUncheckedCreateWithoutSalesInput>
  where?: Prisma.customersWhereInput
}

export type customersUpdateToOneWithWhereWithoutSalesInput = {
  where?: Prisma.customersWhereInput
  data: Prisma.XOR<Prisma.customersUpdateWithoutSalesInput, Prisma.customersUncheckedUpdateWithoutSalesInput>
}

export type customersUpdateWithoutSalesInput = {
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  stores?: Prisma.storesUpdateOneWithoutCustomersNestedInput
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutCustomersNestedInput
}

export type customersUncheckedUpdateWithoutSalesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  store_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type customersCreateWithoutStoresInput = {
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
  sub_brands?: Prisma.sub_brandsCreateNestedOneWithoutCustomersInput
  sales?: Prisma.salesCreateNestedManyWithoutCustomersInput
}

export type customersUncheckedCreateWithoutStoresInput = {
  id?: number
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  sub_brand_id?: number | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutCustomersInput
}

export type customersCreateOrConnectWithoutStoresInput = {
  where: Prisma.customersWhereUniqueInput
  create: Prisma.XOR<Prisma.customersCreateWithoutStoresInput, Prisma.customersUncheckedCreateWithoutStoresInput>
}

export type customersCreateManyStoresInputEnvelope = {
  data: Prisma.customersCreateManyStoresInput | Prisma.customersCreateManyStoresInput[]
  skipDuplicates?: boolean
}

export type customersUpsertWithWhereUniqueWithoutStoresInput = {
  where: Prisma.customersWhereUniqueInput
  update: Prisma.XOR<Prisma.customersUpdateWithoutStoresInput, Prisma.customersUncheckedUpdateWithoutStoresInput>
  create: Prisma.XOR<Prisma.customersCreateWithoutStoresInput, Prisma.customersUncheckedCreateWithoutStoresInput>
}

export type customersUpdateWithWhereUniqueWithoutStoresInput = {
  where: Prisma.customersWhereUniqueInput
  data: Prisma.XOR<Prisma.customersUpdateWithoutStoresInput, Prisma.customersUncheckedUpdateWithoutStoresInput>
}

export type customersUpdateManyWithWhereWithoutStoresInput = {
  where: Prisma.customersScalarWhereInput
  data: Prisma.XOR<Prisma.customersUpdateManyMutationInput, Prisma.customersUncheckedUpdateManyWithoutStoresInput>
}

export type customersScalarWhereInput = {
  AND?: Prisma.customersScalarWhereInput | Prisma.customersScalarWhereInput[]
  OR?: Prisma.customersScalarWhereInput[]
  NOT?: Prisma.customersScalarWhereInput | Prisma.customersScalarWhereInput[]
  id?: Prisma.IntFilter<"customers"> | number
  customer_name?: Prisma.StringNullableFilter<"customers"> | string | null
  email?: Prisma.StringNullableFilter<"customers"> | string | null
  phone_number?: Prisma.StringNullableFilter<"customers"> | string | null
  cpf?: Prisma.StringNullableFilter<"customers"> | string | null
  birth_date?: Prisma.DateTimeNullableFilter<"customers"> | Date | string | null
  gender?: Prisma.StringNullableFilter<"customers"> | string | null
  store_id?: Prisma.IntNullableFilter<"customers"> | number | null
  sub_brand_id?: Prisma.IntNullableFilter<"customers"> | number | null
  registration_origin?: Prisma.StringNullableFilter<"customers"> | string | null
  agree_terms?: Prisma.BoolNullableFilter<"customers"> | boolean | null
  receive_promotions_email?: Prisma.BoolNullableFilter<"customers"> | boolean | null
  receive_promotions_sms?: Prisma.BoolNullableFilter<"customers"> | boolean | null
  created_at?: Prisma.DateTimeNullableFilter<"customers"> | Date | string | null
}

export type customersCreateWithoutSub_brandsInput = {
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
  stores?: Prisma.storesCreateNestedOneWithoutCustomersInput
  sales?: Prisma.salesCreateNestedManyWithoutCustomersInput
}

export type customersUncheckedCreateWithoutSub_brandsInput = {
  id?: number
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  store_id?: number | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
  sales?: Prisma.salesUncheckedCreateNestedManyWithoutCustomersInput
}

export type customersCreateOrConnectWithoutSub_brandsInput = {
  where: Prisma.customersWhereUniqueInput
  create: Prisma.XOR<Prisma.customersCreateWithoutSub_brandsInput, Prisma.customersUncheckedCreateWithoutSub_brandsInput>
}

export type customersCreateManySub_brandsInputEnvelope = {
  data: Prisma.customersCreateManySub_brandsInput | Prisma.customersCreateManySub_brandsInput[]
  skipDuplicates?: boolean
}

export type customersUpsertWithWhereUniqueWithoutSub_brandsInput = {
  where: Prisma.customersWhereUniqueInput
  update: Prisma.XOR<Prisma.customersUpdateWithoutSub_brandsInput, Prisma.customersUncheckedUpdateWithoutSub_brandsInput>
  create: Prisma.XOR<Prisma.customersCreateWithoutSub_brandsInput, Prisma.customersUncheckedCreateWithoutSub_brandsInput>
}

export type customersUpdateWithWhereUniqueWithoutSub_brandsInput = {
  where: Prisma.customersWhereUniqueInput
  data: Prisma.XOR<Prisma.customersUpdateWithoutSub_brandsInput, Prisma.customersUncheckedUpdateWithoutSub_brandsInput>
}

export type customersUpdateManyWithWhereWithoutSub_brandsInput = {
  where: Prisma.customersScalarWhereInput
  data: Prisma.XOR<Prisma.customersUpdateManyMutationInput, Prisma.customersUncheckedUpdateManyWithoutSub_brandsInput>
}

export type customersCreateManyStoresInput = {
  id?: number
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  sub_brand_id?: number | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
}

export type customersUpdateWithoutStoresInput = {
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sub_brands?: Prisma.sub_brandsUpdateOneWithoutCustomersNestedInput
  sales?: Prisma.salesUpdateManyWithoutCustomersNestedInput
}

export type customersUncheckedUpdateWithoutStoresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.salesUncheckedUpdateManyWithoutCustomersNestedInput
}

export type customersUncheckedUpdateManyWithoutStoresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sub_brand_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type customersCreateManySub_brandsInput = {
  id?: number
  customer_name?: string | null
  email?: string | null
  phone_number?: string | null
  cpf?: string | null
  birth_date?: Date | string | null
  gender?: string | null
  store_id?: number | null
  registration_origin?: string | null
  agree_terms?: boolean | null
  receive_promotions_email?: boolean | null
  receive_promotions_sms?: boolean | null
  created_at?: Date | string | null
}

export type customersUpdateWithoutSub_brandsInput = {
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  stores?: Prisma.storesUpdateOneWithoutCustomersNestedInput
  sales?: Prisma.salesUpdateManyWithoutCustomersNestedInput
}

export type customersUncheckedUpdateWithoutSub_brandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  store_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  sales?: Prisma.salesUncheckedUpdateManyWithoutCustomersNestedInput
}

export type customersUncheckedUpdateManyWithoutSub_brandsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone_number?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  birth_date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  gender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  store_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  registration_origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  agree_terms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_email?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  receive_promotions_sms?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type CustomersCountOutputType
 */

export type CustomersCountOutputType = {
  sales: number
}

export type CustomersCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sales?: boolean | CustomersCountOutputTypeCountSalesArgs
}

/**
 * CustomersCountOutputType without action
 */
export type CustomersCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomersCountOutputType
   */
  select?: Prisma.CustomersCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CustomersCountOutputType without action
 */
export type CustomersCountOutputTypeCountSalesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.salesWhereInput
}


export type customersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  customer_name?: boolean
  email?: boolean
  phone_number?: boolean
  cpf?: boolean
  birth_date?: boolean
  gender?: boolean
  store_id?: boolean
  sub_brand_id?: boolean
  registration_origin?: boolean
  agree_terms?: boolean
  receive_promotions_email?: boolean
  receive_promotions_sms?: boolean
  created_at?: boolean
  stores?: boolean | Prisma.customers$storesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.customers$sub_brandsArgs<ExtArgs>
  sales?: boolean | Prisma.customers$salesArgs<ExtArgs>
  _count?: boolean | Prisma.CustomersCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customers"]>

export type customersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  customer_name?: boolean
  email?: boolean
  phone_number?: boolean
  cpf?: boolean
  birth_date?: boolean
  gender?: boolean
  store_id?: boolean
  sub_brand_id?: boolean
  registration_origin?: boolean
  agree_terms?: boolean
  receive_promotions_email?: boolean
  receive_promotions_sms?: boolean
  created_at?: boolean
  stores?: boolean | Prisma.customers$storesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.customers$sub_brandsArgs<ExtArgs>
}, ExtArgs["result"]["customers"]>

export type customersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  customer_name?: boolean
  email?: boolean
  phone_number?: boolean
  cpf?: boolean
  birth_date?: boolean
  gender?: boolean
  store_id?: boolean
  sub_brand_id?: boolean
  registration_origin?: boolean
  agree_terms?: boolean
  receive_promotions_email?: boolean
  receive_promotions_sms?: boolean
  created_at?: boolean
  stores?: boolean | Prisma.customers$storesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.customers$sub_brandsArgs<ExtArgs>
}, ExtArgs["result"]["customers"]>

export type customersSelectScalar = {
  id?: boolean
  customer_name?: boolean
  email?: boolean
  phone_number?: boolean
  cpf?: boolean
  birth_date?: boolean
  gender?: boolean
  store_id?: boolean
  sub_brand_id?: boolean
  registration_origin?: boolean
  agree_terms?: boolean
  receive_promotions_email?: boolean
  receive_promotions_sms?: boolean
  created_at?: boolean
}

export type customersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "customer_name" | "email" | "phone_number" | "cpf" | "birth_date" | "gender" | "store_id" | "sub_brand_id" | "registration_origin" | "agree_terms" | "receive_promotions_email" | "receive_promotions_sms" | "created_at", ExtArgs["result"]["customers"]>
export type customersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  stores?: boolean | Prisma.customers$storesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.customers$sub_brandsArgs<ExtArgs>
  sales?: boolean | Prisma.customers$salesArgs<ExtArgs>
  _count?: boolean | Prisma.CustomersCountOutputTypeDefaultArgs<ExtArgs>
}
export type customersIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  stores?: boolean | Prisma.customers$storesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.customers$sub_brandsArgs<ExtArgs>
}
export type customersIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  stores?: boolean | Prisma.customers$storesArgs<ExtArgs>
  sub_brands?: boolean | Prisma.customers$sub_brandsArgs<ExtArgs>
}

export type $customersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "customers"
  objects: {
    stores: Prisma.$storesPayload<ExtArgs> | null
    sub_brands: Prisma.$sub_brandsPayload<ExtArgs> | null
    sales: Prisma.$salesPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    customer_name: string | null
    email: string | null
    phone_number: string | null
    cpf: string | null
    birth_date: Date | null
    gender: string | null
    store_id: number | null
    sub_brand_id: number | null
    registration_origin: string | null
    agree_terms: boolean | null
    receive_promotions_email: boolean | null
    receive_promotions_sms: boolean | null
    created_at: Date | null
  }, ExtArgs["result"]["customers"]>
  composites: {}
}

export type customersGetPayload<S extends boolean | null | undefined | customersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$customersPayload, S>

export type customersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<customersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CustomersCountAggregateInputType | true
  }

export interface customersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['customers'], meta: { name: 'customers' } }
  /**
   * Find zero or one Customers that matches the filter.
   * @param {customersFindUniqueArgs} args - Arguments to find a Customers
   * @example
   * // Get one Customers
   * const customers = await prisma.customers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends customersFindUniqueArgs>(args: Prisma.SelectSubset<T, customersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__customersClient<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Customers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {customersFindUniqueOrThrowArgs} args - Arguments to find a Customers
   * @example
   * // Get one Customers
   * const customers = await prisma.customers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends customersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, customersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__customersClient<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Customers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customersFindFirstArgs} args - Arguments to find a Customers
   * @example
   * // Get one Customers
   * const customers = await prisma.customers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends customersFindFirstArgs>(args?: Prisma.SelectSubset<T, customersFindFirstArgs<ExtArgs>>): Prisma.Prisma__customersClient<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Customers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customersFindFirstOrThrowArgs} args - Arguments to find a Customers
   * @example
   * // Get one Customers
   * const customers = await prisma.customers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends customersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, customersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__customersClient<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Customers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Customers
   * const customers = await prisma.customers.findMany()
   * 
   * // Get first 10 Customers
   * const customers = await prisma.customers.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const customersWithIdOnly = await prisma.customers.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends customersFindManyArgs>(args?: Prisma.SelectSubset<T, customersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Customers.
   * @param {customersCreateArgs} args - Arguments to create a Customers.
   * @example
   * // Create one Customers
   * const Customers = await prisma.customers.create({
   *   data: {
   *     // ... data to create a Customers
   *   }
   * })
   * 
   */
  create<T extends customersCreateArgs>(args: Prisma.SelectSubset<T, customersCreateArgs<ExtArgs>>): Prisma.Prisma__customersClient<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Customers.
   * @param {customersCreateManyArgs} args - Arguments to create many Customers.
   * @example
   * // Create many Customers
   * const customers = await prisma.customers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends customersCreateManyArgs>(args?: Prisma.SelectSubset<T, customersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Customers and returns the data saved in the database.
   * @param {customersCreateManyAndReturnArgs} args - Arguments to create many Customers.
   * @example
   * // Create many Customers
   * const customers = await prisma.customers.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Customers and only return the `id`
   * const customersWithIdOnly = await prisma.customers.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends customersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, customersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Customers.
   * @param {customersDeleteArgs} args - Arguments to delete one Customers.
   * @example
   * // Delete one Customers
   * const Customers = await prisma.customers.delete({
   *   where: {
   *     // ... filter to delete one Customers
   *   }
   * })
   * 
   */
  delete<T extends customersDeleteArgs>(args: Prisma.SelectSubset<T, customersDeleteArgs<ExtArgs>>): Prisma.Prisma__customersClient<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Customers.
   * @param {customersUpdateArgs} args - Arguments to update one Customers.
   * @example
   * // Update one Customers
   * const customers = await prisma.customers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends customersUpdateArgs>(args: Prisma.SelectSubset<T, customersUpdateArgs<ExtArgs>>): Prisma.Prisma__customersClient<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Customers.
   * @param {customersDeleteManyArgs} args - Arguments to filter Customers to delete.
   * @example
   * // Delete a few Customers
   * const { count } = await prisma.customers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends customersDeleteManyArgs>(args?: Prisma.SelectSubset<T, customersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Customers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Customers
   * const customers = await prisma.customers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends customersUpdateManyArgs>(args: Prisma.SelectSubset<T, customersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Customers and returns the data updated in the database.
   * @param {customersUpdateManyAndReturnArgs} args - Arguments to update many Customers.
   * @example
   * // Update many Customers
   * const customers = await prisma.customers.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Customers and only return the `id`
   * const customersWithIdOnly = await prisma.customers.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends customersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, customersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Customers.
   * @param {customersUpsertArgs} args - Arguments to update or create a Customers.
   * @example
   * // Update or create a Customers
   * const customers = await prisma.customers.upsert({
   *   create: {
   *     // ... data to create a Customers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Customers we want to update
   *   }
   * })
   */
  upsert<T extends customersUpsertArgs>(args: Prisma.SelectSubset<T, customersUpsertArgs<ExtArgs>>): Prisma.Prisma__customersClient<runtime.Types.Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Customers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customersCountArgs} args - Arguments to filter Customers to count.
   * @example
   * // Count the number of Customers
   * const count = await prisma.customers.count({
   *   where: {
   *     // ... the filter for the Customers we want to count
   *   }
   * })
  **/
  count<T extends customersCountArgs>(
    args?: Prisma.Subset<T, customersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CustomersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Customers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CustomersAggregateArgs>(args: Prisma.Subset<T, CustomersAggregateArgs>): Prisma.PrismaPromise<GetCustomersAggregateType<T>>

  /**
   * Group by Customers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {customersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends customersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: customersGroupByArgs['orderBy'] }
      : { orderBy?: customersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, customersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the customers model
 */
readonly fields: customersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for customers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__customersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  stores<T extends Prisma.customers$storesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.customers$storesArgs<ExtArgs>>): Prisma.Prisma__storesClient<runtime.Types.Result.GetResult<Prisma.$storesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  sub_brands<T extends Prisma.customers$sub_brandsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.customers$sub_brandsArgs<ExtArgs>>): Prisma.Prisma__sub_brandsClient<runtime.Types.Result.GetResult<Prisma.$sub_brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  sales<T extends Prisma.customers$salesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.customers$salesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$salesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the customers model
 */
export interface customersFieldRefs {
  readonly id: Prisma.FieldRef<"customers", 'Int'>
  readonly customer_name: Prisma.FieldRef<"customers", 'String'>
  readonly email: Prisma.FieldRef<"customers", 'String'>
  readonly phone_number: Prisma.FieldRef<"customers", 'String'>
  readonly cpf: Prisma.FieldRef<"customers", 'String'>
  readonly birth_date: Prisma.FieldRef<"customers", 'DateTime'>
  readonly gender: Prisma.FieldRef<"customers", 'String'>
  readonly store_id: Prisma.FieldRef<"customers", 'Int'>
  readonly sub_brand_id: Prisma.FieldRef<"customers", 'Int'>
  readonly registration_origin: Prisma.FieldRef<"customers", 'String'>
  readonly agree_terms: Prisma.FieldRef<"customers", 'Boolean'>
  readonly receive_promotions_email: Prisma.FieldRef<"customers", 'Boolean'>
  readonly receive_promotions_sms: Prisma.FieldRef<"customers", 'Boolean'>
  readonly created_at: Prisma.FieldRef<"customers", 'DateTime'>
}
    

// Custom InputTypes
/**
 * customers findUnique
 */
export type customersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
  /**
   * Filter, which customers to fetch.
   */
  where: Prisma.customersWhereUniqueInput
}

/**
 * customers findUniqueOrThrow
 */
export type customersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
  /**
   * Filter, which customers to fetch.
   */
  where: Prisma.customersWhereUniqueInput
}

/**
 * customers findFirst
 */
export type customersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
  /**
   * Filter, which customers to fetch.
   */
  where?: Prisma.customersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customers to fetch.
   */
  orderBy?: Prisma.customersOrderByWithRelationInput | Prisma.customersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for customers.
   */
  cursor?: Prisma.customersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of customers.
   */
  distinct?: Prisma.CustomersScalarFieldEnum | Prisma.CustomersScalarFieldEnum[]
}

/**
 * customers findFirstOrThrow
 */
export type customersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
  /**
   * Filter, which customers to fetch.
   */
  where?: Prisma.customersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customers to fetch.
   */
  orderBy?: Prisma.customersOrderByWithRelationInput | Prisma.customersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for customers.
   */
  cursor?: Prisma.customersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of customers.
   */
  distinct?: Prisma.CustomersScalarFieldEnum | Prisma.CustomersScalarFieldEnum[]
}

/**
 * customers findMany
 */
export type customersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
  /**
   * Filter, which customers to fetch.
   */
  where?: Prisma.customersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of customers to fetch.
   */
  orderBy?: Prisma.customersOrderByWithRelationInput | Prisma.customersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing customers.
   */
  cursor?: Prisma.customersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` customers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` customers.
   */
  skip?: number
  distinct?: Prisma.CustomersScalarFieldEnum | Prisma.CustomersScalarFieldEnum[]
}

/**
 * customers create
 */
export type customersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
  /**
   * The data needed to create a customers.
   */
  data?: Prisma.XOR<Prisma.customersCreateInput, Prisma.customersUncheckedCreateInput>
}

/**
 * customers createMany
 */
export type customersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many customers.
   */
  data: Prisma.customersCreateManyInput | Prisma.customersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * customers createManyAndReturn
 */
export type customersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * The data used to create many customers.
   */
  data: Prisma.customersCreateManyInput | Prisma.customersCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * customers update
 */
export type customersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
  /**
   * The data needed to update a customers.
   */
  data: Prisma.XOR<Prisma.customersUpdateInput, Prisma.customersUncheckedUpdateInput>
  /**
   * Choose, which customers to update.
   */
  where: Prisma.customersWhereUniqueInput
}

/**
 * customers updateMany
 */
export type customersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update customers.
   */
  data: Prisma.XOR<Prisma.customersUpdateManyMutationInput, Prisma.customersUncheckedUpdateManyInput>
  /**
   * Filter which customers to update
   */
  where?: Prisma.customersWhereInput
  /**
   * Limit how many customers to update.
   */
  limit?: number
}

/**
 * customers updateManyAndReturn
 */
export type customersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * The data used to update customers.
   */
  data: Prisma.XOR<Prisma.customersUpdateManyMutationInput, Prisma.customersUncheckedUpdateManyInput>
  /**
   * Filter which customers to update
   */
  where?: Prisma.customersWhereInput
  /**
   * Limit how many customers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * customers upsert
 */
export type customersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
  /**
   * The filter to search for the customers to update in case it exists.
   */
  where: Prisma.customersWhereUniqueInput
  /**
   * In case the customers found by the `where` argument doesn't exist, create a new customers with this data.
   */
  create: Prisma.XOR<Prisma.customersCreateInput, Prisma.customersUncheckedCreateInput>
  /**
   * In case the customers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.customersUpdateInput, Prisma.customersUncheckedUpdateInput>
}

/**
 * customers delete
 */
export type customersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
  /**
   * Filter which customers to delete.
   */
  where: Prisma.customersWhereUniqueInput
}

/**
 * customers deleteMany
 */
export type customersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which customers to delete
   */
  where?: Prisma.customersWhereInput
  /**
   * Limit how many customers to delete.
   */
  limit?: number
}

/**
 * customers.stores
 */
export type customers$storesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the stores
   */
  select?: Prisma.storesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the stores
   */
  omit?: Prisma.storesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.storesInclude<ExtArgs> | null
  where?: Prisma.storesWhereInput
}

/**
 * customers.sub_brands
 */
export type customers$sub_brandsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sub_brands
   */
  select?: Prisma.sub_brandsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sub_brands
   */
  omit?: Prisma.sub_brandsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sub_brandsInclude<ExtArgs> | null
  where?: Prisma.sub_brandsWhereInput
}

/**
 * customers.sales
 */
export type customers$salesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sales
   */
  select?: Prisma.salesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sales
   */
  omit?: Prisma.salesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salesInclude<ExtArgs> | null
  where?: Prisma.salesWhereInput
  orderBy?: Prisma.salesOrderByWithRelationInput | Prisma.salesOrderByWithRelationInput[]
  cursor?: Prisma.salesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SalesScalarFieldEnum | Prisma.SalesScalarFieldEnum[]
}

/**
 * customers without action
 */
export type customersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the customers
   */
  select?: Prisma.customersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the customers
   */
  omit?: Prisma.customersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.customersInclude<ExtArgs> | null
}
